
L496_W5300_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007858  08007858  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007860  08007860  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08007868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  200000c4  0800792c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a00  0800792c  00020a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ec9  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bfd  00000000  00000000  00030fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00033bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00034a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa82  00000000  00000000  00035780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012547  00000000  00000000  00060202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001003c1  00000000  00000000  00072749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d4  00000000  00000000  00172b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007548 	.word	0x08007548

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	08007548 	.word	0x08007548

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:
static void MX_FMC_Init(void);
/* USER CODE BEGIN PFP */
uint8_t rxData[2];

int _write(int fd, char *str, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	e00b      	b.n	80005be <_write+0x2a>
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	18d1      	adds	r1, r2, r3
 80005ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b0:	2201      	movs	r2, #1
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <_write+0x3c>)
 80005b4:	f002 fce6 	bl	8002f84 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dbef      	blt.n	80005a6 <_write+0x12>
	}
	return len;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000e0 	.word	0x200000e0

080005d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    */

     /*
       loop back received data
     */
     HAL_UART_Receive_IT(&hlpuart1, rxData, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4907      	ldr	r1, [pc, #28]	; (80005fc <HAL_UART_RxCpltCallback+0x28>)
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <HAL_UART_RxCpltCallback+0x2c>)
 80005e2:	f002 fd63 	bl	80030ac <HAL_UART_Receive_IT>
     HAL_UART_Transmit(&hlpuart1, rxData, 1, 1000);
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	2201      	movs	r2, #1
 80005ec:	4903      	ldr	r1, [pc, #12]	; (80005fc <HAL_UART_RxCpltCallback+0x28>)
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <HAL_UART_RxCpltCallback+0x2c>)
 80005f0:	f002 fcc8 	bl	8002f84 <HAL_UART_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200009b4 	.word	0x200009b4
 8000600:	200000e0 	.word	0x200000e0

08000604 <Reset_W5300>:
void Reset_W5300()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <Reset_W5300+0x28>)
 800060e:	f001 f88f 	bl	8001730 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000612:	200a      	movs	r0, #10
 8000614:	f000 fd46 	bl	80010a4 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <Reset_W5300+0x28>)
 800061e:	f001 f887 	bl	8001730 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f000 fd3e 	bl	80010a4 <HAL_Delay>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	48001400 	.word	0x48001400

08000630 <W5300_write>:

void W5300_write(uint32_t addr, iodata_t wd)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
	_W5300_DATA(addr) = wd;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	f103 43c8 	add.w	r3, r3, #1677721600	; 0x64000000
 8000644:	461a      	mov	r2, r3
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	8013      	strh	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	return _W5300_DATA(addr);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	f103 43c8 	add.w	r3, r3, #1677721600	; 0x64000000
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	b29b      	uxth	r3, r3
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <W5300CsEnable>:
void W5300CsEnable(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <W5300CsDisable>:
void W5300CsDisable(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <print_network_information>:
void print_network_information(void)
{
 8000694:	b5b0      	push	{r4, r5, r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af04      	add	r7, sp, #16
    wizchip_getnetinfo(&gWIZNETINFO);
 800069a:	4830      	ldr	r0, [pc, #192]	; (800075c <print_network_information+0xc8>)
 800069c:	f005 fe16 	bl	80062cc <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <print_network_information+0xc8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	4b2d      	ldr	r3, [pc, #180]	; (800075c <print_network_information+0xc8>)
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	461c      	mov	r4, r3
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <print_network_information+0xc8>)
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	461d      	mov	r5, r3
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <print_network_information+0xc8>)
 80006b4:	78db      	ldrb	r3, [r3, #3]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <print_network_information+0xc8>)
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <print_network_information+0xc8>)
 80006c0:	795b      	ldrb	r3, [r3, #5]
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	9101      	str	r1, [sp, #4]
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	462b      	mov	r3, r5
 80006ca:	4622      	mov	r2, r4
 80006cc:	4601      	mov	r1, r0
 80006ce:	4824      	ldr	r0, [pc, #144]	; (8000760 <print_network_information+0xcc>)
 80006d0:	f006 f816 	bl	8006700 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <print_network_information+0xc8>)
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	4619      	mov	r1, r3
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <print_network_information+0xc8>)
 80006dc:	79db      	ldrb	r3, [r3, #7]
 80006de:	461a      	mov	r2, r3
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <print_network_information+0xc8>)
 80006e2:	7a1b      	ldrb	r3, [r3, #8]
 80006e4:	4618      	mov	r0, r3
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <print_network_information+0xc8>)
 80006e8:	7a5b      	ldrb	r3, [r3, #9]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4603      	mov	r3, r0
 80006ee:	481d      	ldr	r0, [pc, #116]	; (8000764 <print_network_information+0xd0>)
 80006f0:	f006 f806 	bl	8006700 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <print_network_information+0xc8>)
 80006f6:	7a9b      	ldrb	r3, [r3, #10]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <print_network_information+0xc8>)
 80006fc:	7adb      	ldrb	r3, [r3, #11]
 80006fe:	461a      	mov	r2, r3
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <print_network_information+0xc8>)
 8000702:	7b1b      	ldrb	r3, [r3, #12]
 8000704:	4618      	mov	r0, r3
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <print_network_information+0xc8>)
 8000708:	7b5b      	ldrb	r3, [r3, #13]
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	4603      	mov	r3, r0
 800070e:	4816      	ldr	r0, [pc, #88]	; (8000768 <print_network_information+0xd4>)
 8000710:	f005 fff6 	bl	8006700 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <print_network_information+0xc8>)
 8000716:	7b9b      	ldrb	r3, [r3, #14]
 8000718:	4619      	mov	r1, r3
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <print_network_information+0xc8>)
 800071c:	7bdb      	ldrb	r3, [r3, #15]
 800071e:	461a      	mov	r2, r3
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <print_network_information+0xc8>)
 8000722:	7c1b      	ldrb	r3, [r3, #16]
 8000724:	4618      	mov	r0, r3
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <print_network_information+0xc8>)
 8000728:	7c5b      	ldrb	r3, [r3, #17]
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	4603      	mov	r3, r0
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <print_network_information+0xd8>)
 8000730:	f005 ffe6 	bl	8006700 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <print_network_information+0xc8>)
 8000736:	7c9b      	ldrb	r3, [r3, #18]
 8000738:	4619      	mov	r1, r3
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <print_network_information+0xc8>)
 800073c:	7cdb      	ldrb	r3, [r3, #19]
 800073e:	461a      	mov	r2, r3
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <print_network_information+0xc8>)
 8000742:	7d1b      	ldrb	r3, [r3, #20]
 8000744:	4618      	mov	r0, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <print_network_information+0xc8>)
 8000748:	7d5b      	ldrb	r3, [r3, #21]
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	4603      	mov	r3, r0
 800074e:	4808      	ldr	r0, [pc, #32]	; (8000770 <print_network_information+0xdc>)
 8000750:	f005 ffd6 	bl	8006700 <iprintf>
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bdb0      	pop	{r4, r5, r7, pc}
 800075a:	bf00      	nop
 800075c:	20000010 	.word	0x20000010
 8000760:	08007560 	.word	0x08007560
 8000764:	08007590 	.word	0x08007590
 8000768:	080075ac 	.word	0x080075ac
 800076c:	080075c8 	.word	0x080075c8
 8000770:	080075e4 	.word	0x080075e4

08000774 <_InitW5300>:

void _InitW5300(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
	unsigned int tmpaddr[4];

	Reset_W5300();
 800077a:	f7ff ff43 	bl	8000604 <Reset_W5300>
	reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 800077e:	4912      	ldr	r1, [pc, #72]	; (80007c8 <_InitW5300+0x54>)
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <_InitW5300+0x58>)
 8000782:	f005 fa2d 	bl	8005be0 <reg_wizchip_bus_cbfunc>
	reg_wizchip_cs_cbfunc(W5300CsEnable, W5300CsDisable);
 8000786:	4912      	ldr	r1, [pc, #72]	; (80007d0 <_InitW5300+0x5c>)
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <_InitW5300+0x60>)
 800078a:	f005 fa03 	bl	8005b94 <reg_wizchip_cs_cbfunc>
	printf("getMR() = %04X\r\n", getMR());
 800078e:	2000      	movs	r0, #0
 8000790:	f004 f98e 	bl	8004ab0 <WIZCHIP_READ>
 8000794:	4603      	mov	r3, r0
 8000796:	4619      	mov	r1, r3
 8000798:	480f      	ldr	r0, [pc, #60]	; (80007d8 <_InitW5300+0x64>)
 800079a:	f005 ffb1 	bl	8006700 <iprintf>

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 800079e:	490f      	ldr	r1, [pc, #60]	; (80007dc <_InitW5300+0x68>)
 80007a0:	2001      	movs	r0, #1
 80007a2:	f005 fa49 	bl	8005c38 <ctlwizchip>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ac:	d102      	bne.n	80007b4 <_InitW5300+0x40>
	{
		printf("W5300 memory initialization failed\r\n");
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <_InitW5300+0x6c>)
 80007b0:	f006 f82c 	bl	800680c <puts>
	}

	ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80007b4:	490b      	ldr	r1, [pc, #44]	; (80007e4 <_InitW5300+0x70>)
 80007b6:	2000      	movs	r0, #0
 80007b8:	f005 faba 	bl	8005d30 <ctlnetwork>
	print_network_information();
 80007bc:	f7ff ff6a 	bl	8000694 <print_network_information>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	08000631 	.word	0x08000631
 80007cc:	08000657 	.word	0x08000657
 80007d0:	08000685 	.word	0x08000685
 80007d4:	08000677 	.word	0x08000677
 80007d8:	08007600 	.word	0x08007600
 80007dc:	20000000 	.word	0x20000000
 80007e0:	08007614 	.word	0x08007614
 80007e4:	20000010 	.word	0x20000010

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 fbe5 	bl	8000fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f820 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 f8fe 	bl	80009f4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80007f8:	f000 f870 	bl	80008dc <MX_LPUART1_UART_Init>
  MX_FMC_Init();
 80007fc:	f000 f89a 	bl	8000934 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello! W5300 BUS loopback System \r\n");
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <main+0x3c>)
 8000802:	f006 f803 	bl	800680c <puts>
  HAL_UART_Receive_IT(&hlpuart1, rxData, 1);
 8000806:	2201      	movs	r2, #1
 8000808:	4907      	ldr	r1, [pc, #28]	; (8000828 <main+0x40>)
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <main+0x44>)
 800080c:	f002 fc4e 	bl	80030ac <HAL_UART_Receive_IT>

  _InitW5300();
 8000810:	f7ff ffb0 	bl	8000774 <_InitW5300>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 loopback_tcps(0, ethBuf0, 3000);
 8000814:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000818:	4905      	ldr	r1, [pc, #20]	; (8000830 <main+0x48>)
 800081a:	2000      	movs	r0, #0
 800081c:	f003 fff6 	bl	800480c <loopback_tcps>
  {
 8000820:	e7f8      	b.n	8000814 <main+0x2c>
 8000822:	bf00      	nop
 8000824:	08007638 	.word	0x08007638
 8000828:	200009b4 	.word	0x200009b4
 800082c:	200000e0 	.word	0x200000e0
 8000830:	200001b4 	.word	0x200001b4

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b096      	sub	sp, #88	; 0x58
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2244      	movs	r2, #68	; 0x44
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f005 fe74 	bl	8006530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000856:	f44f 7000 	mov.w	r0, #512	; 0x200
 800085a:	f000 ff8f 	bl	800177c <HAL_PWREx_ControlVoltageScaling>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000864:	f000 f9a8 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000868:	2310      	movs	r3, #16
 800086a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800087c:	2301      	movs	r3, #1
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000880:	2301      	movs	r3, #1
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000884:	2347      	movs	r3, #71	; 0x47
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000890:	2306      	movs	r3, #6
 8000892:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4618      	mov	r0, r3
 800089a:	f000 ffd5 	bl	8001848 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008a4:	f000 f988 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2303      	movs	r3, #3
 80008ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2102      	movs	r1, #2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fbda 	bl	800207c <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ce:	f000 f973 	bl	8000bb8 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3758      	adds	r7, #88	; 0x58
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	; (8000930 <MX_LPUART1_UART_Init+0x54>)
 80008e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 800091a:	f002 fae5 	bl	8002ee8 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 f948 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000e0 	.word	0x200000e0
 8000930:	40008000 	.word	0x40008000

08000934 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2220      	movs	r2, #32
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f005 fdf5 	bl	8006530 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_FMC_Init+0xb8>)
 8000948:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800094c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_FMC_Init+0xb8>)
 8000950:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <MX_FMC_Init+0xbc>)
 8000952:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_FMC_Init+0xb8>)
 8000956:	2202      	movs	r2, #2
 8000958:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_FMC_Init+0xb8>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_FMC_Init+0xb8>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_FMC_Init+0xb8>)
 8000968:	2210      	movs	r2, #16
 800096a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_FMC_Init+0xb8>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_FMC_Init+0xb8>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_FMC_Init+0xb8>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_FMC_Init+0xb8>)
 8000980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_FMC_Init+0xb8>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_FMC_Init+0xb8>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_FMC_Init+0xb8>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_FMC_Init+0xb8>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_FMC_Init+0xb8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_FMC_Init+0xb8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_FMC_Init+0xb8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80009b0:	230f      	movs	r3, #15
 80009b2:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80009b4:	230f      	movs	r3, #15
 80009b6:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80009b8:	23ff      	movs	r3, #255	; 0xff
 80009ba:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80009bc:	230f      	movs	r3, #15
 80009be:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80009c0:	2310      	movs	r3, #16
 80009c2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80009c4:	2311      	movs	r3, #17
 80009c6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_FMC_Init+0xb8>)
 80009d4:	f002 fa40 	bl	8002e58 <HAL_SRAM_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_FMC_Init+0xae>
  {
    Error_Handler( );
 80009de:	f000 f8eb 	bl	8000bb8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000164 	.word	0x20000164
 80009f0:	a0000104 	.word	0xa0000104

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b66      	ldr	r3, [pc, #408]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a65      	ldr	r2, [pc, #404]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b63      	ldr	r3, [pc, #396]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	623b      	str	r3, [r7, #32]
 8000a20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	4b60      	ldr	r3, [pc, #384]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a5f      	ldr	r2, [pc, #380]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0320 	and.w	r3, r3, #32
 8000a36:	61fb      	str	r3, [r7, #28]
 8000a38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a59      	ldr	r2, [pc, #356]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b57      	ldr	r3, [pc, #348]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a52:	4b54      	ldr	r3, [pc, #336]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a53      	ldr	r2, [pc, #332]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b51      	ldr	r3, [pc, #324]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a4d      	ldr	r2, [pc, #308]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b4b      	ldr	r3, [pc, #300]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b48      	ldr	r3, [pc, #288]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a47      	ldr	r2, [pc, #284]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a41      	ldr	r2, [pc, #260]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000ab2:	f000 feb9 	bl	8001828 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a3a      	ldr	r2, [pc, #232]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5300_Reset_GPIO_Port, W5300_Reset_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	4835      	ldr	r0, [pc, #212]	; (8000ba8 <MX_GPIO_Init+0x1b4>)
 8000ad4:	f000 fe2c 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ade:	4833      	ldr	r0, [pc, #204]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000ae0:	f000 fe26 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2140      	movs	r1, #64	; 0x40
 8000ae8:	4831      	ldr	r0, [pc, #196]	; (8000bb0 <MX_GPIO_Init+0x1bc>)
 8000aea:	f000 fe21 	bl	8001730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <MX_GPIO_Init+0x1c0>)
 8000b06:	f000 fc81 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5300_Reset_Pin */
  GPIO_InitStruct.Pin = W5300_Reset_Pin;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(W5300_Reset_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <MX_GPIO_Init+0x1b4>)
 8000b22:	f000 fc73 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b26:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481b      	ldr	r0, [pc, #108]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000b40:	f000 fc64 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b44:	2320      	movs	r3, #32
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <MX_GPIO_Init+0x1bc>)
 8000b58:	f000 fc58 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b5c:	2340      	movs	r3, #64	; 0x40
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <MX_GPIO_Init+0x1bc>)
 8000b74:	f000 fc4a 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f000 fc38 	bl	800140c <HAL_GPIO_Init>

}
 8000b9c:	bf00      	nop
 8000b9e:	3738      	adds	r7, #56	; 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48001400 	.word	0x48001400
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48001800 	.word	0x48001800
 8000bb4:	48000800 	.word	0x48000800

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_MspInit+0x44>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x44>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x44>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6593      	str	r3, [r2, #88]	; 0x58
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x44>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ac      	sub	sp, #176	; 0xb0
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	228c      	movs	r2, #140	; 0x8c
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fc7f 	bl	8006530 <memset>
  if(huart->Instance==LPUART1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <HAL_UART_MspInit+0xc4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d145      	bne.n	8000cc8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 fc3b 	bl	80024c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c54:	f7ff ffb0 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000c88:	f000 fdce 	bl	8001828 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <HAL_UART_MspInit+0xcc>)
 8000cb4:	f000 fbaa 	bl	800140c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2046      	movs	r0, #70	; 0x46
 8000cbe:	f000 faf0 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000cc2:	2046      	movs	r0, #70	; 0x46
 8000cc4:	f000 fb09 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	37b0      	adds	r7, #176	; 0xb0
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48001800 	.word	0x48001800

08000cdc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_FMC_MspInit+0xc4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14f      	bne.n	8000d98 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_FMC_MspInit+0xc4>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <HAL_FMC_MspInit+0xc8>)
 8000d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d02:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <HAL_FMC_MspInit+0xc8>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6513      	str	r3, [r2, #80]	; 0x50
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <HAL_FMC_MspInit+0xc8>)
 8000d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PG9   ------> FMC_NE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d16:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000d1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	481d      	ldr	r0, [pc, #116]	; (8000da8 <HAL_FMC_MspInit+0xcc>)
 8000d32:	f000 fb6b 	bl	800140c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d36:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d48:	230c      	movs	r3, #12
 8000d4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4816      	ldr	r0, [pc, #88]	; (8000dac <HAL_FMC_MspInit+0xd0>)
 8000d52:	f000 fb5b 	bl	800140c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d56:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000d5a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <HAL_FMC_MspInit+0xd4>)
 8000d72:	f000 fb4b 	bl	800140c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d88:	230c      	movs	r3, #12
 8000d8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <HAL_FMC_MspInit+0xd8>)
 8000d92:	f000 fb3b 	bl	800140c <HAL_GPIO_Init>
 8000d96:	e000      	b.n	8000d9a <HAL_FMC_MspInit+0xbe>
    return;
 8000d98:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200009b8 	.word	0x200009b8
 8000da4:	40021000 	.word	0x40021000
 8000da8:	48001400 	.word	0x48001400
 8000dac:	48001000 	.word	0x48001000
 8000db0:	48000c00 	.word	0x48000c00
 8000db4:	48001800 	.word	0x48001800

08000db8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000dc0:	f7ff ff8c 	bl	8000cdc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f924 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <LPUART1_IRQHandler+0x10>)
 8000e26:	f002 f997 	bl	8003158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000e0 	.word	0x200000e0

08000e34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e00a      	b.n	8000e5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e46:	f3af 8000 	nop.w
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	60ba      	str	r2, [r7, #8]
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf0      	blt.n	8000e46 <_read+0x12>
	}

return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	return -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e96:	605a      	str	r2, [r3, #4]
	return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_isatty>:

int _isatty(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	return 1;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f005 fae8 	bl	80064dc <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20050000 	.word	0x20050000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	200009bc 	.word	0x200009bc
 8000f40:	20000a00 	.word	0x20000a00

08000f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f005 faa7 	bl	80064e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f9a:	f7ff fc25 	bl	80007e8 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8000fac:	08007868 	.word	0x08007868
  ldr r2, =_sbss
 8000fb0:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8000fb4:	20000a00 	.word	0x20000a00

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>

08000fba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f961 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f80e 	bl	8000fec <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	e001      	b.n	8000fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fdc:	f7ff fdf2 	bl	8000bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d023      	beq.n	8001048 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_InitTick+0x70>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_InitTick+0x6c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f96d 	bl	80012f6 <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10f      	bne.n	8001042 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d809      	bhi.n	800103c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f937 	bl	80012a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_InitTick+0x74>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e007      	b.n	800104c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e004      	b.n	800104c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e001      	b.n	800104c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000030 	.word	0x20000030
 800105c:	20000028 	.word	0x20000028
 8001060:	2000002c 	.word	0x2000002c

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000030 	.word	0x20000030
 8001088:	200009c0 	.word	0x200009c0

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200009c0 	.word	0x200009c0

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000030 	.word	0x20000030

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff3e 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff31 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d008      	beq.n	8001338 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2204      	movs	r2, #4
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e022      	b.n	800137e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 020e 	bic.w	r2, r2, #14
 8001346:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	f003 021c 	and.w	r2, r3, #28
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d005      	beq.n	80013ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2204      	movs	r2, #4
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e029      	b.n	8001402 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020e 	bic.w	r2, r2, #14
 80013bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f003 021c 	and.w	r2, r3, #28
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
    }
  }
  return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	e166      	b.n	80016ea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8158 	beq.w	80016e4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d005      	beq.n	800144c <HAL_GPIO_Init+0x40>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d130      	bne.n	80014ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001482:	2201      	movs	r2, #1
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	f003 0201 	and.w	r2, r3, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d017      	beq.n	80014ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d123      	bne.n	800153e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0203 	and.w	r2, r3, #3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80b2 	beq.w	80016e4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001580:	4b61      	ldr	r3, [pc, #388]	; (8001708 <HAL_GPIO_Init+0x2fc>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001584:	4a60      	ldr	r2, [pc, #384]	; (8001708 <HAL_GPIO_Init+0x2fc>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6613      	str	r3, [r2, #96]	; 0x60
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <HAL_GPIO_Init+0x2fc>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001598:	4a5c      	ldr	r2, [pc, #368]	; (800170c <HAL_GPIO_Init+0x300>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015c2:	d02b      	beq.n	800161c <HAL_GPIO_Init+0x210>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_GPIO_Init+0x304>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d025      	beq.n	8001618 <HAL_GPIO_Init+0x20c>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a51      	ldr	r2, [pc, #324]	; (8001714 <HAL_GPIO_Init+0x308>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d01f      	beq.n	8001614 <HAL_GPIO_Init+0x208>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a50      	ldr	r2, [pc, #320]	; (8001718 <HAL_GPIO_Init+0x30c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d019      	beq.n	8001610 <HAL_GPIO_Init+0x204>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a4f      	ldr	r2, [pc, #316]	; (800171c <HAL_GPIO_Init+0x310>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d013      	beq.n	800160c <HAL_GPIO_Init+0x200>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a4e      	ldr	r2, [pc, #312]	; (8001720 <HAL_GPIO_Init+0x314>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00d      	beq.n	8001608 <HAL_GPIO_Init+0x1fc>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4d      	ldr	r2, [pc, #308]	; (8001724 <HAL_GPIO_Init+0x318>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_Init+0x1f8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4c      	ldr	r2, [pc, #304]	; (8001728 <HAL_GPIO_Init+0x31c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_GPIO_Init+0x1f4>
 80015fc:	2307      	movs	r3, #7
 80015fe:	e00e      	b.n	800161e <HAL_GPIO_Init+0x212>
 8001600:	2308      	movs	r3, #8
 8001602:	e00c      	b.n	800161e <HAL_GPIO_Init+0x212>
 8001604:	2306      	movs	r3, #6
 8001606:	e00a      	b.n	800161e <HAL_GPIO_Init+0x212>
 8001608:	2305      	movs	r3, #5
 800160a:	e008      	b.n	800161e <HAL_GPIO_Init+0x212>
 800160c:	2304      	movs	r3, #4
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x212>
 8001610:	2303      	movs	r3, #3
 8001612:	e004      	b.n	800161e <HAL_GPIO_Init+0x212>
 8001614:	2302      	movs	r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x212>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_GPIO_Init+0x212>
 800161c:	2300      	movs	r3, #0
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	f002 0203 	and.w	r2, r2, #3
 8001624:	0092      	lsls	r2, r2, #2
 8001626:	4093      	lsls	r3, r2
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800162e:	4937      	ldr	r1, [pc, #220]	; (800170c <HAL_GPIO_Init+0x300>)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800163c:	4b3b      	ldr	r3, [pc, #236]	; (800172c <HAL_GPIO_Init+0x320>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001660:	4a32      	ldr	r2, [pc, #200]	; (800172c <HAL_GPIO_Init+0x320>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_GPIO_Init+0x320>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800168a:	4a28      	ldr	r2, [pc, #160]	; (800172c <HAL_GPIO_Init+0x320>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001690:	4b26      	ldr	r3, [pc, #152]	; (800172c <HAL_GPIO_Init+0x320>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016b4:	4a1d      	ldr	r2, [pc, #116]	; (800172c <HAL_GPIO_Init+0x320>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_GPIO_Init+0x320>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <HAL_GPIO_Init+0x320>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3301      	adds	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f47f ae91 	bne.w	800141c <HAL_GPIO_Init+0x10>
  }
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	48000400 	.word	0x48000400
 8001714:	48000800 	.word	0x48000800
 8001718:	48000c00 	.word	0x48000c00
 800171c:	48001000 	.word	0x48001000
 8001720:	48001400 	.word	0x48001400
 8001724:	48001800 	.word	0x48001800
 8001728:	48001c00 	.word	0x48001c00
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800174c:	e002      	b.n	8001754 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_PWREx_GetVoltageRange+0x18>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000

0800177c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800178a:	d130      	bne.n	80017ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001798:	d038      	beq.n	800180c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2232      	movs	r2, #50	; 0x32
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0c9b      	lsrs	r3, r3, #18
 80017bc:	3301      	adds	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c0:	e002      	b.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d4:	d102      	bne.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f2      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e8:	d110      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e00f      	b.n	800180e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fa:	d007      	beq.n	800180c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001804:	4a05      	ldr	r2, [pc, #20]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40007000 	.word	0x40007000
 8001820:	20000028 	.word	0x20000028
 8001824:	431bde83 	.word	0x431bde83

08001828 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_PWREx_EnableVddIO2+0x1c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001836:	6053      	str	r3, [r2, #4]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40007000 	.word	0x40007000

08001848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f000 bc08 	b.w	800206c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185c:	4b96      	ldr	r3, [pc, #600]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001866:	4b94      	ldr	r3, [pc, #592]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80e4 	beq.w	8001a46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <HAL_RCC_OscConfig+0x4c>
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	f040 808b 	bne.w	80019a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b01      	cmp	r3, #1
 8001890:	f040 8087 	bne.w	80019a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001894:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_OscConfig+0x64>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e3df      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1a      	ldr	r2, [r3, #32]
 80018b0:	4b81      	ldr	r3, [pc, #516]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_RCC_OscConfig+0x7e>
 80018bc:	4b7e      	ldr	r3, [pc, #504]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c4:	e005      	b.n	80018d2 <HAL_RCC_OscConfig+0x8a>
 80018c6:	4b7c      	ldr	r3, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d223      	bcs.n	800191e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fd92 	bl	8002404 <RCC_SetFlashLatencyFromMSIRange>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e3c0      	b.n	800206c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a72      	ldr	r2, [pc, #456]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	496d      	ldr	r1, [pc, #436]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001908:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	4968      	ldr	r1, [pc, #416]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
 800191c:	e025      	b.n	800196a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800191e:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a65      	ldr	r2, [pc, #404]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4960      	ldr	r1, [pc, #384]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193c:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	495b      	ldr	r1, [pc, #364]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fd52 	bl	8002404 <RCC_SetFlashLatencyFromMSIRange>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e380      	b.n	800206c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800196a:	f000 fc87 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	4950      	ldr	r1, [pc, #320]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	4a4e      	ldr	r2, [pc, #312]	; (8001ac0 <HAL_RCC_OscConfig+0x278>)
 8001988:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800198a:	4b4e      	ldr	r3, [pc, #312]	; (8001ac4 <HAL_RCC_OscConfig+0x27c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb2c 	bl	8000fec <HAL_InitTick>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d052      	beq.n	8001a44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	e364      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d032      	beq.n	8001a10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019aa:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a42      	ldr	r2, [pc, #264]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019b6:	f7ff fb69 	bl	800108c <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019be:	f7ff fb65 	bl	800108c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e34d      	b.n	800206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4930      	ldr	r1, [pc, #192]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fa:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	492b      	ldr	r1, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
 8001a0e:	e01a      	b.n	8001a46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a10:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a28      	ldr	r2, [pc, #160]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb36 	bl	800108c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a24:	f7ff fb32 	bl	800108c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e31a      	b.n	800206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1dc>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d073      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x21c>
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	d10e      	bne.n	8001a7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d10b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d063      	beq.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d15f      	bne.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e2f7      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x24c>
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e025      	b.n	8001ae0 <HAL_RCC_OscConfig+0x298>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d114      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x280>
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a02      	ldr	r2, [pc, #8]	; (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e013      	b.n	8001ae0 <HAL_RCC_OscConfig+0x298>
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08007778 	.word	0x08007778
 8001ac0:	20000028 	.word	0x20000028
 8001ac4:	2000002c 	.word	0x2000002c
 8001ac8:	4ba0      	ldr	r3, [pc, #640]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a9f      	ldr	r2, [pc, #636]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b9d      	ldr	r3, [pc, #628]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a9c      	ldr	r2, [pc, #624]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fad0 	bl	800108c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff facc 	bl	800108c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e2b4      	b.n	800206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b02:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2a8>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff fabc 	bl	800108c <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fab8 	bl	800108c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e2a0      	b.n	800206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2a:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2d0>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d060      	beq.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x310>
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d119      	bne.n	8001b86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d116      	bne.n	8001b86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b58:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_OscConfig+0x328>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e27d      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	061b      	lsls	r3, r3, #24
 8001b7e:	4973      	ldr	r1, [pc, #460]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	e040      	b.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d023      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fa77 	bl	800108c <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fa73 	bl	800108c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e25b      	b.n	800206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b62      	ldr	r3, [pc, #392]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	495f      	ldr	r1, [pc, #380]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e018      	b.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a5c      	ldr	r2, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7ff fa53 	bl	800108c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff fa4f 	bl	800108c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e237      	b.n	800206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d03c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1c:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c22:	4a4a      	ldr	r2, [pc, #296]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff fa2e 	bl	800108c <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c34:	f7ff fa2a 	bl	800108c <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e212      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ef      	beq.n	8001c34 <HAL_RCC_OscConfig+0x3ec>
 8001c54:	e01b      	b.n	8001c8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5c:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff fa11 	bl	800108c <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fa0d 	bl	800108c <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e1f5      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ef      	bne.n	8001c6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80a6 	beq.w	8001de8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10d      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x508>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d118      	bne.n	8001d06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_OscConfig+0x508>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_RCC_OscConfig+0x508>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f9d4 	bl	800108c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce8:	f7ff f9d0 	bl	800108c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1b8      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_RCC_OscConfig+0x508>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d108      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4d8>
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d1e:	e029      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d115      	bne.n	8001d54 <HAL_RCC_OscConfig+0x50c>
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <HAL_RCC_OscConfig+0x504>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d48:	e014      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40007000 	.word	0x40007000
 8001d54:	4b9d      	ldr	r3, [pc, #628]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	4a9c      	ldr	r2, [pc, #624]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d64:	4b99      	ldr	r3, [pc, #612]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	4a98      	ldr	r2, [pc, #608]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d016      	beq.n	8001daa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f986 	bl	800108c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7ff f982 	bl	800108c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e168      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9a:	4b8c      	ldr	r3, [pc, #560]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ed      	beq.n	8001d84 <HAL_RCC_OscConfig+0x53c>
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff f96f 	bl	800108c <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff f96b 	bl	800108c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e151      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc8:	4b80      	ldr	r3, [pc, #512]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1ed      	bne.n	8001db2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd6:	7ffb      	ldrb	r3, [r7, #31]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d03c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01c      	beq.n	8001e36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dfc:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e02:	4a72      	ldr	r2, [pc, #456]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f93e 	bl	800108c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e14:	f7ff f93a 	bl	800108c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e122      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e26:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ef      	beq.n	8001e14 <HAL_RCC_OscConfig+0x5cc>
 8001e34:	e01b      	b.n	8001e6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e36:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e3c:	4a63      	ldr	r2, [pc, #396]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff f921 	bl	800108c <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e4e:	f7ff f91d 	bl	800108c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e105      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e60:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ef      	bne.n	8001e4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80f9 	beq.w	800206a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	f040 80cf 	bne.w	8002020 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e82:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0203 	and.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d12c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d123      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d113      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d109      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d071      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d068      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ef6:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0ac      	b.n	800206c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f1e:	f7ff f8b5 	bl	800108c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff f8b1 	bl	800108c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e099      	b.n	800206c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_RCC_OscConfig+0x788>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f54:	3a01      	subs	r2, #1
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	4311      	orrs	r1, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f5e:	0212      	lsls	r2, r2, #8
 8001f60:	4311      	orrs	r1, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f66:	0852      	lsrs	r2, r2, #1
 8001f68:	3a01      	subs	r2, #1
 8001f6a:	0552      	lsls	r2, r2, #21
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f72:	0852      	lsrs	r2, r2, #1
 8001f74:	3a01      	subs	r2, #1
 8001f76:	0652      	lsls	r2, r2, #25
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f7e:	06d2      	lsls	r2, r2, #27
 8001f80:	430a      	orrs	r2, r1
 8001f82:	4912      	ldr	r1, [pc, #72]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa0:	f7ff f874 	bl	800108c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff f870 	bl	800108c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e058      	b.n	800206c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_RCC_OscConfig+0x784>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc6:	e050      	b.n	800206a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e04f      	b.n	800206c <HAL_RCC_OscConfig+0x824>
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d144      	bne.n	800206a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a23      	ldr	r2, [pc, #140]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a20      	ldr	r2, [pc, #128]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff8:	f7ff f848 	bl	800108c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff f844 	bl	800108c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e02c      	b.n	800206c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x7b8>
 800201e:	e024      	b.n	800206a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d01f      	beq.n	8002066 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 800202c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff f82b 	bl	800108c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7ff f827 	bl	800108c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e00f      	b.n	800206c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4905      	ldr	r1, [pc, #20]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x830>)
 8002060:	4013      	ands	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
 8002064:	e001      	b.n	800206a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	feeefffc 	.word	0xfeeefffc

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0e7      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b75      	ldr	r3, [pc, #468]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b72      	ldr	r3, [pc, #456]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4970      	ldr	r1, [pc, #448]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b6e      	ldr	r3, [pc, #440]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0cf      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d010      	beq.n	80020ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d8:	429a      	cmp	r2, r3
 80020da:	d908      	bls.n	80020ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4960      	ldr	r1, [pc, #384]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04c      	beq.n	8002194 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b5a      	ldr	r3, [pc, #360]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d121      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0a6      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211a:	4b54      	ldr	r3, [pc, #336]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e09a      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002132:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e08e      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e086      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4943      	ldr	r1, [pc, #268]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002164:	f7fe ff92 	bl	800108c <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7fe ff8e 	bl	800108c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e06e      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d208      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b2e      	ldr	r3, [pc, #184]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	492b      	ldr	r1, [pc, #172]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d210      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 0207 	bic.w	r2, r3, #7
 80021d8:	4923      	ldr	r1, [pc, #140]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e036      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4918      	ldr	r1, [pc, #96]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4910      	ldr	r1, [pc, #64]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002230:	f000 f824 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	490b      	ldr	r1, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x1f4>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800224e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1fc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fec9 	bl	8000fec <HAL_InitTick>
 800225a:	4603      	mov	r3, r0
 800225c:	72fb      	strb	r3, [r7, #11]

  return status;
 800225e:	7afb      	ldrb	r3, [r7, #11]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
 8002270:	08007778 	.word	0x08007778
 8002274:	20000028 	.word	0x20000028
 8002278:	2000002c 	.word	0x2000002c

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d121      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d11e      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022bc:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e005      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022d8:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_RCC_GetSysClockFreq+0x110>)
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e004      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002300:	4b23      	ldr	r3, [pc, #140]	; (8002390 <HAL_RCC_GetSysClockFreq+0x114>)
 8002302:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d134      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0xa6>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d003      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0xac>
 8002320:	e005      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_RCC_GetSysClockFreq+0x110>)
 8002324:	617b      	str	r3, [r7, #20]
      break;
 8002326:	e005      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_GetSysClockFreq+0x114>)
 800232a:	617b      	str	r3, [r7, #20]
      break;
 800232c:	e002      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	617b      	str	r3, [r7, #20]
      break;
 8002332:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	3301      	adds	r3, #1
 8002340:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	fb03 f202 	mul.w	r2, r3, r2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0e5b      	lsrs	r3, r3, #25
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	3301      	adds	r3, #1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002374:	69bb      	ldr	r3, [r7, #24]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	08007790 	.word	0x08007790
 800238c:	00f42400 	.word	0x00f42400
 8002390:	007a1200 	.word	0x007a1200

08002394 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000028 	.word	0x20000028

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023b0:	f7ff fff0 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4904      	ldr	r1, [pc, #16]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08007788 	.word	0x08007788

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023dc:	f7ff ffda 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0adb      	lsrs	r3, r3, #11
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08007788 	.word	0x08007788

08002404 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002410:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800241c:	f7ff f9a0 	bl	8001760 <HAL_PWREx_GetVoltageRange>
 8002420:	6178      	str	r0, [r7, #20]
 8002422:	e014      	b.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242e:	6593      	str	r3, [r2, #88]	; 0x58
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800243c:	f7ff f990 	bl	8001760 <HAL_PWREx_GetVoltageRange>
 8002440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002454:	d10b      	bne.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d919      	bls.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2ba0      	cmp	r3, #160	; 0xa0
 8002460:	d902      	bls.n	8002468 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002462:	2302      	movs	r3, #2
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	e013      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002468:	2301      	movs	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e010      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d902      	bls.n	800247a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002474:	2303      	movs	r3, #3
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	e00a      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d102      	bne.n	8002486 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002480:	2302      	movs	r3, #2
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e004      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b70      	cmp	r3, #112	; 0x70
 800248a:	d101      	bne.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800248c:	2301      	movs	r3, #1
 800248e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 0207 	bic.w	r2, r3, #7
 8002498:	4909      	ldr	r1, [pc, #36]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d001      	beq.n	80024b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40022000 	.word	0x40022000

080024c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024cc:	2300      	movs	r3, #0
 80024ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024d0:	2300      	movs	r3, #0
 80024d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d041      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024e8:	d02a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ee:	d824      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024fa:	d81e      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d010      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002506:	e018      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002508:	4b86      	ldr	r3, [pc, #536]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a85      	ldr	r2, [pc, #532]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002514:	e015      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f000 facd 	bl	8002abc <RCCEx_PLLSAI1_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002526:	e00c      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3320      	adds	r3, #32
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fbb6 	bl	8002ca0 <RCCEx_PLLSAI2_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002538:	e003      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	74fb      	strb	r3, [r7, #19]
      break;
 800253e:	e000      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002548:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002556:	4973      	ldr	r1, [pc, #460]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800255e:	e001      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d041      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002574:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002578:	d02a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800257a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800257e:	d824      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002584:	d008      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800258a:	d81e      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d010      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002596:	e018      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002598:	4b62      	ldr	r3, [pc, #392]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a61      	ldr	r2, [pc, #388]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a4:	e015      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fa85 	bl	8002abc <RCCEx_PLLSAI1_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b6:	e00c      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3320      	adds	r3, #32
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fb6e 	bl	8002ca0 <RCCEx_PLLSAI2_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c8:	e003      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	74fb      	strb	r3, [r7, #19]
      break;
 80025ce:	e000      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025d8:	4b52      	ldr	r3, [pc, #328]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e6:	494f      	ldr	r1, [pc, #316]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025ee:	e001      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a0 	beq.w	8002742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	4a40      	ldr	r2, [pc, #256]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002626:	6593      	str	r3, [r2, #88]	; 0x58
 8002628:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002634:	2301      	movs	r3, #1
 8002636:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002644:	f7fe fd22 	bl	800108c <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800264a:	e009      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fd1e 	bl	800108c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	74fb      	strb	r3, [r7, #19]
        break;
 800265e:	e005      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d15c      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002672:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01f      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d019      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a20      	ldr	r2, [pc, #128]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fcdd 	bl	800108c <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d4:	e00b      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fcd9 	bl	800108c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d902      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	74fb      	strb	r3, [r7, #19]
            break;
 80026ec:	e006      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ec      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	4904      	ldr	r1, [pc, #16]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800271a:	e009      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
 8002720:	e006      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002730:	7c7b      	ldrb	r3, [r7, #17]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4ba6      	ldr	r3, [pc, #664]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4aa5      	ldr	r2, [pc, #660]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274e:	4ba0      	ldr	r3, [pc, #640]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f023 0203 	bic.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	499c      	ldr	r1, [pc, #624]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002770:	4b97      	ldr	r3, [pc, #604]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 020c 	bic.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	4994      	ldr	r1, [pc, #592]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002792:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	498b      	ldr	r1, [pc, #556]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b4:	4b86      	ldr	r3, [pc, #536]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4983      	ldr	r1, [pc, #524]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d6:	4b7e      	ldr	r3, [pc, #504]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	497a      	ldr	r1, [pc, #488]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	4972      	ldr	r1, [pc, #456]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800281a:	4b6d      	ldr	r3, [pc, #436]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002828:	4969      	ldr	r1, [pc, #420]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284a:	4961      	ldr	r1, [pc, #388]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800285e:	4b5c      	ldr	r3, [pc, #368]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286c:	4958      	ldr	r1, [pc, #352]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	4950      	ldr	r1, [pc, #320]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a2:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	4947      	ldr	r1, [pc, #284]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028c4:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	493f      	ldr	r1, [pc, #252]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d028      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e6:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	4936      	ldr	r1, [pc, #216]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002904:	d106      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002906:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800290c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002910:	60d3      	str	r3, [r2, #12]
 8002912:	e011      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800291c:	d10c      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f8c9 	bl	8002abc <RCCEx_PLLSAI1_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d028      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	491f      	ldr	r1, [pc, #124]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002962:	d106      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800296a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800296e:	60d3      	str	r3, [r2, #12]
 8002970:	e011      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002976:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800297a:	d10c      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	2101      	movs	r1, #1
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f89a 	bl	8002abc <RCCEx_PLLSAI1_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d02a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b0:	4907      	ldr	r1, [pc, #28]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c0:	d108      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a02      	ldr	r2, [pc, #8]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029cc:	60d3      	str	r3, [r2, #12]
 80029ce:	e013      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80029d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 f869 	bl	8002abc <RCCEx_PLLSAI1_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02f      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a04:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a12:	4929      	ldr	r1, [pc, #164]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a22:	d10d      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f846 	bl	8002abc <RCCEx_PLLSAI1_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d014      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	74bb      	strb	r3, [r7, #18]
 8002a3e:	e011      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3320      	adds	r3, #32
 8002a4e:	2102      	movs	r1, #2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f925 	bl	8002ca0 <RCCEx_PLLSAI2_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a80:	490d      	ldr	r1, [pc, #52]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00b      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa4:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aac:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000

08002abc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aca:	4b74      	ldr	r3, [pc, #464]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d018      	beq.n	8002b08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ad6:	4b71      	ldr	r3, [pc, #452]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0203 	and.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10d      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aee:	4b6b      	ldr	r3, [pc, #428]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
       ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d047      	beq.n	8002b92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e044      	b.n	8002b92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d018      	beq.n	8002b42 <RCCEx_PLLSAI1_Config+0x86>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d825      	bhi.n	8002b60 <RCCEx_PLLSAI1_Config+0xa4>
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d002      	beq.n	8002b1e <RCCEx_PLLSAI1_Config+0x62>
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d009      	beq.n	8002b30 <RCCEx_PLLSAI1_Config+0x74>
 8002b1c:	e020      	b.n	8002b60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b1e:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11d      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2e:	e01a      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b30:	4b5a      	ldr	r3, [pc, #360]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d116      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b40:	e013      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b42:	4b56      	ldr	r3, [pc, #344]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b4e:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b5e:	e006      	b.n	8002b6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      break;
 8002b64:	e004      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10d      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	4943      	ldr	r1, [pc, #268]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d17c      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b98:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3f      	ldr	r2, [pc, #252]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fa72 	bl	800108c <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002baa:	e009      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bac:	f7fe fa6e 	bl	800108c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002bbe:	e005      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ef      	bne.n	8002bac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d15f      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d110      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd8:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002be0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	0211      	lsls	r1, r2, #8
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68d2      	ldr	r2, [r2, #12]
 8002bee:	06d2      	lsls	r2, r2, #27
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	492a      	ldr	r1, [pc, #168]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	610b      	str	r3, [r1, #16]
 8002bf8:	e027      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d112      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c00:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6892      	ldr	r2, [r2, #8]
 8002c10:	0211      	lsls	r1, r2, #8
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6912      	ldr	r2, [r2, #16]
 8002c16:	0852      	lsrs	r2, r2, #1
 8002c18:	3a01      	subs	r2, #1
 8002c1a:	0552      	lsls	r2, r2, #21
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	491f      	ldr	r1, [pc, #124]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	610b      	str	r3, [r1, #16]
 8002c24:	e011      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6892      	ldr	r2, [r2, #8]
 8002c36:	0211      	lsls	r1, r2, #8
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6952      	ldr	r2, [r2, #20]
 8002c3c:	0852      	lsrs	r2, r2, #1
 8002c3e:	3a01      	subs	r2, #1
 8002c40:	0652      	lsls	r2, r2, #25
 8002c42:	430a      	orrs	r2, r1
 8002c44:	4915      	ldr	r1, [pc, #84]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe fa19 	bl	800108c <HAL_GetTick>
 8002c5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c5c:	e009      	b.n	8002c72 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c5e:	f7fe fa15 	bl	800108c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d902      	bls.n	8002c72 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	73fb      	strb	r3, [r7, #15]
          break;
 8002c70:	e005      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ef      	beq.n	8002c5e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d106      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4903      	ldr	r1, [pc, #12]	; (8002c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cae:	4b69      	ldr	r3, [pc, #420]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d018      	beq.n	8002cec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cba:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10d      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cd2:	4b60      	ldr	r3, [pc, #384]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d047      	beq.n	8002d76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e044      	b.n	8002d76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d018      	beq.n	8002d26 <RCCEx_PLLSAI2_Config+0x86>
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d825      	bhi.n	8002d44 <RCCEx_PLLSAI2_Config+0xa4>
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d002      	beq.n	8002d02 <RCCEx_PLLSAI2_Config+0x62>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d009      	beq.n	8002d14 <RCCEx_PLLSAI2_Config+0x74>
 8002d00:	e020      	b.n	8002d44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11d      	bne.n	8002d4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d12:	e01a      	b.n	8002d4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d14:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d24:	e013      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d26:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10f      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d32:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d42:	e006      	b.n	8002d52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e004      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d5a:	4b3e      	ldr	r3, [pc, #248]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	4938      	ldr	r1, [pc, #224]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d166      	bne.n	8002e4a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d7c:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe f980 	bl	800108c <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d8e:	e009      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d90:	f7fe f97c 	bl	800108c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d902      	bls.n	8002da4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	73fb      	strb	r3, [r7, #15]
        break;
 8002da2:	e005      	b.n	8002db0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ef      	bne.n	8002d90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d149      	bne.n	8002e4a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d110      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dbc:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002dc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6892      	ldr	r2, [r2, #8]
 8002dcc:	0211      	lsls	r1, r2, #8
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68d2      	ldr	r2, [r2, #12]
 8002dd2:	06d2      	lsls	r2, r2, #27
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	491f      	ldr	r1, [pc, #124]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	614b      	str	r3, [r1, #20]
 8002ddc:	e011      	b.n	8002e02 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002de6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6892      	ldr	r2, [r2, #8]
 8002dee:	0211      	lsls	r1, r2, #8
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6912      	ldr	r2, [r2, #16]
 8002df4:	0852      	lsrs	r2, r2, #1
 8002df6:	3a01      	subs	r2, #1
 8002df8:	0652      	lsls	r2, r2, #25
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	4915      	ldr	r1, [pc, #84]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f93d 	bl	800108c <HAL_GetTick>
 8002e12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e14:	e009      	b.n	8002e2a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e16:	f7fe f939 	bl	800108c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d902      	bls.n	8002e2a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	73fb      	strb	r3, [r7, #15]
          break;
 8002e28:	e005      	b.n	8002e36 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0ef      	beq.n	8002e16 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	4903      	ldr	r1, [pc, #12]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e038      	b.n	8002ee0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f7fd ff98 	bl	8000db8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3308      	adds	r3, #8
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f001 fba2 	bl	80045dc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	f001 fc2a 	bl	80046fc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6858      	ldr	r0, [r3, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	f001 fc71 	bl	800479c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	6892      	ldr	r2, [r2, #8]
 8002ec2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	6892      	ldr	r2, [r2, #8]
 8002ece:	f041 0101 	orr.w	r1, r1, #1
 8002ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e040      	b.n	8002f7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd fe7e 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fc18 	bl	800375c <UART_SetConfig>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e022      	b.n	8002f7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fec4 	bl	8003ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 ff4b 	bl	8003e10 <UART_CheckIdleState>
 8002f7a:	4603      	mov	r3, r0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	f040 8082 	bne.w	80030a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_UART_Transmit+0x26>
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e07a      	b.n	80030a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Transmit+0x38>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e073      	b.n	80030a4 <HAL_UART_Transmit+0x120>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2221      	movs	r2, #33	; 0x21
 8002fd0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fd2:	f7fe f85b 	bl	800108c <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff0:	d108      	bne.n	8003004 <HAL_UART_Transmit+0x80>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d104      	bne.n	8003004 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	e003      	b.n	800300c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003014:	e02d      	b.n	8003072 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	2180      	movs	r1, #128	; 0x80
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 ff3e 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e039      	b.n	80030a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10b      	bne.n	800304e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003042:	b292      	uxth	r2, r2
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	3302      	adds	r3, #2
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	e008      	b.n	8003060 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	781a      	ldrb	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	b292      	uxth	r2, r2
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3301      	adds	r3, #1
 800305e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1cb      	bne.n	8003016 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2200      	movs	r2, #0
 8003086:	2140      	movs	r1, #64	; 0x40
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 ff0a 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e005      	b.n	80030a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	4613      	mov	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d142      	bne.n	8003148 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_UART_Receive_IT+0x22>
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e03b      	b.n	800314a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Receive_IT+0x34>
 80030dc:	2302      	movs	r3, #2
 80030de:	e034      	b.n	800314a <HAL_UART_Receive_IT+0x9e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_UART_Receive_IT+0xa8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01f      	beq.n	8003138 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d018      	beq.n	8003138 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	613b      	str	r3, [r7, #16]
   return(result);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	623b      	str	r3, [r7, #32]
 8003126:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	69f9      	ldr	r1, [r7, #28]
 800312a:	6a3a      	ldr	r2, [r7, #32]
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	61bb      	str	r3, [r7, #24]
   return(result);
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e6      	bne.n	8003106 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	461a      	mov	r2, r3
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 ff74 	bl	800402c <UART_Start_Receive_IT>
 8003144:	4603      	mov	r3, r0
 8003146:	e000      	b.n	800314a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3728      	adds	r7, #40	; 0x28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40008000 	.word	0x40008000

08003158 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b0ba      	sub	sp, #232	; 0xe8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800317e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003182:	f640 030f 	movw	r3, #2063	; 0x80f
 8003186:	4013      	ands	r3, r2
 8003188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800318c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d115      	bne.n	80031c0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00f      	beq.n	80031c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 82a6 	beq.w	8003702 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
      }
      return;
 80031be:	e2a0      	b.n	8003702 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80031c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8117 	beq.w	80033f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031da:	4b85      	ldr	r3, [pc, #532]	; (80033f0 <HAL_UART_IRQHandler+0x298>)
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 810a 	beq.w	80033f8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d011      	beq.n	8003214 <HAL_UART_IRQHandler+0xbc>
 80031f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d011      	beq.n	8003244 <HAL_UART_IRQHandler+0xec>
 8003220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2202      	movs	r2, #2
 8003232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323a:	f043 0204 	orr.w	r2, r3, #4
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d011      	beq.n	8003274 <HAL_UART_IRQHandler+0x11c>
 8003250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2204      	movs	r2, #4
 8003262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d017      	beq.n	80032b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800328c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003290:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2208      	movs	r2, #8
 800329e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a6:	f043 0208 	orr.w	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d012      	beq.n	80032e2 <HAL_UART_IRQHandler+0x18a>
 80032bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00c      	beq.n	80032e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 820c 	beq.w	8003706 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d005      	beq.n	800333a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800332e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003332:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003336:	2b00      	cmp	r3, #0
 8003338:	d04f      	beq.n	80033da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 ff40 	bl	80041c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d141      	bne.n	80033d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3308      	adds	r3, #8
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800336c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3308      	adds	r3, #8
 8003376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800337a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800337e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1d9      	bne.n	800334e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d013      	beq.n	80033ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <HAL_UART_IRQHandler+0x29c>)
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd ffeb 	bl	800138a <HAL_DMA_Abort_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80033c4:	4610      	mov	r0, r2
 80033c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e00f      	b.n	80033ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9b0 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	e00b      	b.n	80033ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f9ac 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	e007      	b.n	80033ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f9a8 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033e8:	e18d      	b.n	8003706 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ea:	bf00      	nop
    return;
 80033ec:	e18b      	b.n	8003706 <HAL_UART_IRQHandler+0x5ae>
 80033ee:	bf00      	nop
 80033f0:	04000120 	.word	0x04000120
 80033f4:	08004287 	.word	0x08004287

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	f040 8146 	bne.w	800368e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 813f 	beq.w	800368e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8138 	beq.w	800368e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2210      	movs	r2, #16
 8003424:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	f040 80b4 	bne.w	800359e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003442:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 815f 	beq.w	800370a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003456:	429a      	cmp	r2, r3
 8003458:	f080 8157 	bcs.w	800370a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003462:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 8085 	bne.w	8003582 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800348c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1da      	bne.n	8003478 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3308      	adds	r3, #8
 80034c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3308      	adds	r3, #8
 80034e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e1      	bne.n	80034c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800350e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3308      	adds	r3, #8
 800351e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003522:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003524:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e3      	bne.n	80034fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003552:	f023 0310 	bic.w	r3, r3, #16
 8003556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003564:	65bb      	str	r3, [r7, #88]	; 0x58
 8003566:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800356a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e4      	bne.n	8003542 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd fec6 	bl	800130e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800358e:	b29b      	uxth	r3, r3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	b29b      	uxth	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8d4 	bl	8003744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800359c:	e0b5      	b.n	800370a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80a7 	beq.w	800370e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80035c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a2 	beq.w	800370e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
 80035ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e4      	bne.n	80035ca <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	623b      	str	r3, [r7, #32]
   return(result);
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3308      	adds	r3, #8
 8003620:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003624:	633a      	str	r2, [r7, #48]	; 0x30
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800362a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e3      	bne.n	8003600 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	60fb      	str	r3, [r7, #12]
   return(result);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0310 	bic.w	r3, r3, #16
 800365e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	69b9      	ldr	r1, [r7, #24]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	617b      	str	r3, [r7, #20]
   return(result);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e4      	bne.n	800364a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f85c 	bl	8003744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800368c:	e03f      	b.n	800370e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <HAL_UART_IRQHandler+0x560>
 800369a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 ff88 	bl	80045c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036b6:	e02d      	b.n	8003714 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80036b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00e      	beq.n	80036e2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01c      	beq.n	8003712 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
    }
    return;
 80036e0:	e017      	b.n	8003712 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d012      	beq.n	8003714 <HAL_UART_IRQHandler+0x5bc>
 80036ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00c      	beq.n	8003714 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fdd9 	bl	80042b2 <UART_EndTransmit_IT>
    return;
 8003700:	e008      	b.n	8003714 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003702:	bf00      	nop
 8003704:	e006      	b.n	8003714 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003706:	bf00      	nop
 8003708:	e004      	b.n	8003714 <HAL_UART_IRQHandler+0x5bc>
      return;
 800370a:	bf00      	nop
 800370c:	e002      	b.n	8003714 <HAL_UART_IRQHandler+0x5bc>
      return;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003712:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003714:	37e8      	adds	r7, #232	; 0xe8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop

0800371c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800375c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003760:	b08a      	sub	sp, #40	; 0x28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	431a      	orrs	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4313      	orrs	r3, r2
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4ba4      	ldr	r3, [pc, #656]	; (8003a1c <UART_SetConfig+0x2c0>)
 800378c:	4013      	ands	r3, r2
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003794:	430b      	orrs	r3, r1
 8003796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a99      	ldr	r2, [pc, #612]	; (8003a20 <UART_SetConfig+0x2c4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c4:	4313      	orrs	r3, r2
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a90      	ldr	r2, [pc, #576]	; (8003a24 <UART_SetConfig+0x2c8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d126      	bne.n	8003834 <UART_SetConfig+0xd8>
 80037e6:	4b90      	ldr	r3, [pc, #576]	; (8003a28 <UART_SetConfig+0x2cc>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d81b      	bhi.n	800382c <UART_SetConfig+0xd0>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0xa0>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	0800381d 	.word	0x0800381d
 8003804:	08003815 	.word	0x08003815
 8003808:	08003825 	.word	0x08003825
 800380c:	2301      	movs	r3, #1
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003812:	e116      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003814:	2302      	movs	r3, #2
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381a:	e112      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800381c:	2304      	movs	r3, #4
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003822:	e10e      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003824:	2308      	movs	r3, #8
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e10a      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800382c:	2310      	movs	r3, #16
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e106      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7c      	ldr	r2, [pc, #496]	; (8003a2c <UART_SetConfig+0x2d0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d138      	bne.n	80038b0 <UART_SetConfig+0x154>
 800383e:	4b7a      	ldr	r3, [pc, #488]	; (8003a28 <UART_SetConfig+0x2cc>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d82d      	bhi.n	80038a8 <UART_SetConfig+0x14c>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <UART_SetConfig+0xf8>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003889 	.word	0x08003889
 8003858:	080038a9 	.word	0x080038a9
 800385c:	080038a9 	.word	0x080038a9
 8003860:	080038a9 	.word	0x080038a9
 8003864:	08003899 	.word	0x08003899
 8003868:	080038a9 	.word	0x080038a9
 800386c:	080038a9 	.word	0x080038a9
 8003870:	080038a9 	.word	0x080038a9
 8003874:	08003891 	.word	0x08003891
 8003878:	080038a9 	.word	0x080038a9
 800387c:	080038a9 	.word	0x080038a9
 8003880:	080038a9 	.word	0x080038a9
 8003884:	080038a1 	.word	0x080038a1
 8003888:	2300      	movs	r3, #0
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e0d8      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003890:	2302      	movs	r3, #2
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003896:	e0d4      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003898:	2304      	movs	r3, #4
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e0d0      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038a0:	2308      	movs	r3, #8
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e0cc      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038a8:	2310      	movs	r3, #16
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e0c8      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a5e      	ldr	r2, [pc, #376]	; (8003a30 <UART_SetConfig+0x2d4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d125      	bne.n	8003906 <UART_SetConfig+0x1aa>
 80038ba:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <UART_SetConfig+0x2cc>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d016      	beq.n	80038f6 <UART_SetConfig+0x19a>
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d818      	bhi.n	80038fe <UART_SetConfig+0x1a2>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d00a      	beq.n	80038e6 <UART_SetConfig+0x18a>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d814      	bhi.n	80038fe <UART_SetConfig+0x1a2>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <UART_SetConfig+0x182>
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d008      	beq.n	80038ee <UART_SetConfig+0x192>
 80038dc:	e00f      	b.n	80038fe <UART_SetConfig+0x1a2>
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e4:	e0ad      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038e6:	2302      	movs	r3, #2
 80038e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ec:	e0a9      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038ee:	2304      	movs	r3, #4
 80038f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f4:	e0a5      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038f6:	2308      	movs	r3, #8
 80038f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fc:	e0a1      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80038fe:	2310      	movs	r3, #16
 8003900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003904:	e09d      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a4a      	ldr	r2, [pc, #296]	; (8003a34 <UART_SetConfig+0x2d8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d125      	bne.n	800395c <UART_SetConfig+0x200>
 8003910:	4b45      	ldr	r3, [pc, #276]	; (8003a28 <UART_SetConfig+0x2cc>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800391a:	2bc0      	cmp	r3, #192	; 0xc0
 800391c:	d016      	beq.n	800394c <UART_SetConfig+0x1f0>
 800391e:	2bc0      	cmp	r3, #192	; 0xc0
 8003920:	d818      	bhi.n	8003954 <UART_SetConfig+0x1f8>
 8003922:	2b80      	cmp	r3, #128	; 0x80
 8003924:	d00a      	beq.n	800393c <UART_SetConfig+0x1e0>
 8003926:	2b80      	cmp	r3, #128	; 0x80
 8003928:	d814      	bhi.n	8003954 <UART_SetConfig+0x1f8>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <UART_SetConfig+0x1d8>
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d008      	beq.n	8003944 <UART_SetConfig+0x1e8>
 8003932:	e00f      	b.n	8003954 <UART_SetConfig+0x1f8>
 8003934:	2300      	movs	r3, #0
 8003936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393a:	e082      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800393c:	2302      	movs	r3, #2
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003942:	e07e      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003944:	2304      	movs	r3, #4
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394a:	e07a      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800394c:	2308      	movs	r3, #8
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003952:	e076      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003954:	2310      	movs	r3, #16
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e072      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a35      	ldr	r2, [pc, #212]	; (8003a38 <UART_SetConfig+0x2dc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d12a      	bne.n	80039bc <UART_SetConfig+0x260>
 8003966:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <UART_SetConfig+0x2cc>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003974:	d01a      	beq.n	80039ac <UART_SetConfig+0x250>
 8003976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397a:	d81b      	bhi.n	80039b4 <UART_SetConfig+0x258>
 800397c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003980:	d00c      	beq.n	800399c <UART_SetConfig+0x240>
 8003982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003986:	d815      	bhi.n	80039b4 <UART_SetConfig+0x258>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <UART_SetConfig+0x238>
 800398c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003990:	d008      	beq.n	80039a4 <UART_SetConfig+0x248>
 8003992:	e00f      	b.n	80039b4 <UART_SetConfig+0x258>
 8003994:	2300      	movs	r3, #0
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399a:	e052      	b.n	8003a42 <UART_SetConfig+0x2e6>
 800399c:	2302      	movs	r3, #2
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e04e      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039a4:	2304      	movs	r3, #4
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e04a      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039ac:	2308      	movs	r3, #8
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e046      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039b4:	2310      	movs	r3, #16
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e042      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <UART_SetConfig+0x2c4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d13a      	bne.n	8003a3c <UART_SetConfig+0x2e0>
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <UART_SetConfig+0x2cc>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039d4:	d01a      	beq.n	8003a0c <UART_SetConfig+0x2b0>
 80039d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039da:	d81b      	bhi.n	8003a14 <UART_SetConfig+0x2b8>
 80039dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e0:	d00c      	beq.n	80039fc <UART_SetConfig+0x2a0>
 80039e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e6:	d815      	bhi.n	8003a14 <UART_SetConfig+0x2b8>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <UART_SetConfig+0x298>
 80039ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f0:	d008      	beq.n	8003a04 <UART_SetConfig+0x2a8>
 80039f2:	e00f      	b.n	8003a14 <UART_SetConfig+0x2b8>
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fa:	e022      	b.n	8003a42 <UART_SetConfig+0x2e6>
 80039fc:	2302      	movs	r3, #2
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e01e      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003a04:	2304      	movs	r3, #4
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e01a      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e016      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003a14:	2310      	movs	r3, #16
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e012      	b.n	8003a42 <UART_SetConfig+0x2e6>
 8003a1c:	efff69f3 	.word	0xefff69f3
 8003a20:	40008000 	.word	0x40008000
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40004400 	.word	0x40004400
 8003a30:	40004800 	.word	0x40004800
 8003a34:	40004c00 	.word	0x40004c00
 8003a38:	40005000 	.word	0x40005000
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a9f      	ldr	r2, [pc, #636]	; (8003cc4 <UART_SetConfig+0x568>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d17a      	bne.n	8003b42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d824      	bhi.n	8003a9e <UART_SetConfig+0x342>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0x300>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a81 	.word	0x08003a81
 8003a60:	08003a9f 	.word	0x08003a9f
 8003a64:	08003a89 	.word	0x08003a89
 8003a68:	08003a9f 	.word	0x08003a9f
 8003a6c:	08003a8f 	.word	0x08003a8f
 8003a70:	08003a9f 	.word	0x08003a9f
 8003a74:	08003a9f 	.word	0x08003a9f
 8003a78:	08003a9f 	.word	0x08003a9f
 8003a7c:	08003a97 	.word	0x08003a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a80:	f7fe fc94 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003a84:	61f8      	str	r0, [r7, #28]
        break;
 8003a86:	e010      	b.n	8003aaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a88:	4b8f      	ldr	r3, [pc, #572]	; (8003cc8 <UART_SetConfig+0x56c>)
 8003a8a:	61fb      	str	r3, [r7, #28]
        break;
 8003a8c:	e00d      	b.n	8003aaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8e:	f7fe fbf5 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8003a92:	61f8      	str	r0, [r7, #28]
        break;
 8003a94:	e009      	b.n	8003aaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a9a:	61fb      	str	r3, [r7, #28]
        break;
 8003a9c:	e005      	b.n	8003aaa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003aa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80fb 	beq.w	8003ca8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d305      	bcc.n	8003ace <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d903      	bls.n	8003ad6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ad4:	e0e8      	b.n	8003ca8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	461c      	mov	r4, r3
 8003adc:	4615      	mov	r5, r2
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	022b      	lsls	r3, r5, #8
 8003ae8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003aec:	0222      	lsls	r2, r4, #8
 8003aee:	68f9      	ldr	r1, [r7, #12]
 8003af0:	6849      	ldr	r1, [r1, #4]
 8003af2:	0849      	lsrs	r1, r1, #1
 8003af4:	2000      	movs	r0, #0
 8003af6:	4688      	mov	r8, r1
 8003af8:	4681      	mov	r9, r0
 8003afa:	eb12 0a08 	adds.w	sl, r2, r8
 8003afe:	eb43 0b09 	adc.w	fp, r3, r9
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b10:	4650      	mov	r0, sl
 8003b12:	4659      	mov	r1, fp
 8003b14:	f7fc fbbc 	bl	8000290 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b26:	d308      	bcc.n	8003b3a <UART_SetConfig+0x3de>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2e:	d204      	bcs.n	8003b3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	e0b6      	b.n	8003ca8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b40:	e0b2      	b.n	8003ca8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4a:	d15e      	bne.n	8003c0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d828      	bhi.n	8003ba6 <UART_SetConfig+0x44a>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x400>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe fc14 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003b84:	61f8      	str	r0, [r7, #28]
        break;
 8003b86:	e014      	b.n	8003bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe fc26 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003b8c:	61f8      	str	r0, [r7, #28]
        break;
 8003b8e:	e010      	b.n	8003bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b4d      	ldr	r3, [pc, #308]	; (8003cc8 <UART_SetConfig+0x56c>)
 8003b92:	61fb      	str	r3, [r7, #28]
        break;
 8003b94:	e00d      	b.n	8003bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe fb71 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8003b9a:	61f8      	str	r0, [r7, #28]
        break;
 8003b9c:	e009      	b.n	8003bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	61fb      	str	r3, [r7, #28]
        break;
 8003ba4:	e005      	b.n	8003bb2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d077      	beq.n	8003ca8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005a      	lsls	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b0f      	cmp	r3, #15
 8003bd2:	d916      	bls.n	8003c02 <UART_SetConfig+0x4a6>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d212      	bcs.n	8003c02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f023 030f 	bic.w	r3, r3, #15
 8003be4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	8afb      	ldrh	r3, [r7, #22]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	8afa      	ldrh	r2, [r7, #22]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	e052      	b.n	8003ca8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c08:	e04e      	b.n	8003ca8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d827      	bhi.n	8003c62 <UART_SetConfig+0x506>
 8003c12:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0x4bc>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c63 	.word	0x08003c63
 8003c28:	08003c53 	.word	0x08003c53
 8003c2c:	08003c63 	.word	0x08003c63
 8003c30:	08003c63 	.word	0x08003c63
 8003c34:	08003c63 	.word	0x08003c63
 8003c38:	08003c5b 	.word	0x08003c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe fbb6 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003c40:	61f8      	str	r0, [r7, #28]
        break;
 8003c42:	e014      	b.n	8003c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c44:	f7fe fbc8 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003c48:	61f8      	str	r0, [r7, #28]
        break;
 8003c4a:	e010      	b.n	8003c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <UART_SetConfig+0x56c>)
 8003c4e:	61fb      	str	r3, [r7, #28]
        break;
 8003c50:	e00d      	b.n	8003c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c52:	f7fe fb13 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8003c56:	61f8      	str	r0, [r7, #28]
        break;
 8003c58:	e009      	b.n	8003c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5e:	61fb      	str	r3, [r7, #28]
        break;
 8003c60:	e005      	b.n	8003c6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d019      	beq.n	8003ca8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	085a      	lsrs	r2, r3, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	d909      	bls.n	8003ca2 <UART_SetConfig+0x546>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d205      	bcs.n	8003ca2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	e002      	b.n	8003ca8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3728      	adds	r7, #40	; 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40008000 	.word	0x40008000
 8003cc8:	00f42400 	.word	0x00f42400

08003ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01a      	beq.n	8003de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dca:	d10a      	bne.n	8003de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e20:	f7fd f934 	bl	800108c <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d10e      	bne.n	8003e52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f82d 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e023      	b.n	8003e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d10e      	bne.n	8003e7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f817 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e00d      	b.n	8003e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b09c      	sub	sp, #112	; 0x70
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb2:	e0a5      	b.n	8004000 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	f000 80a1 	beq.w	8004000 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fd f8e5 	bl	800108c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d13e      	bne.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ef8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e6      	bne.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f26:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e5      	bne.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e067      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d04f      	beq.n	8004000 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f6e:	d147      	bne.n	8004000 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f78:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
 8003f9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e6      	bne.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fcc:	623a      	str	r2, [r7, #32]
 8003fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	69f9      	ldr	r1, [r7, #28]
 8003fd2:	6a3a      	ldr	r2, [r7, #32]
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e010      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	429a      	cmp	r2, r3
 800401c:	f43f af4a 	beq.w	8003eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3770      	adds	r7, #112	; 0x70
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800402c:	b480      	push	{r7}
 800402e:	b097      	sub	sp, #92	; 0x5c
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405e:	d10e      	bne.n	800407e <UART_Start_Receive_IT+0x52>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <UART_Start_Receive_IT+0x48>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800406e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004072:	e02d      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	22ff      	movs	r2, #255	; 0xff
 8004078:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800407c:	e028      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10d      	bne.n	80040a2 <UART_Start_Receive_IT+0x76>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <UART_Start_Receive_IT+0x6c>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	22ff      	movs	r2, #255	; 0xff
 8004092:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004096:	e01b      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	227f      	movs	r2, #127	; 0x7f
 800409c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040a0:	e016      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040aa:	d10d      	bne.n	80040c8 <UART_Start_Receive_IT+0x9c>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <UART_Start_Receive_IT+0x92>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	227f      	movs	r2, #127	; 0x7f
 80040b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040bc:	e008      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	223f      	movs	r2, #63	; 0x3f
 80040c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c6:	e003      	b.n	80040d0 <UART_Start_Receive_IT+0xa4>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2222      	movs	r2, #34	; 0x22
 80040dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3308      	adds	r3, #8
 80040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	657b      	str	r3, [r7, #84]	; 0x54
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800410c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d107      	bne.n	800412c <UART_Start_Receive_IT+0x100>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <UART_Start_Receive_IT+0x18c>)
 8004128:	665a      	str	r2, [r3, #100]	; 0x64
 800412a:	e002      	b.n	8004132 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4a23      	ldr	r2, [pc, #140]	; (80041bc <UART_Start_Receive_IT+0x190>)
 8004130:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d019      	beq.n	8004176 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
 8004162:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e6      	bne.n	8004142 <UART_Start_Receive_IT+0x116>
 8004174:	e018      	b.n	80041a8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	613b      	str	r3, [r7, #16]
   return(result);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f043 0320 	orr.w	r3, r3, #32
 800418a:	653b      	str	r3, [r7, #80]	; 0x50
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69f9      	ldr	r1, [r7, #28]
 800419a:	6a3a      	ldr	r2, [r7, #32]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	375c      	adds	r7, #92	; 0x5c
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	08004467 	.word	0x08004467
 80041bc:	08004307 	.word	0x08004307

080041c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b095      	sub	sp, #84	; 0x54
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e6:	643b      	str	r3, [r7, #64]	; 0x40
 80041e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e6      	bne.n	80041c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3308      	adds	r3, #8
 8004200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	61fb      	str	r3, [r7, #28]
   return(result);
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	64bb      	str	r3, [r7, #72]	; 0x48
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800421a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e5      	bne.n	80041fa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	2b01      	cmp	r3, #1
 8004234:	d118      	bne.n	8004268 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	60bb      	str	r3, [r7, #8]
   return(result);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f023 0310 	bic.w	r3, r3, #16
 800424a:	647b      	str	r3, [r7, #68]	; 0x44
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6979      	ldr	r1, [r7, #20]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	613b      	str	r3, [r7, #16]
   return(result);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e6      	bne.n	8004236 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	665a      	str	r2, [r3, #100]	; 0x64
}
 800427a:	bf00      	nop
 800427c:	3754      	adds	r7, #84	; 0x54
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff fa43 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b088      	sub	sp, #32
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6979      	ldr	r1, [r7, #20]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	613b      	str	r3, [r7, #16]
   return(result);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e6      	bne.n	80042ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff fa0f 	bl	800371c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042fe:	bf00      	nop
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b096      	sub	sp, #88	; 0x58
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004314:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800431c:	2b22      	cmp	r3, #34	; 0x22
 800431e:	f040 8094 	bne.w	800444a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004328:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800432c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004330:	b2d9      	uxtb	r1, r3
 8004332:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004336:	b2da      	uxtb	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	400a      	ands	r2, r1
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d179      	bne.n	800445e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437e:	653b      	str	r3, [r7, #80]	; 0x50
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004388:	647b      	str	r3, [r7, #68]	; 0x44
 800438a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800438e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e6      	bne.n	800436a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	623b      	str	r3, [r7, #32]
   return(result);
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043bc:	633a      	str	r2, [r7, #48]	; 0x30
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d12e      	bne.n	8004442 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0310 	bic.w	r3, r3, #16
 80043fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	69b9      	ldr	r1, [r7, #24]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	617b      	str	r3, [r7, #20]
   return(result);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e6      	bne.n	80043ea <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b10      	cmp	r3, #16
 8004428:	d103      	bne.n	8004432 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2210      	movs	r2, #16
 8004430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff f982 	bl	8003744 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004440:	e00d      	b.n	800445e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fc f8c6 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8004448:	e009      	b.n	800445e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	8b1b      	ldrh	r3, [r3, #24]
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0208 	orr.w	r2, r2, #8
 800445a:	b292      	uxth	r2, r2
 800445c:	831a      	strh	r2, [r3, #24]
}
 800445e:	bf00      	nop
 8004460:	3758      	adds	r7, #88	; 0x58
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b096      	sub	sp, #88	; 0x58
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004474:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447c:	2b22      	cmp	r3, #34	; 0x22
 800447e:	f040 8094 	bne.w	80045aa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004488:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004492:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004496:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800449a:	4013      	ands	r3, r2
 800449c:	b29a      	uxth	r2, r3
 800449e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	1c9a      	adds	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d179      	bne.n	80045be <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e6      	bne.n	80044ca <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	61fb      	str	r3, [r7, #28]
   return(result);
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004540:	2b01      	cmp	r3, #1
 8004542:	d12e      	bne.n	80045a2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	60bb      	str	r3, [r7, #8]
   return(result);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f023 0310 	bic.w	r3, r3, #16
 800455e:	647b      	str	r3, [r7, #68]	; 0x44
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6979      	ldr	r1, [r7, #20]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	613b      	str	r3, [r7, #16]
   return(result);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b10      	cmp	r3, #16
 8004588:	d103      	bne.n	8004592 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2210      	movs	r2, #16
 8004590:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff f8d2 	bl	8003744 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045a0:	e00d      	b.n	80045be <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc f816 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 80045a8:	e009      	b.n	80045be <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	8b1b      	ldrh	r3, [r3, #24]
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	b292      	uxth	r2, r2
 80045bc:	831a      	strh	r2, [r3, #24]
}
 80045be:	bf00      	nop
 80045c0:	3758      	adds	r7, #88	; 0x58
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	f023 0101 	bic.w	r1, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b08      	cmp	r3, #8
 8004604:	d102      	bne.n	800460c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004606:	2340      	movs	r3, #64	; 0x40
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e001      	b.n	8004610 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800461c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004622:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004628:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800462e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8004634:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800463a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8004640:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8004646:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800464c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8004674:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <FMC_NORSRAM_Init+0x11c>)
 8004676:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467e:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004686:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800468e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	43db      	mvns	r3, r3
 800469e:	ea02 0103 	and.w	r1, r2, r3
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4319      	orrs	r1, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b8:	d10c      	bne.n	80046d4 <FMC_NORSRAM_Init+0xf8>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d006      	beq.n	80046ea <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	0008fb7f 	.word	0x0008fb7f

080046fc <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004712:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	431a      	orrs	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	431a      	orrs	r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	431a      	orrs	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	3b01      	subs	r3, #1
 8004738:	051b      	lsls	r3, r3, #20
 800473a:	431a      	orrs	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	3b02      	subs	r3, #2
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	431a      	orrs	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	4313      	orrs	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	3201      	adds	r2, #1
 8004750:	4319      	orrs	r1, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004764:	d113      	bne.n	800478e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800476e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	3b01      	subs	r3, #1
 8004776:	051b      	lsls	r3, r3, #20
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	431a      	orrs	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b0:	d11d      	bne.n	80047ee <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80047bc:	4013      	ands	r3, r2
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	6811      	ldr	r1, [r2, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	6852      	ldr	r2, [r2, #4]
 80047c6:	0112      	lsls	r2, r2, #4
 80047c8:	4311      	orrs	r1, r2
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	6892      	ldr	r2, [r2, #8]
 80047ce:	0212      	lsls	r2, r2, #8
 80047d0:	4311      	orrs	r1, r2
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	69d2      	ldr	r2, [r2, #28]
 80047d6:	4311      	orrs	r1, r2
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	6912      	ldr	r2, [r2, #16]
 80047dc:	0412      	lsls	r2, r2, #16
 80047de:	430a      	orrs	r2, r1
 80047e0:	ea43 0102 	orr.w	r1, r3, r2
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80047ec:	e005      	b.n	80047fa <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80047f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	cff00000 	.word	0xcff00000

0800480c <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 800480c:	b5b0      	push	{r4, r5, r7, lr}
 800480e:	b08a      	sub	sp, #40	; 0x28
 8004810:	af04      	add	r7, sp, #16
 8004812:	4603      	mov	r3, r0
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	71fb      	strb	r3, [r7, #7]
 8004818:	4613      	mov	r3, r2
 800481a:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 800481c:	2300      	movs	r3, #0
 800481e:	82fb      	strh	r3, [r7, #22]
 8004820:	2300      	movs	r3, #0
 8004822:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	3308      	adds	r3, #8
 8004828:	019b      	lsls	r3, r3, #6
 800482a:	3308      	adds	r3, #8
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f93f 	bl	8004ab0 <WIZCHIP_READ>
 8004832:	4603      	mov	r3, r0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b1c      	cmp	r3, #28
 8004838:	f200 810a 	bhi.w	8004a50 <loopback_tcps+0x244>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <loopback_tcps+0x38>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004a35 	.word	0x08004a35
 8004848:	08004a51 	.word	0x08004a51
 800484c:	08004a51 	.word	0x08004a51
 8004850:	08004a51 	.word	0x08004a51
 8004854:	08004a51 	.word	0x08004a51
 8004858:	08004a51 	.word	0x08004a51
 800485c:	08004a51 	.word	0x08004a51
 8004860:	08004a51 	.word	0x08004a51
 8004864:	08004a51 	.word	0x08004a51
 8004868:	08004a51 	.word	0x08004a51
 800486c:	08004a51 	.word	0x08004a51
 8004870:	08004a51 	.word	0x08004a51
 8004874:	08004a51 	.word	0x08004a51
 8004878:	08004a51 	.word	0x08004a51
 800487c:	08004a51 	.word	0x08004a51
 8004880:	08004a51 	.word	0x08004a51
 8004884:	08004a51 	.word	0x08004a51
 8004888:	08004a51 	.word	0x08004a51
 800488c:	08004a51 	.word	0x08004a51
 8004890:	08004a13 	.word	0x08004a13
 8004894:	08004a51 	.word	0x08004a51
 8004898:	08004a51 	.word	0x08004a51
 800489c:	08004a51 	.word	0x08004a51
 80048a0:	080048b9 	.word	0x080048b9
 80048a4:	08004a51 	.word	0x08004a51
 80048a8:	08004a51 	.word	0x08004a51
 80048ac:	08004a51 	.word	0x08004a51
 80048b0:	08004a51 	.word	0x08004a51
 80048b4:	080049f1 	.word	0x080049f1
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	3308      	adds	r3, #8
 80048bc:	019b      	lsls	r3, r3, #6
 80048be:	3306      	adds	r3, #6
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 f8f5 	bl	8004ab0 <WIZCHIP_READ>
 80048c6:	4603      	mov	r3, r0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d04e      	beq.n	8004970 <loopback_tcps+0x164>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	3308      	adds	r3, #8
 80048d6:	019b      	lsls	r3, r3, #6
 80048d8:	3314      	adds	r3, #20
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f8e8 	bl	8004ab0 <WIZCHIP_READ>
 80048e0:	4603      	mov	r3, r0
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	723b      	strb	r3, [r7, #8]
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	3308      	adds	r3, #8
 80048ee:	019b      	lsls	r3, r3, #6
 80048f0:	3314      	adds	r3, #20
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f8dc 	bl	8004ab0 <WIZCHIP_READ>
 80048f8:	4603      	mov	r3, r0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	727b      	strb	r3, [r7, #9]
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	3308      	adds	r3, #8
 8004902:	019b      	lsls	r3, r3, #6
 8004904:	3316      	adds	r3, #22
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f8d2 	bl	8004ab0 <WIZCHIP_READ>
 800490c:	4603      	mov	r3, r0
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	b29b      	uxth	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	72bb      	strb	r3, [r7, #10]
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	3308      	adds	r3, #8
 800491a:	019b      	lsls	r3, r3, #6
 800491c:	3316      	adds	r3, #22
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f8c6 	bl	8004ab0 <WIZCHIP_READ>
 8004924:	4603      	mov	r3, r0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	72fb      	strb	r3, [r7, #11]
			destport = getSn_DPORT(sn);
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	3308      	adds	r3, #8
 800492e:	019b      	lsls	r3, r3, #6
 8004930:	3312      	adds	r3, #18
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f8bc 	bl	8004ab0 <WIZCHIP_READ>
 8004938:	4603      	mov	r3, r0
 800493a:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 800493c:	79f9      	ldrb	r1, [r7, #7]
 800493e:	7a3b      	ldrb	r3, [r7, #8]
 8004940:	461c      	mov	r4, r3
 8004942:	7a7b      	ldrb	r3, [r7, #9]
 8004944:	461d      	mov	r5, r3
 8004946:	7abb      	ldrb	r3, [r7, #10]
 8004948:	461a      	mov	r2, r3
 800494a:	7afb      	ldrb	r3, [r7, #11]
 800494c:	4618      	mov	r0, r3
 800494e:	89fb      	ldrh	r3, [r7, #14]
 8004950:	9302      	str	r3, [sp, #8]
 8004952:	9001      	str	r0, [sp, #4]
 8004954:	9200      	str	r2, [sp, #0]
 8004956:	462b      	mov	r3, r5
 8004958:	4622      	mov	r2, r4
 800495a:	4843      	ldr	r0, [pc, #268]	; (8004a68 <loopback_tcps+0x25c>)
 800495c:	f001 fed0 	bl	8006700 <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	3308      	adds	r3, #8
 8004964:	019b      	lsls	r3, r3, #6
 8004966:	3306      	adds	r3, #6
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f882 	bl	8004a74 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f92a 	bl	8004bcc <getSn_RX_RSR>
 8004978:	4603      	mov	r3, r0
 800497a:	82fb      	strh	r3, [r7, #22]
 800497c:	8afb      	ldrh	r3, [r7, #22]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d068      	beq.n	8004a54 <loopback_tcps+0x248>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004988:	d902      	bls.n	8004990 <loopback_tcps+0x184>
 800498a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800498e:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 8004990:	8afa      	ldrh	r2, [r7, #22]
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fd58 	bl	800544c <recv>
 800499c:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	dc01      	bgt.n	80049a8 <loopback_tcps+0x19c>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	e05b      	b.n	8004a60 <loopback_tcps+0x254>
			size = (uint16_t) ret;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 80049b0:	e019      	b.n	80049e6 <loopback_tcps+0x1da>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 80049b2:	8abb      	ldrh	r3, [r7, #20]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	18d1      	adds	r1, r2, r3
 80049b8:	8afa      	ldrh	r2, [r7, #22]
 80049ba:	8abb      	ldrh	r3, [r7, #20]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	b29a      	uxth	r2, r3
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fc46 	bl	8005254 <send>
 80049c8:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	da05      	bge.n	80049dc <loopback_tcps+0x1d0>
				{
					close(sn);
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fabc 	bl	8004f50 <close>
					return ret;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	e041      	b.n	8004a60 <loopback_tcps+0x254>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	b29a      	uxth	r2, r3
 80049e0:	8abb      	ldrh	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 80049e6:	8afa      	ldrh	r2, [r7, #22]
 80049e8:	8abb      	ldrh	r3, [r7, #20]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d1e1      	bne.n	80049b2 <loopback_tcps+0x1a6>
			}
         }
         break;
 80049ee:	e031      	b.n	8004a54 <loopback_tcps+0x248>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fbbe 	bl	8005174 <disconnect>
 80049f8:	4603      	mov	r3, r0
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <loopback_tcps+0x1fa>
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	e02c      	b.n	8004a60 <loopback_tcps+0x254>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4818      	ldr	r0, [pc, #96]	; (8004a6c <loopback_tcps+0x260>)
 8004a0c:	f001 fe78 	bl	8006700 <iprintf>
#endif
         break;
 8004a10:	e025      	b.n	8004a5e <loopback_tcps+0x252>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	88ba      	ldrh	r2, [r7, #4]
 8004a16:	4619      	mov	r1, r3
 8004a18:	4815      	ldr	r0, [pc, #84]	; (8004a70 <loopback_tcps+0x264>)
 8004a1a:	f001 fe71 	bl	8006700 <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fb53 	bl	80050cc <listen>
 8004a26:	4603      	mov	r3, r0
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d013      	beq.n	8004a58 <loopback_tcps+0x24c>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	e015      	b.n	8004a60 <loopback_tcps+0x254>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8004a34:	88ba      	ldrh	r2, [r7, #4]
 8004a36:	79f8      	ldrb	r0, [r7, #7]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	f000 f96c 	bl	8004d18 <socket>
 8004a40:	4603      	mov	r3, r0
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d007      	beq.n	8004a5c <loopback_tcps+0x250>
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	e007      	b.n	8004a60 <loopback_tcps+0x254>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8004a50:	bf00      	nop
 8004a52:	e004      	b.n	8004a5e <loopback_tcps+0x252>
         break;
 8004a54:	bf00      	nop
 8004a56:	e002      	b.n	8004a5e <loopback_tcps+0x252>
         break;
 8004a58:	bf00      	nop
 8004a5a:	e000      	b.n	8004a5e <loopback_tcps+0x252>
         break;
 8004a5c:	bf00      	nop
   }
   return 1;
 8004a5e:	2301      	movs	r3, #1
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bdb0      	pop	{r4, r5, r7, pc}
 8004a68:	0800765c 	.word	0x0800765c
 8004a6c:	08007680 	.word	0x08007680
 8004a70:	08007694 	.word	0x08007694

08004a74 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	807b      	strh	r3, [r7, #2]
#if _USE_W5300_OPTIMIZE
	_W5300_DATA(AddrSel) = wb;
#else
	WIZCHIP_CRITICAL_ENTER();
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <WIZCHIP_WRITE+0x38>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4798      	blx	r3
    WIZCHIP.CS._select();
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <WIZCHIP_WRITE+0x38>)
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <WIZCHIP_WRITE+0x38>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	887a      	ldrh	r2, [r7, #2]
 8004a92:	4611      	mov	r1, r2
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8004a98:	4b04      	ldr	r3, [pc, #16]	; (8004aac <WIZCHIP_WRITE+0x38>)
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004a9e:	4b03      	ldr	r3, [pc, #12]	; (8004aac <WIZCHIP_WRITE+0x38>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	4798      	blx	r3
#endif
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000034 	.word	0x20000034

08004ab0 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
   uint16_t ret;
#if _USE_W5300_OPTIMIZE
   ret = _W5300_DATA(AddrSel);
#else
   WIZCHIP_CRITICAL_ENTER();
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <WIZCHIP_READ+0x38>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <WIZCHIP_READ+0x38>)
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <WIZCHIP_READ+0x38>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
 8004acc:	4603      	mov	r3, r0
 8004ace:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <WIZCHIP_READ+0x38>)
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004ad6:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <WIZCHIP_READ+0x38>)
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	4798      	blx	r3
   #endif
   return ret;
 8004adc:	89fb      	ldrh	r3, [r7, #14]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000034 	.word	0x20000034

08004aec <getTMSR>:
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
}
   
uint8_t getTMSR(uint8_t sn)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <getTMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b06:	3320      	adds	r3, #32
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff ffd1 	bl	8004ab0 <WIZCHIP_READ>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e00a      	b.n	8004b2a <getTMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b1a:	3320      	adds	r3, #32
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff ffc7 	bl	8004ab0 <WIZCHIP_READ>
 8004b22:	4603      	mov	r3, r0
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <getRMSR>:
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
}
   
uint8_t getRMSR(uint8_t sn)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	4603      	mov	r3, r0
 8004b3a:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <getRMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b4c:	3328      	adds	r3, #40	; 0x28
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ffae 	bl	8004ab0 <WIZCHIP_READ>
 8004b54:	4603      	mov	r3, r0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	e00a      	b.n	8004b70 <getRMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b60:	3328      	adds	r3, #40	; 0x28
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ffa4 	bl	8004ab0 <WIZCHIP_READ>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 8004b86:	2301      	movs	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	019b      	lsls	r3, r3, #6
 8004b90:	3324      	adds	r3, #36	; 0x24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff ff8c 	bl	8004ab0 <WIZCHIP_READ>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	019b      	lsls	r3, r3, #6
 8004ba2:	3326      	adds	r3, #38	; 0x26
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff ff83 	bl	8004ab0 <WIZCHIP_READ>
 8004baa:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8004bac:	4323      	orrs	r3, r4
 8004bae:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d002      	beq.n	8004bbe <getSn_TX_FSR+0x46>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8004bbc:	e7e5      	b.n	8004b8a <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8004bbe:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8004bc0:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd90      	pop	{r4, r7, pc}
	...

08004bcc <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	3308      	adds	r3, #8
 8004be2:	019b      	lsls	r3, r3, #6
 8004be4:	3328      	adds	r3, #40	; 0x28
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff62 	bl	8004ab0 <WIZCHIP_READ>
 8004bec:	4603      	mov	r3, r0
 8004bee:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	332a      	adds	r3, #42	; 0x2a
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff59 	bl	8004ab0 <WIZCHIP_READ>
 8004bfe:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8004c00:	4323      	orrs	r3, r4
 8004c02:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d002      	beq.n	8004c12 <getSn_RX_RSR+0x46>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8004c10:	e7e5      	b.n	8004bde <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8004c12:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	4a05      	ldr	r2, [pc, #20]	; (8004c2c <getSn_RX_RSR+0x60>)
 8004c18:	5cd3      	ldrb	r3, [r2, r3]
 8004c1a:	105b      	asrs	r3, r3, #1
 8004c1c:	f003 0201 	and.w	r2, r3, #1
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4413      	add	r3, r2
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd90      	pop	{r4, r7, pc}
 8004c2c:	200009d8 	.word	0x200009d8

08004c30 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d021      	beq.n	8004c8c <wiz_send_data+0x5c>
   
   for(i = 0; i < len ; i += 2)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e019      	b.n	8004c82 <wiz_send_data+0x52>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	3308      	adds	r3, #8
 8004c52:	019b      	lsls	r3, r3, #6
 8004c54:	332e      	adds	r3, #46	; 0x2e
 8004c56:	4618      	mov	r0, r3
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	b21a      	sxth	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	3301      	adds	r3, #1
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	440b      	add	r3, r1
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	b21b      	sxth	r3, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4619      	mov	r1, r3
 8004c78:	f7ff fefc 	bl	8004a74 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3302      	adds	r3, #2
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d3e1      	bcc.n	8004c4e <wiz_send_data+0x1e>
 8004c8a:	e000      	b.n	8004c8e <wiz_send_data+0x5e>
   if(len == 0)  return;
 8004c8c:	bf00      	nop
}
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d02c      	beq.n	8004d0a <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	e01f      	b.n	8004cf6 <wiz_recv_data+0x62>
   {
      if((i & 0x01)==0)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d111      	bne.n	8004ce4 <wiz_recv_data+0x50>
      {
         rd = getSn_RX_FIFOR(sn);
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	019b      	lsls	r3, r3, #6
 8004cc6:	3330      	adds	r3, #48	; 0x30
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff fef1 	bl	8004ab0 <WIZCHIP_READ>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8004cd2:	8afb      	ldrh	r3, [r7, #22]
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	b299      	uxth	r1, r3
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4413      	add	r3, r2
 8004cde:	b2ca      	uxtb	r2, r1
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e005      	b.n	8004cf0 <wiz_recv_data+0x5c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4413      	add	r3, r2
 8004cea:	8afa      	ldrh	r2, [r7, #22]
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3db      	bcc.n	8004cb6 <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	8afa      	ldrh	r2, [r7, #22]
 8004d02:	b2d1      	uxtb	r1, r2
 8004d04:	4a03      	ldr	r2, [pc, #12]	; (8004d14 <wiz_recv_data+0x80>)
 8004d06:	54d1      	strb	r1, [r2, r3]
 8004d08:	e000      	b.n	8004d0c <wiz_recv_data+0x78>
   if(len == 0) return;
 8004d0a:	bf00      	nop
}
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	200009e0 	.word	0x200009e0

08004d18 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4604      	mov	r4, r0
 8004d20:	4608      	mov	r0, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4623      	mov	r3, r4
 8004d28:	71fb      	strb	r3, [r7, #7]
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71bb      	strb	r3, [r7, #6]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	80bb      	strh	r3, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d902      	bls.n	8004d42 <socket+0x2a>
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d40:	e0f8      	b.n	8004f34 <socket+0x21c>
	switch(protocol)
 8004d42:	79bb      	ldrb	r3, [r7, #6]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d005      	beq.n	8004d54 <socket+0x3c>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	dd32      	ble.n	8004db2 <socket+0x9a>
 8004d4c:	3b02      	subs	r3, #2
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d82f      	bhi.n	8004db2 <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004d52:	e032      	b.n	8004dba <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 8004d54:	2018      	movs	r0, #24
 8004d56:	f7ff feab 	bl	8004ab0 <WIZCHIP_READ>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	0a1b      	lsrs	r3, r3, #8
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	f107 030c 	add.w	r3, r7, #12
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	2018      	movs	r0, #24
 8004d6a:	f7ff fea1 	bl	8004ab0 <WIZCHIP_READ>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	461a      	mov	r2, r3
 8004d72:	f107 030c 	add.w	r3, r7, #12
 8004d76:	3301      	adds	r3, #1
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	201a      	movs	r0, #26
 8004d7e:	f7ff fe97 	bl	8004ab0 <WIZCHIP_READ>
 8004d82:	4603      	mov	r3, r0
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	f107 030c 	add.w	r3, r7, #12
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	201a      	movs	r0, #26
 8004d94:	f7ff fe8c 	bl	8004ab0 <WIZCHIP_READ>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f107 030c 	add.w	r3, r7, #12
 8004da0:	3303      	adds	r3, #3
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <socket+0xa0>
 8004dac:	f06f 0302 	mvn.w	r3, #2
 8004db0:	e0c0      	b.n	8004f34 <socket+0x21c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004db2:	f06f 0304 	mvn.w	r3, #4
 8004db6:	e0bd      	b.n	8004f34 <socket+0x21c>
	    break;
 8004db8:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <socket+0xb2>
 8004dc4:	f06f 0305 	mvn.w	r3, #5
 8004dc8:	e0b4      	b.n	8004f34 <socket+0x21c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d019      	beq.n	8004e04 <socket+0xec>
	{
   	switch(protocol)
 8004dd0:	79bb      	ldrb	r3, [r7, #6]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d002      	beq.n	8004ddc <socket+0xc4>
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d008      	beq.n	8004dec <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004dda:	e018      	b.n	8004e0e <socket+0xf6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d110      	bne.n	8004e08 <socket+0xf0>
 8004de6:	f06f 0305 	mvn.w	r3, #5
 8004dea:	e0a3      	b.n	8004f34 <socket+0x21c>
   	      if(flag & SF_IGMP_VER2)
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <socket+0xf4>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db06      	blt.n	8004e0c <socket+0xf4>
 8004dfe:	f06f 0305 	mvn.w	r3, #5
 8004e02:	e097      	b.n	8004f34 <socket+0x21c>
   	}
   }
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <socket+0xf6>
   	      break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <socket+0xf6>
   	      break;
 8004e0c:	bf00      	nop
	close(sn);
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f89d 	bl	8004f50 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	019b      	lsls	r3, r3, #6
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	79bb      	ldrb	r3, [r7, #6]
 8004e20:	b21a      	sxth	r2, r3
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	b21b      	sxth	r3, r3
 8004e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2a:	b21b      	sxth	r3, r3
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	b21a      	sxth	r2, r3
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	01db      	lsls	r3, r3, #7
 8004e34:	b21b      	sxth	r3, r3
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	b21b      	sxth	r3, r3
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	b21b      	sxth	r3, r3
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	4619      	mov	r1, r3
 8004e44:	f7ff fe16 	bl	8004a74 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8004e48:	88bb      	ldrh	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d110      	bne.n	8004e70 <socket+0x158>
	{
	   port = sock_any_port++;
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <socket+0x224>)
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	b291      	uxth	r1, r2
 8004e56:	4a39      	ldr	r2, [pc, #228]	; (8004f3c <socket+0x224>)
 8004e58:	8011      	strh	r1, [r2, #0]
 8004e5a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004e5c:	4b37      	ldr	r3, [pc, #220]	; (8004f3c <socket+0x224>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <socket+0x158>
 8004e68:	4b34      	ldr	r3, [pc, #208]	; (8004f3c <socket+0x224>)
 8004e6a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004e6e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	3308      	adds	r3, #8
 8004e74:	019b      	lsls	r3, r3, #6
 8004e76:	330a      	adds	r3, #10
 8004e78:	461a      	mov	r2, r3
 8004e7a:	88bb      	ldrh	r3, [r7, #4]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f7ff fdf8 	bl	8004a74 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	3308      	adds	r3, #8
 8004e88:	019b      	lsls	r3, r3, #6
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fdf0 	bl	8004a74 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004e94:	bf00      	nop
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	019b      	lsls	r3, r3, #6
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fe06 	bl	8004ab0 <WIZCHIP_READ>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f4      	bne.n	8004e96 <socket+0x17e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	b21b      	sxth	r3, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	b21a      	sxth	r2, r3
 8004eba:	4b21      	ldr	r3, [pc, #132]	; (8004f40 <socket+0x228>)
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b21b      	sxth	r3, r3
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	b21b      	sxth	r3, r3
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <socket+0x228>)
 8004ec8:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 0201 	and.w	r2, r3, #1
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	b21a      	sxth	r2, r3
 8004ed8:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <socket+0x228>)
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b21b      	sxth	r3, r3
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	b21b      	sxth	r3, r3
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	4b16      	ldr	r3, [pc, #88]	; (8004f40 <socket+0x228>)
 8004ee6:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004ee8:	79fb      	ldrb	r3, [r7, #7]
 8004eea:	2201      	movs	r2, #1
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	b21b      	sxth	r3, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	b21a      	sxth	r2, r3
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <socket+0x22c>)
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b21b      	sxth	r3, r3
 8004efc:	4013      	ands	r3, r2
 8004efe:	b21b      	sxth	r3, r3
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <socket+0x22c>)
 8004f04:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	4a0f      	ldr	r2, [pc, #60]	; (8004f48 <socket+0x230>)
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	4a0e      	ldr	r2, [pc, #56]	; (8004f4c <socket+0x234>)
 8004f14:	2100      	movs	r1, #0
 8004f16:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004f18:	bf00      	nop
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	019b      	lsls	r3, r3, #6
 8004f20:	3308      	adds	r3, #8
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fdc4 	bl	8004ab0 <WIZCHIP_READ>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f4      	beq.n	8004f1a <socket+0x202>
   return (int8_t)sn;
 8004f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd90      	pop	{r4, r7, pc}
 8004f3c:	20000032 	.word	0x20000032
 8004f40:	200009c4 	.word	0x200009c4
 8004f44:	200009c6 	.word	0x200009c6
 8004f48:	200009c8 	.word	0x200009c8
 8004f4c:	200009d8 	.word	0x200009d8

08004f50 <close>:

int8_t close(uint8_t sn)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d902      	bls.n	8004f66 <close+0x16>
 8004f60:	f04f 33ff 	mov.w	r3, #4294967295
 8004f64:	e0a5      	b.n	80050b2 <close+0x162>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	019b      	lsls	r3, r3, #6
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fd9f 	bl	8004ab0 <WIZCHIP_READ>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d14a      	bne.n	8005012 <close+0xc2>
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fdfa 	bl	8004b78 <getSn_TX_FSR>
 8004f84:	4604      	mov	r4, r0
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fdaf 	bl	8004aec <getTMSR>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	429c      	cmp	r4, r3
 8004f94:	d03d      	beq.n	8005012 <close+0xc2>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8004f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f9a:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	019b      	lsls	r3, r3, #6
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fd65 	bl	8004a74 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	3308      	adds	r3, #8
 8004fae:	019b      	lsls	r3, r3, #6
 8004fb0:	330a      	adds	r3, #10
 8004fb2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fd5c 	bl	8004a74 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	019b      	lsls	r3, r3, #6
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fd54 	bl	8004a74 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8004fcc:	bf00      	nop
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	019b      	lsls	r3, r3, #6
 8004fd4:	3302      	adds	r3, #2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fd6a 	bl	8004ab0 <WIZCHIP_READ>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f4      	bne.n	8004fce <close+0x7e>
      while(getSn_SR(sn) != SOCK_UDP);
 8004fe4:	bf00      	nop
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	3308      	adds	r3, #8
 8004fea:	019b      	lsls	r3, r3, #6
 8004fec:	3308      	adds	r3, #8
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fd5e 	bl	8004ab0 <WIZCHIP_READ>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b22      	cmp	r3, #34	; 0x22
 8004ffa:	d1f4      	bne.n	8004fe6 <close+0x96>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	f107 010c 	add.w	r1, r7, #12
 8005004:	79f8      	ldrb	r0, [r7, #7]
 8005006:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800500a:	9200      	str	r2, [sp, #0]
 800500c:	2201      	movs	r2, #1
 800500e:	f000 fb81 	bl	8005714 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	3308      	adds	r3, #8
 8005016:	019b      	lsls	r3, r3, #6
 8005018:	3302      	adds	r3, #2
 800501a:	2110      	movs	r1, #16
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fd29 	bl	8004a74 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8005022:	bf00      	nop
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	3308      	adds	r3, #8
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	3302      	adds	r3, #2
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff fd3f 	bl	8004ab0 <WIZCHIP_READ>
 8005032:	4603      	mov	r3, r0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f4      	bne.n	8005024 <close+0xd4>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	3308      	adds	r3, #8
 800503e:	019b      	lsls	r3, r3, #6
 8005040:	3306      	adds	r3, #6
 8005042:	21ff      	movs	r1, #255	; 0xff
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fd15 	bl	8004a74 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	2201      	movs	r2, #1
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	b21b      	sxth	r3, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	b21a      	sxth	r2, r3
 8005058:	4b18      	ldr	r3, [pc, #96]	; (80050bc <close+0x16c>)
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b21b      	sxth	r3, r3
 800505e:	4013      	ands	r3, r2
 8005060:	b21b      	sxth	r3, r3
 8005062:	b29a      	uxth	r2, r3
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <close+0x16c>)
 8005066:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	2201      	movs	r2, #1
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	b21b      	sxth	r3, r3
 8005072:	43db      	mvns	r3, r3
 8005074:	b21a      	sxth	r2, r3
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <close+0x170>)
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b21b      	sxth	r3, r3
 800507c:	4013      	ands	r3, r2
 800507e:	b21b      	sxth	r3, r3
 8005080:	b29a      	uxth	r2, r3
 8005082:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <close+0x170>)
 8005084:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	4a0e      	ldr	r2, [pc, #56]	; (80050c4 <close+0x174>)
 800508a:	2100      	movs	r1, #0
 800508c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	4a0d      	ldr	r2, [pc, #52]	; (80050c8 <close+0x178>)
 8005094:	2100      	movs	r1, #0
 8005096:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005098:	bf00      	nop
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	3308      	adds	r3, #8
 800509e:	019b      	lsls	r3, r3, #6
 80050a0:	3308      	adds	r3, #8
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fd04 	bl	8004ab0 <WIZCHIP_READ>
 80050a8:	4603      	mov	r3, r0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f4      	bne.n	800509a <close+0x14a>
	return SOCK_OK;
 80050b0:	2301      	movs	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	200009c4 	.word	0x200009c4
 80050c0:	200009c6 	.word	0x200009c6
 80050c4:	200009c8 	.word	0x200009c8
 80050c8:	200009d8 	.word	0x200009d8

080050cc <listen>:

int8_t listen(uint8_t sn)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d902      	bls.n	80050e2 <listen+0x16>
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
 80050e0:	e043      	b.n	800516a <listen+0x9e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	3308      	adds	r3, #8
 80050e6:	019b      	lsls	r3, r3, #6
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff fce1 	bl	8004ab0 <WIZCHIP_READ>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d002      	beq.n	80050fe <listen+0x32>
 80050f8:	f06f 0304 	mvn.w	r3, #4
 80050fc:	e035      	b.n	800516a <listen+0x9e>
	CHECK_SOCKINIT();
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	3308      	adds	r3, #8
 8005102:	019b      	lsls	r3, r3, #6
 8005104:	3308      	adds	r3, #8
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fcd2 	bl	8004ab0 <WIZCHIP_READ>
 800510c:	4603      	mov	r3, r0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b13      	cmp	r3, #19
 8005112:	d002      	beq.n	800511a <listen+0x4e>
 8005114:	f06f 0302 	mvn.w	r3, #2
 8005118:	e027      	b.n	800516a <listen+0x9e>
	setSn_CR(sn,Sn_CR_LISTEN);
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	3308      	adds	r3, #8
 800511e:	019b      	lsls	r3, r3, #6
 8005120:	3302      	adds	r3, #2
 8005122:	2102      	movs	r1, #2
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fca5 	bl	8004a74 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800512a:	bf00      	nop
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	3308      	adds	r3, #8
 8005130:	019b      	lsls	r3, r3, #6
 8005132:	3302      	adds	r3, #2
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fcbb 	bl	8004ab0 <WIZCHIP_READ>
 800513a:	4603      	mov	r3, r0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f4      	bne.n	800512c <listen+0x60>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8005142:	e006      	b.n	8005152 <listen+0x86>
   {
         close(sn);
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ff02 	bl	8004f50 <close>
         return SOCKERR_SOCKCLOSED;
 800514c:	f06f 0303 	mvn.w	r3, #3
 8005150:	e00b      	b.n	800516a <listen+0x9e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	3308      	adds	r3, #8
 8005156:	019b      	lsls	r3, r3, #6
 8005158:	3308      	adds	r3, #8
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fca8 	bl	8004ab0 <WIZCHIP_READ>
 8005160:	4603      	mov	r3, r0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b14      	cmp	r3, #20
 8005166:	d1ed      	bne.n	8005144 <listen+0x78>
   }
   return SOCK_OK;
 8005168:	2301      	movs	r3, #1
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d902      	bls.n	800518a <disconnect+0x16>
 8005184:	f04f 33ff 	mov.w	r3, #4294967295
 8005188:	e05c      	b.n	8005244 <disconnect+0xd0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	3308      	adds	r3, #8
 800518e:	019b      	lsls	r3, r3, #6
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fc8d 	bl	8004ab0 <WIZCHIP_READ>
 8005196:	4603      	mov	r3, r0
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	2b01      	cmp	r3, #1
 800519e:	d002      	beq.n	80051a6 <disconnect+0x32>
 80051a0:	f06f 0304 	mvn.w	r3, #4
 80051a4:	e04e      	b.n	8005244 <disconnect+0xd0>
	setSn_CR(sn,Sn_CR_DISCON);
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	3308      	adds	r3, #8
 80051aa:	019b      	lsls	r3, r3, #6
 80051ac:	3302      	adds	r3, #2
 80051ae:	2108      	movs	r1, #8
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fc5f 	bl	8004a74 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80051b6:	bf00      	nop
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	3308      	adds	r3, #8
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	3302      	adds	r3, #2
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fc75 	bl	8004ab0 <WIZCHIP_READ>
 80051c6:	4603      	mov	r3, r0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f4      	bne.n	80051b8 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	2201      	movs	r2, #1
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	b21b      	sxth	r3, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	b21a      	sxth	r2, r3
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <disconnect+0xd8>)
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b21b      	sxth	r3, r3
 80051e2:	4013      	ands	r3, r2
 80051e4:	b21b      	sxth	r3, r3
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	4b18      	ldr	r3, [pc, #96]	; (800524c <disconnect+0xd8>)
 80051ea:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80051ec:	4b18      	ldr	r3, [pc, #96]	; (8005250 <disconnect+0xdc>)
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	fa42 f303 	asr.w	r3, r2, r3
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d015      	beq.n	800522c <disconnect+0xb8>
 8005200:	2300      	movs	r3, #0
 8005202:	e01f      	b.n	8005244 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	3308      	adds	r3, #8
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	3306      	adds	r3, #6
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fc4f 	bl	8004ab0 <WIZCHIP_READ>
 8005212:	4603      	mov	r3, r0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d006      	beq.n	800522c <disconnect+0xb8>
	   {
	      close(sn);
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff fe95 	bl	8004f50 <close>
	      return SOCKERR_TIMEOUT;
 8005226:	f06f 030c 	mvn.w	r3, #12
 800522a:	e00b      	b.n	8005244 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	3308      	adds	r3, #8
 8005230:	019b      	lsls	r3, r3, #6
 8005232:	3308      	adds	r3, #8
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff fc3b 	bl	8004ab0 <WIZCHIP_READ>
 800523a:	4603      	mov	r3, r0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e0      	bne.n	8005204 <disconnect+0x90>
	   }
	}
	return SOCK_OK;
 8005242:	2301      	movs	r3, #1
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	200009c6 	.word	0x200009c6
 8005250:	200009c4 	.word	0x200009c4

08005254 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	6039      	str	r1, [r7, #0]
 800525e:	71fb      	strb	r3, [r7, #7]
 8005260:	4613      	mov	r3, r2
 8005262:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005268:	2300      	movs	r3, #0
 800526a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	2b08      	cmp	r3, #8
 8005270:	d902      	bls.n	8005278 <send+0x24>
 8005272:	f04f 33ff 	mov.w	r3, #4294967295
 8005276:	e0e1      	b.n	800543c <send+0x1e8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	3308      	adds	r3, #8
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fc16 	bl	8004ab0 <WIZCHIP_READ>
 8005284:	4603      	mov	r3, r0
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	2b01      	cmp	r3, #1
 800528c:	d002      	beq.n	8005294 <send+0x40>
 800528e:	f06f 0304 	mvn.w	r3, #4
 8005292:	e0d3      	b.n	800543c <send+0x1e8>
   CHECK_SOCKDATA();
 8005294:	88bb      	ldrh	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <send+0x4c>
 800529a:	f06f 030d 	mvn.w	r3, #13
 800529e:	e0cd      	b.n	800543c <send+0x1e8>
   tmp = getSn_SR(sn);
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	3308      	adds	r3, #8
 80052a4:	019b      	lsls	r3, r3, #6
 80052a6:	3308      	adds	r3, #8
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fc01 	bl	8004ab0 <WIZCHIP_READ>
 80052ae:	4603      	mov	r3, r0
 80052b0:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b17      	cmp	r3, #23
 80052b6:	d005      	beq.n	80052c4 <send+0x70>
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b1c      	cmp	r3, #28
 80052bc:	d002      	beq.n	80052c4 <send+0x70>
 80052be:	f06f 0306 	mvn.w	r3, #6
 80052c2:	e0bb      	b.n	800543c <send+0x1e8>
   if( sock_is_sending & (1<<sn) )
 80052c4:	4b5f      	ldr	r3, [pc, #380]	; (8005444 <send+0x1f0>)
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	fa42 f303 	asr.w	r3, r2, r3
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d033      	beq.n	8005340 <send+0xec>
   {
      tmp = getSn_IR(sn);
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	3308      	adds	r3, #8
 80052dc:	019b      	lsls	r3, r3, #6
 80052de:	3306      	adds	r3, #6
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fbe5 	bl	8004ab0 <WIZCHIP_READ>
 80052e6:	4603      	mov	r3, r0
 80052e8:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	3308      	adds	r3, #8
 80052f8:	019b      	lsls	r3, r3, #6
 80052fa:	3306      	adds	r3, #6
 80052fc:	2110      	movs	r1, #16
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff fbb8 	bl	8004a74 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	2201      	movs	r2, #1
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	b21b      	sxth	r3, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	b21a      	sxth	r2, r3
 8005312:	4b4c      	ldr	r3, [pc, #304]	; (8005444 <send+0x1f0>)
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b21b      	sxth	r3, r3
 8005318:	4013      	ands	r3, r2
 800531a:	b21b      	sxth	r3, r3
 800531c:	b29a      	uxth	r2, r3
 800531e:	4b49      	ldr	r3, [pc, #292]	; (8005444 <send+0x1f0>)
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	e00d      	b.n	8005340 <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d006      	beq.n	800533c <send+0xe8>
      {
         close(sn);
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fe0d 	bl	8004f50 <close>
         return SOCKERR_TIMEOUT;
 8005336:	f06f 030c 	mvn.w	r3, #12
 800533a:	e07f      	b.n	800543c <send+0x1e8>
      }
      else return SOCK_BUSY;
 800533c:	2300      	movs	r3, #0
 800533e:	e07d      	b.n	800543c <send+0x1e8>
   }
   freesize = getSn_TxMAX(sn);
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff fbd2 	bl	8004aec <getTMSR>
 8005348:	4603      	mov	r3, r0
 800534a:	b29b      	uxth	r3, r3
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005350:	88ba      	ldrh	r2, [r7, #4]
 8005352:	89bb      	ldrh	r3, [r7, #12]
 8005354:	429a      	cmp	r2, r3
 8005356:	d901      	bls.n	800535c <send+0x108>
 8005358:	89bb      	ldrh	r3, [r7, #12]
 800535a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fc0a 	bl	8004b78 <getSn_TX_FSR>
 8005364:	4603      	mov	r3, r0
 8005366:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	3308      	adds	r3, #8
 800536c:	019b      	lsls	r3, r3, #6
 800536e:	3308      	adds	r3, #8
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fb9d 	bl	8004ab0 <WIZCHIP_READ>
 8005376:	4603      	mov	r3, r0
 8005378:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	2b17      	cmp	r3, #23
 800537e:	d009      	beq.n	8005394 <send+0x140>
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b1c      	cmp	r3, #28
 8005384:	d006      	beq.n	8005394 <send+0x140>
      {
         close(sn);
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fde1 	bl	8004f50 <close>
         return SOCKERR_SOCKSTATUS;
 800538e:	f06f 0306 	mvn.w	r3, #6
 8005392:	e053      	b.n	800543c <send+0x1e8>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005394:	4b2c      	ldr	r3, [pc, #176]	; (8005448 <send+0x1f4>)
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	fa42 f303 	asr.w	r3, r2, r3
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <send+0x160>
 80053a8:	88ba      	ldrh	r2, [r7, #4]
 80053aa:	89bb      	ldrh	r3, [r7, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d901      	bls.n	80053b4 <send+0x160>
 80053b0:	2300      	movs	r3, #0
 80053b2:	e043      	b.n	800543c <send+0x1e8>
      if(len <= freesize) break;
 80053b4:	88ba      	ldrh	r2, [r7, #4]
 80053b6:	89bb      	ldrh	r3, [r7, #12]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d900      	bls.n	80053be <send+0x16a>
      freesize = getSn_TX_FSR(sn);
 80053bc:	e7ce      	b.n	800535c <send+0x108>
      if(len <= freesize) break;
 80053be:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80053c0:	88ba      	ldrh	r2, [r7, #4]
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fc32 	bl	8004c30 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	3308      	adds	r3, #8
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	3320      	adds	r3, #32
 80053d4:	461a      	mov	r2, r3
 80053d6:	88bb      	ldrh	r3, [r7, #4]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	b29b      	uxth	r3, r3
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f7ff fb48 	bl	8004a74 <WIZCHIP_WRITE>
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	3308      	adds	r3, #8
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	3322      	adds	r3, #34	; 0x22
 80053ec:	461a      	mov	r2, r3
 80053ee:	88bb      	ldrh	r3, [r7, #4]
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f7ff fb3e 	bl	8004a74 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	3308      	adds	r3, #8
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	3302      	adds	r3, #2
 8005400:	2120      	movs	r1, #32
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fb36 	bl	8004a74 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005408:	bf00      	nop
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	3308      	adds	r3, #8
 800540e:	019b      	lsls	r3, r3, #6
 8005410:	3302      	adds	r3, #2
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fb4c 	bl	8004ab0 <WIZCHIP_READ>
 8005418:	4603      	mov	r3, r0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f4      	bne.n	800540a <send+0x1b6>
   sock_is_sending |= (1 << sn);
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	2201      	movs	r2, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	b21a      	sxth	r2, r3
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <send+0x1f0>)
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b21b      	sxth	r3, r3
 8005430:	4313      	orrs	r3, r2
 8005432:	b21b      	sxth	r3, r3
 8005434:	b29a      	uxth	r2, r3
 8005436:	4b03      	ldr	r3, [pc, #12]	; (8005444 <send+0x1f0>)
 8005438:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800543a:	88bb      	ldrh	r3, [r7, #4]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	200009c6 	.word	0x200009c6
 8005448:	200009c4 	.word	0x200009c4

0800544c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	6039      	str	r1, [r7, #0]
 8005456:	71fb      	strb	r3, [r7, #7]
 8005458:	4613      	mov	r3, r2
 800545a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	2b08      	cmp	r3, #8
 8005468:	d902      	bls.n	8005470 <recv+0x24>
 800546a:	f04f 33ff 	mov.w	r3, #4294967295
 800546e:	e145      	b.n	80056fc <recv+0x2b0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	3308      	adds	r3, #8
 8005474:	019b      	lsls	r3, r3, #6
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fb1a 	bl	8004ab0 <WIZCHIP_READ>
 800547c:	4603      	mov	r3, r0
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	2b01      	cmp	r3, #1
 8005484:	d002      	beq.n	800548c <recv+0x40>
 8005486:	f06f 0304 	mvn.w	r3, #4
 800548a:	e137      	b.n	80056fc <recv+0x2b0>
   CHECK_SOCKDATA();
 800548c:	88bb      	ldrh	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <recv+0x4c>
 8005492:	f06f 030d 	mvn.w	r3, #13
 8005496:	e131      	b.n	80056fc <recv+0x2b0>
   
   recvsize = getSn_RxMAX(sn);
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fb49 	bl	8004b32 <getRMSR>
 80054a0:	4603      	mov	r3, r0
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 80054a8:	89fa      	ldrh	r2, [r7, #14]
 80054aa:	88bb      	ldrh	r3, [r7, #4]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d201      	bcs.n	80054b4 <recv+0x68>
 80054b0:	89fb      	ldrh	r3, [r7, #14]
 80054b2:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	4a93      	ldr	r2, [pc, #588]	; (8005704 <recv+0x2b8>)
 80054b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d148      	bne.n	8005552 <recv+0x106>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fb82 	bl	8004bcc <getSn_RX_RSR>
 80054c8:	4603      	mov	r3, r0
 80054ca:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	3308      	adds	r3, #8
 80054d0:	019b      	lsls	r3, r3, #6
 80054d2:	3308      	adds	r3, #8
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff faeb 	bl	8004ab0 <WIZCHIP_READ>
 80054da:	4603      	mov	r3, r0
 80054dc:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 80054de:	7b7b      	ldrb	r3, [r7, #13]
 80054e0:	2b17      	cmp	r3, #23
 80054e2:	d020      	beq.n	8005526 <recv+0xda>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80054e4:	7b7b      	ldrb	r3, [r7, #13]
 80054e6:	2b1c      	cmp	r3, #28
 80054e8:	d116      	bne.n	8005518 <recv+0xcc>
            {
               if(recvsize != 0) break;
 80054ea:	89fb      	ldrh	r3, [r7, #14]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d12d      	bne.n	800554c <recv+0x100>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff fb40 	bl	8004b78 <getSn_TX_FSR>
 80054f8:	4604      	mov	r4, r0
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff faf5 	bl	8004aec <getTMSR>
 8005502:	4603      	mov	r3, r0
 8005504:	029b      	lsls	r3, r3, #10
 8005506:	429c      	cmp	r4, r3
 8005508:	d10d      	bne.n	8005526 <recv+0xda>
               {
                  close(sn);
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fd1f 	bl	8004f50 <close>
                  return SOCKERR_SOCKSTATUS;
 8005512:	f06f 0306 	mvn.w	r3, #6
 8005516:	e0f1      	b.n	80056fc <recv+0x2b0>
               }
            }
            else
            {
               close(sn);
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fd18 	bl	8004f50 <close>
               return SOCKERR_SOCKSTATUS;
 8005520:	f06f 0306 	mvn.w	r3, #6
 8005524:	e0ea      	b.n	80056fc <recv+0x2b0>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005526:	4b78      	ldr	r3, [pc, #480]	; (8005708 <recv+0x2bc>)
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	fa42 f303 	asr.w	r3, r2, r3
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <recv+0xf8>
 800553a:	89fb      	ldrh	r3, [r7, #14]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <recv+0xf8>
 8005540:	2300      	movs	r3, #0
 8005542:	e0db      	b.n	80056fc <recv+0x2b0>
         if(recvsize != 0) break;
 8005544:	89fb      	ldrh	r3, [r7, #14]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d102      	bne.n	8005550 <recv+0x104>
         recvsize = getSn_RX_RSR(sn);
 800554a:	e7b9      	b.n	80054c0 <recv+0x74>
               if(recvsize != 0) break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <recv+0x106>
         if(recvsize != 0) break;
 8005550:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	4a6b      	ldr	r2, [pc, #428]	; (8005704 <recv+0x2b8>)
 8005556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <recv+0x128>
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	3308      	adds	r3, #8
 8005562:	019b      	lsls	r3, r3, #6
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff faa3 	bl	8004ab0 <WIZCHIP_READ>
 800556a:	4603      	mov	r3, r0
 800556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005570:	2b00      	cmp	r3, #0
 8005572:	d035      	beq.n	80055e0 <recv+0x194>
   {
      mr = getMR();
 8005574:	2000      	movs	r0, #0
 8005576:	f7ff fa9b 	bl	8004ab0 <WIZCHIP_READ>
 800557a:	4603      	mov	r3, r0
 800557c:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	3308      	adds	r3, #8
 8005582:	019b      	lsls	r3, r3, #6
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff fa93 	bl	8004ab0 <WIZCHIP_READ>
 800558a:	4603      	mov	r3, r0
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d120      	bne.n	80055d6 <recv+0x18a>
      {
         wiz_recv_data(sn,head,2);
 8005594:	f107 0108 	add.w	r1, r7, #8
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	2202      	movs	r2, #2
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fb79 	bl	8004c94 <wiz_recv_data>
         if(mr & MR_FS)
 80055a2:	897b      	ldrh	r3, [r7, #10]
 80055a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <recv+0x172>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 80055ac:	7a7b      	ldrb	r3, [r7, #9]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	b21a      	sxth	r2, r3
 80055b2:	7a3b      	ldrb	r3, [r7, #8]
 80055b4:	b21b      	sxth	r3, r3
 80055b6:	4313      	orrs	r3, r2
 80055b8:	b21b      	sxth	r3, r3
 80055ba:	81fb      	strh	r3, [r7, #14]
 80055bc:	e007      	b.n	80055ce <recv+0x182>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 80055be:	7a3b      	ldrb	r3, [r7, #8]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	b21a      	sxth	r2, r3
 80055c4:	7a7b      	ldrb	r3, [r7, #9]
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	4313      	orrs	r3, r2
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	4a4e      	ldr	r2, [pc, #312]	; (800570c <recv+0x2c0>)
 80055d2:	2180      	movs	r1, #128	; 0x80
 80055d4:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	494a      	ldr	r1, [pc, #296]	; (8005704 <recv+0x2b8>)
 80055da:	89fa      	ldrh	r2, [r7, #14]
 80055dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	4a48      	ldr	r2, [pc, #288]	; (8005704 <recv+0x2b8>)
 80055e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e8:	88ba      	ldrh	r2, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d904      	bls.n	80055f8 <recv+0x1ac>
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	4a44      	ldr	r2, [pc, #272]	; (8005704 <recv+0x2b8>)
 80055f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f6:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 80055f8:	88bb      	ldrh	r3, [r7, #4]
 80055fa:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	4a43      	ldr	r2, [pc, #268]	; (800570c <recv+0x2c0>)
 8005600:	5cd3      	ldrb	r3, [r2, r3]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01d      	beq.n	8005646 <recv+0x1fa>
   {
      *buf = sock_remained_byte[sn];
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	4a40      	ldr	r2, [pc, #256]	; (8005710 <recv+0x2c4>)
 800560e:	5cd2      	ldrb	r2, [r2, r3]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	701a      	strb	r2, [r3, #0]
      buf++;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	3301      	adds	r3, #1
 8005618:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	4a3b      	ldr	r2, [pc, #236]	; (800570c <recv+0x2c0>)
 800561e:	5cd2      	ldrb	r2, [r2, r3]
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	f022 0202 	bic.w	r2, r2, #2
 8005626:	b2d1      	uxtb	r1, r2
 8005628:	4a38      	ldr	r2, [pc, #224]	; (800570c <recv+0x2c0>)
 800562a:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 800562c:	89fb      	ldrh	r3, [r7, #14]
 800562e:	3b01      	subs	r3, #1
 8005630:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	4a33      	ldr	r2, [pc, #204]	; (8005704 <recv+0x2b8>)
 8005636:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	3a01      	subs	r2, #1
 800563e:	b291      	uxth	r1, r2
 8005640:	4a30      	ldr	r2, [pc, #192]	; (8005704 <recv+0x2b8>)
 8005642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 8005646:	89fb      	ldrh	r3, [r7, #14]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d019      	beq.n	8005680 <recv+0x234>
   {
      wiz_recv_data(sn, buf, recvsize);
 800564c:	89fa      	ldrh	r2, [r7, #14]
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fb1e 	bl	8004c94 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	3308      	adds	r3, #8
 800565c:	019b      	lsls	r3, r3, #6
 800565e:	3302      	adds	r3, #2
 8005660:	2140      	movs	r1, #64	; 0x40
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fa06 	bl	8004a74 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 8005668:	bf00      	nop
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	3308      	adds	r3, #8
 800566e:	019b      	lsls	r3, r3, #6
 8005670:	3302      	adds	r3, #2
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fa1c 	bl	8004ab0 <WIZCHIP_READ>
 8005678:	4603      	mov	r3, r0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f4      	bne.n	800566a <recv+0x21e>
   }
   sock_remained_size[sn] -= recvsize;
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	4a20      	ldr	r2, [pc, #128]	; (8005704 <recv+0x2b8>)
 8005684:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005688:	79fb      	ldrb	r3, [r7, #7]
 800568a:	89fa      	ldrh	r2, [r7, #14]
 800568c:	1a8a      	subs	r2, r1, r2
 800568e:	b291      	uxth	r1, r2
 8005690:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <recv+0x2b8>)
 8005692:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	4a1a      	ldr	r2, [pc, #104]	; (8005704 <recv+0x2b8>)
 800569a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d017      	beq.n	80056d2 <recv+0x286>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	4a19      	ldr	r2, [pc, #100]	; (800570c <recv+0x2c0>)
 80056a6:	5cd2      	ldrb	r2, [r2, r3]
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	b2d1      	uxtb	r1, r2
 80056b0:	4a16      	ldr	r2, [pc, #88]	; (800570c <recv+0x2c0>)
 80056b2:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80056b4:	89fb      	ldrh	r3, [r7, #14]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00d      	beq.n	80056da <recv+0x28e>
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	4a12      	ldr	r2, [pc, #72]	; (800570c <recv+0x2c0>)
 80056c2:	5cd2      	ldrb	r2, [r2, r3]
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	f042 0202 	orr.w	r2, r2, #2
 80056ca:	b2d1      	uxtb	r1, r2
 80056cc:	4a0f      	ldr	r2, [pc, #60]	; (800570c <recv+0x2c0>)
 80056ce:	54d1      	strb	r1, [r2, r3]
 80056d0:	e003      	b.n	80056da <recv+0x28e>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	4a0d      	ldr	r2, [pc, #52]	; (800570c <recv+0x2c0>)
 80056d6:	2100      	movs	r1, #0
 80056d8:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	3308      	adds	r3, #8
 80056de:	019b      	lsls	r3, r3, #6
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff f9e5 	bl	8004ab0 <WIZCHIP_READ>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <recv+0x2ae>
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	4a04      	ldr	r2, [pc, #16]	; (8005704 <recv+0x2b8>)
 80056f4:	2100      	movs	r1, #0
 80056f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80056fa:	88bb      	ldrh	r3, [r7, #4]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	bd90      	pop	{r4, r7, pc}
 8005704:	200009c8 	.word	0x200009c8
 8005708:	200009c4 	.word	0x200009c4
 800570c:	200009d8 	.word	0x200009d8
 8005710:	200009e0 	.word	0x200009e0

08005714 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607b      	str	r3, [r7, #4]
 800571e:	4603      	mov	r3, r0
 8005720:	73fb      	strb	r3, [r7, #15]
 8005722:	4613      	mov	r3, r2
 8005724:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d902      	bls.n	800573a <sendto+0x26>
 8005734:	f04f 33ff 	mov.w	r3, #4294967295
 8005738:	e1e6      	b.n	8005b08 <sendto+0x3f4>
   switch(getSn_MR(sn) & 0x0F)
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	3308      	adds	r3, #8
 800573e:	019b      	lsls	r3, r3, #6
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff f9b5 	bl	8004ab0 <WIZCHIP_READ>
 8005746:	4603      	mov	r3, r0
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	3b02      	subs	r3, #2
 800574e:	2b02      	cmp	r3, #2
 8005750:	d902      	bls.n	8005758 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005752:	f06f 0304 	mvn.w	r3, #4
 8005756:	e1d7      	b.n	8005b08 <sendto+0x3f4>
         break;
 8005758:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800575a:	89bb      	ldrh	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <sendto+0x52>
 8005760:	f06f 030d 	mvn.w	r3, #13
 8005764:	e1d0      	b.n	8005b08 <sendto+0x3f4>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	3201      	adds	r2, #1
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	4413      	add	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	3202      	adds	r2, #2
 8005782:	7812      	ldrb	r2, [r2, #0]
 8005784:	4413      	add	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	3203      	adds	r2, #3
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	4413      	add	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10d      	bne.n	80057b8 <sendto+0xa4>
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	3308      	adds	r3, #8
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff f984 	bl	8004ab0 <WIZCHIP_READ>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d002      	beq.n	80057b8 <sendto+0xa4>
 80057b2:	f06f 030b 	mvn.w	r3, #11
 80057b6:	e1a7      	b.n	8005b08 <sendto+0x3f4>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80057b8:	8c3b      	ldrh	r3, [r7, #32]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10d      	bne.n	80057da <sendto+0xc6>
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	3308      	adds	r3, #8
 80057c2:	019b      	lsls	r3, r3, #6
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff f973 	bl	8004ab0 <WIZCHIP_READ>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d002      	beq.n	80057da <sendto+0xc6>
 80057d4:	f06f 030a 	mvn.w	r3, #10
 80057d8:	e196      	b.n	8005b08 <sendto+0x3f4>
   tmp = getSn_SR(sn);
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	3308      	adds	r3, #8
 80057de:	019b      	lsls	r3, r3, #6
 80057e0:	3308      	adds	r3, #8
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff f964 	bl	8004ab0 <WIZCHIP_READ>
 80057e8:	4603      	mov	r3, r0
 80057ea:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	2b42      	cmp	r3, #66	; 0x42
 80057f0:	d008      	beq.n	8005804 <sendto+0xf0>
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	2b22      	cmp	r3, #34	; 0x22
 80057f6:	d005      	beq.n	8005804 <sendto+0xf0>
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
 80057fa:	2b32      	cmp	r3, #50	; 0x32
 80057fc:	d002      	beq.n	8005804 <sendto+0xf0>
 80057fe:	f06f 0306 	mvn.w	r3, #6
 8005802:	e181      	b.n	8005b08 <sendto+0x3f4>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	3308      	adds	r3, #8
 8005808:	019b      	lsls	r3, r3, #6
 800580a:	3314      	adds	r3, #20
 800580c:	4618      	mov	r0, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3301      	adds	r3, #1
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	4413      	add	r3, r2
 8005822:	b29b      	uxth	r3, r3
 8005824:	4619      	mov	r1, r3
 8005826:	f7ff f925 	bl	8004a74 <WIZCHIP_WRITE>
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	3308      	adds	r3, #8
 800582e:	019b      	lsls	r3, r3, #6
 8005830:	3316      	adds	r3, #22
 8005832:	4618      	mov	r0, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3302      	adds	r3, #2
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	b29a      	uxth	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3303      	adds	r3, #3
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	4413      	add	r3, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	4619      	mov	r1, r3
 800584e:	f7ff f911 	bl	8004a74 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	3308      	adds	r3, #8
 8005856:	019b      	lsls	r3, r3, #6
 8005858:	3312      	adds	r3, #18
 800585a:	461a      	mov	r2, r3
 800585c:	8c3b      	ldrh	r3, [r7, #32]
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f7ff f907 	bl	8004a74 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff f93f 	bl	8004aec <getTMSR>
 800586e:	4603      	mov	r3, r0
 8005870:	b29b      	uxth	r3, r3
 8005872:	029b      	lsls	r3, r3, #10
 8005874:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005876:	89ba      	ldrh	r2, [r7, #12]
 8005878:	8abb      	ldrh	r3, [r7, #20]
 800587a:	429a      	cmp	r2, r3
 800587c:	d901      	bls.n	8005882 <sendto+0x16e>
 800587e:	8abb      	ldrh	r3, [r7, #20]
 8005880:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff f977 	bl	8004b78 <getSn_TX_FSR>
 800588a:	4603      	mov	r3, r0
 800588c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	3308      	adds	r3, #8
 8005892:	019b      	lsls	r3, r3, #6
 8005894:	3308      	adds	r3, #8
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff f90a 	bl	8004ab0 <WIZCHIP_READ>
 800589c:	4603      	mov	r3, r0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <sendto+0x196>
 80058a4:	f06f 0303 	mvn.w	r3, #3
 80058a8:	e12e      	b.n	8005b08 <sendto+0x3f4>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80058aa:	4b99      	ldr	r3, [pc, #612]	; (8005b10 <sendto+0x3fc>)
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	fa42 f303 	asr.w	r3, r2, r3
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <sendto+0x1b6>
 80058be:	89ba      	ldrh	r2, [r7, #12]
 80058c0:	8abb      	ldrh	r3, [r7, #20]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d901      	bls.n	80058ca <sendto+0x1b6>
 80058c6:	2300      	movs	r3, #0
 80058c8:	e11e      	b.n	8005b08 <sendto+0x3f4>
      if(len <= freesize) break;
 80058ca:	89ba      	ldrh	r2, [r7, #12]
 80058cc:	8abb      	ldrh	r3, [r7, #20]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d900      	bls.n	80058d4 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 80058d2:	e7d6      	b.n	8005882 <sendto+0x16e>
      if(len <= freesize) break;
 80058d4:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80058d6:	89ba      	ldrh	r2, [r7, #12]
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff f9a7 	bl	8004c30 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 80058e2:	2018      	movs	r0, #24
 80058e4:	f7ff f8e4 	bl	8004ab0 <WIZCHIP_READ>
 80058e8:	4603      	mov	r3, r0
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	f107 0310 	add.w	r3, r7, #16
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	2018      	movs	r0, #24
 80058f8:	f7ff f8da 	bl	8004ab0 <WIZCHIP_READ>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	f107 0310 	add.w	r3, r7, #16
 8005904:	3301      	adds	r3, #1
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	201a      	movs	r0, #26
 800590c:	f7ff f8d0 	bl	8004ab0 <WIZCHIP_READ>
 8005910:	4603      	mov	r3, r0
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	b29a      	uxth	r2, r3
 8005916:	f107 0310 	add.w	r3, r7, #16
 800591a:	3302      	adds	r3, #2
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	201a      	movs	r0, #26
 8005922:	f7ff f8c5 	bl	8004ab0 <WIZCHIP_READ>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	f107 0310 	add.w	r3, r7, #16
 800592e:	3303      	adds	r3, #3
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d145      	bne.n	80059c6 <sendto+0x2b2>
      {
         getSUBR((uint8_t*)&taddr);
 800593a:	2014      	movs	r0, #20
 800593c:	f7ff f8b8 	bl	8004ab0 <WIZCHIP_READ>
 8005940:	4603      	mov	r3, r0
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	b29a      	uxth	r2, r3
 8005946:	f107 0310 	add.w	r3, r7, #16
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	2014      	movs	r0, #20
 8005950:	f7ff f8ae 	bl	8004ab0 <WIZCHIP_READ>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	f107 0310 	add.w	r3, r7, #16
 800595c:	3301      	adds	r3, #1
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	2016      	movs	r0, #22
 8005964:	f7ff f8a4 	bl	8004ab0 <WIZCHIP_READ>
 8005968:	4603      	mov	r3, r0
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	b29a      	uxth	r2, r3
 800596e:	f107 0310 	add.w	r3, r7, #16
 8005972:	3302      	adds	r3, #2
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	2016      	movs	r0, #22
 800597a:	f7ff f899 	bl	8004ab0 <WIZCHIP_READ>
 800597e:	4603      	mov	r3, r0
 8005980:	461a      	mov	r2, r3
 8005982:	f107 0310 	add.w	r3, r7, #16
 8005986:	3303      	adds	r3, #3
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 800598c:	4b61      	ldr	r3, [pc, #388]	; (8005b14 <sendto+0x400>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	b29a      	uxth	r2, r3
 8005996:	4b60      	ldr	r3, [pc, #384]	; (8005b18 <sendto+0x404>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	4413      	add	r3, r2
 800599e:	b29b      	uxth	r3, r3
 80059a0:	4619      	mov	r1, r3
 80059a2:	2014      	movs	r0, #20
 80059a4:	f7ff f866 	bl	8004a74 <WIZCHIP_WRITE>
 80059a8:	4b5c      	ldr	r3, [pc, #368]	; (8005b1c <sendto+0x408>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	4b5b      	ldr	r3, [pc, #364]	; (8005b20 <sendto+0x40c>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4413      	add	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	4619      	mov	r1, r3
 80059be:	2016      	movs	r0, #22
 80059c0:	f7ff f858 	bl	8004a74 <WIZCHIP_WRITE>
 80059c4:	e001      	b.n	80059ca <sendto+0x2b6>
      }
      else taddr = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	3308      	adds	r3, #8
 80059ce:	019b      	lsls	r3, r3, #6
 80059d0:	3320      	adds	r3, #32
 80059d2:	461a      	mov	r2, r3
 80059d4:	89bb      	ldrh	r3, [r7, #12]
 80059d6:	0c1b      	lsrs	r3, r3, #16
 80059d8:	b29b      	uxth	r3, r3
 80059da:	4619      	mov	r1, r3
 80059dc:	4610      	mov	r0, r2
 80059de:	f7ff f849 	bl	8004a74 <WIZCHIP_WRITE>
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
 80059e4:	3308      	adds	r3, #8
 80059e6:	019b      	lsls	r3, r3, #6
 80059e8:	3322      	adds	r3, #34	; 0x22
 80059ea:	461a      	mov	r2, r3
 80059ec:	89bb      	ldrh	r3, [r7, #12]
 80059ee:	4619      	mov	r1, r3
 80059f0:	4610      	mov	r0, r2
 80059f2:	f7ff f83f 	bl	8004a74 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	3308      	adds	r3, #8
 80059fa:	019b      	lsls	r3, r3, #6
 80059fc:	3302      	adds	r3, #2
 80059fe:	2120      	movs	r1, #32
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f837 	bl	8004a74 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005a06:	bf00      	nop
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	3302      	adds	r3, #2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff f84d 	bl	8004ab0 <WIZCHIP_READ>
 8005a16:	4603      	mov	r3, r0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f4      	bne.n	8005a08 <sendto+0x2f4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	3308      	adds	r3, #8
 8005a22:	019b      	lsls	r3, r3, #6
 8005a24:	3306      	adds	r3, #6
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff f842 	bl	8004ab0 <WIZCHIP_READ>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00c      	beq.n	8005a54 <sendto+0x340>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	019b      	lsls	r3, r3, #6
 8005a40:	3306      	adds	r3, #6
 8005a42:	2110      	movs	r1, #16
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff f815 	bl	8004a74 <WIZCHIP_WRITE>
         break;
 8005a4a:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d059      	beq.n	8005b06 <sendto+0x3f2>
 8005a52:	e035      	b.n	8005ac0 <sendto+0x3ac>
      else if(tmp & Sn_IR_TIMEOUT)
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0df      	beq.n	8005a1e <sendto+0x30a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	3308      	adds	r3, #8
 8005a62:	019b      	lsls	r3, r3, #6
 8005a64:	3306      	adds	r3, #6
 8005a66:	2108      	movs	r1, #8
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff f803 	bl	8004a74 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d022      	beq.n	8005aba <sendto+0x3a6>
 8005a74:	f107 0310 	add.w	r3, r7, #16
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	f107 0310 	add.w	r3, r7, #16
 8005a84:	3301      	adds	r3, #1
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	2014      	movs	r0, #20
 8005a92:	f7fe ffef 	bl	8004a74 <WIZCHIP_WRITE>
 8005a96:	f107 0310 	add.w	r3, r7, #16
 8005a9a:	3302      	adds	r3, #2
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f107 0310 	add.w	r3, r7, #16
 8005aa8:	3303      	adds	r3, #3
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	4413      	add	r3, r2
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	2016      	movs	r0, #22
 8005ab6:	f7fe ffdd 	bl	8004a74 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8005aba:	f06f 030c 	mvn.w	r3, #12
 8005abe:	e023      	b.n	8005b08 <sendto+0x3f4>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8005ac0:	f107 0310 	add.w	r3, r7, #16
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	4619      	mov	r1, r3
 8005adc:	2014      	movs	r0, #20
 8005ade:	f7fe ffc9 	bl	8004a74 <WIZCHIP_WRITE>
 8005ae2:	f107 0310 	add.w	r3, r7, #16
 8005ae6:	3302      	adds	r3, #2
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	f107 0310 	add.w	r3, r7, #16
 8005af4:	3303      	adds	r3, #3
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	4619      	mov	r1, r3
 8005b00:	2016      	movs	r0, #22
 8005b02:	f7fe ffb7 	bl	8004a74 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005b06:	89bb      	ldrh	r3, [r7, #12]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200009c4 	.word	0x200009c4
 8005b14:	08007770 	.word	0x08007770
 8005b18:	08007771 	.word	0x08007771
 8005b1c:	08007772 	.word	0x08007772
 8005b20:	08007773 	.word	0x08007773

08005b24 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	bf00      	nop
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005b32:	b480      	push	{r7}
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	bf00      	nop
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	807b      	strh	r3, [r7, #2]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	887a      	ldrh	r2, [r7, #2]
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <reg_wizchip_cs_cbfunc+0x16>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005baa:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <reg_wizchip_cs_cbfunc+0x40>)
 8005bac:	4a0a      	ldr	r2, [pc, #40]	; (8005bd8 <reg_wizchip_cs_cbfunc+0x44>)
 8005bae:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005bb0:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <reg_wizchip_cs_cbfunc+0x40>)
 8005bb2:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <reg_wizchip_cs_cbfunc+0x48>)
 8005bb4:	619a      	str	r2, [r3, #24]
 8005bb6:	e006      	b.n	8005bc6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005bb8:	4a06      	ldr	r2, [pc, #24]	; (8005bd4 <reg_wizchip_cs_cbfunc+0x40>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005bbe:	4a05      	ldr	r2, [pc, #20]	; (8005bd4 <reg_wizchip_cs_cbfunc+0x40>)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	6193      	str	r3, [r2, #24]
   }
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000034 	.word	0x20000034
 8005bd8:	08005b41 	.word	0x08005b41
 8005bdc:	08005b4f 	.word	0x08005b4f

08005be0 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8005bea:	bf00      	nop
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <reg_wizchip_bus_cbfunc+0x4c>)
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0f9      	beq.n	8005bec <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <reg_wizchip_bus_cbfunc+0x24>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8005c04:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <reg_wizchip_bus_cbfunc+0x4c>)
 8005c06:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <reg_wizchip_bus_cbfunc+0x50>)
 8005c08:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <reg_wizchip_bus_cbfunc+0x4c>)
 8005c0c:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <reg_wizchip_bus_cbfunc+0x54>)
 8005c0e:	621a      	str	r2, [r3, #32]
 8005c10:	e006      	b.n	8005c20 <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8005c12:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <reg_wizchip_bus_cbfunc+0x4c>)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <reg_wizchip_bus_cbfunc+0x4c>)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	6213      	str	r3, [r2, #32]
   }
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	20000034 	.word	0x20000034
 8005c30:	08005b5d 	.word	0x08005b5d
 8005c34:	08005b77 	.word	0x08005b77

08005c38 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	6039      	str	r1, [r7, #0]
 8005c42:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8005c44:	2300      	movs	r3, #0
 8005c46:	60bb      	str	r3, [r7, #8]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d863      	bhi.n	8005d1a <ctlwizchip+0xe2>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <ctlwizchip+0x20>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c7d 	.word	0x08005c7d
 8005c5c:	08005c83 	.word	0x08005c83
 8005c60:	08005caf 	.word	0x08005caf
 8005c64:	08005ca3 	.word	0x08005ca3
 8005c68:	08005cbd 	.word	0x08005cbd
 8005c6c:	08005cc9 	.word	0x08005cc9
 8005c70:	08005d1b 	.word	0x08005d1b
 8005c74:	08005d1b 	.word	0x08005d1b
 8005c78:	08005cd7 	.word	0x08005cd7
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005c7c:	f000 f896 	bl	8005dac <wizchip_sw_reset>
         break;
 8005c80:	e04e      	b.n	8005d20 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 f97f 	bl	8005f9c <wizchip_init>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	e03f      	b.n	8005d22 <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f9e2 	bl	8006070 <wizchip_clrinterrupt>
         break;
 8005cac:	e038      	b.n	8005d20 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005cae:	f000 fa01 	bl	80060b4 <wizchip_getinterrupt>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	801a      	strh	r2, [r3, #0]
         break;
 8005cba:	e031      	b.n	8005d20 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fa1b 	bl	80060fc <wizchip_setinterruptmask>
         break;         
 8005cc6:	e02b      	b.n	8005d20 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005cc8:	f000 fa3a 	bl	8006140 <wizchip_getinterruptmask>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	801a      	strh	r2, [r3, #0]
         break;
 8005cd4:	e024      	b.n	8005d20 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005cd6:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <ctlwizchip+0xf4>)
 8005cd8:	789a      	ldrb	r2, [r3, #2]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <ctlwizchip+0xf4>)
 8005ce4:	78d2      	ldrb	r2, [r2, #3]
 8005ce6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	3302      	adds	r3, #2
 8005cec:	4a0f      	ldr	r2, [pc, #60]	; (8005d2c <ctlwizchip+0xf4>)
 8005cee:	7912      	ldrb	r2, [r2, #4]
 8005cf0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	3303      	adds	r3, #3
 8005cf6:	4a0d      	ldr	r2, [pc, #52]	; (8005d2c <ctlwizchip+0xf4>)
 8005cf8:	7952      	ldrb	r2, [r2, #5]
 8005cfa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <ctlwizchip+0xf4>)
 8005d02:	7992      	ldrb	r2, [r2, #6]
 8005d04:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	3305      	adds	r3, #5
 8005d0a:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <ctlwizchip+0xf4>)
 8005d0c:	79d2      	ldrb	r2, [r2, #7]
 8005d0e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	3306      	adds	r3, #6
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
         break;
 8005d18:	e002      	b.n	8005d20 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8005d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1e:	e000      	b.n	8005d22 <ctlwizchip+0xea>
   }
   return 0;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000034 	.word	0x20000034

08005d30 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	6039      	str	r1, [r7, #0]
 8005d3a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	2b05      	cmp	r3, #5
 8005d40:	d82c      	bhi.n	8005d9c <ctlnetwork+0x6c>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <ctlnetwork+0x18>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d61 	.word	0x08005d61
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	08005d71 	.word	0x08005d71
 8005d54:	08005d7f 	.word	0x08005d7f
 8005d58:	08005d8d 	.word	0x08005d8d
 8005d5c:	08005d95 	.word	0x08005d95
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8005d60:	6838      	ldr	r0, [r7, #0]
 8005d62:	f000 fa15 	bl	8006190 <wizchip_setnetinfo>
         break;
 8005d66:	e01c      	b.n	8005da2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005d68:	6838      	ldr	r0, [r7, #0]
 8005d6a:	f000 faaf 	bl	80062cc <wizchip_getnetinfo>
         break;
 8005d6e:	e018      	b.n	8005da2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fb59 	bl	800642c <wizchip_setnetmode>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	e012      	b.n	8005da4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8005d7e:	f000 fb78 	bl	8006472 <wizchip_getnetmode>
 8005d82:	4603      	mov	r3, r0
 8005d84:	461a      	mov	r2, r3
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	701a      	strb	r2, [r3, #0]
         break;
 8005d8a:	e00a      	b.n	8005da2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005d8c:	6838      	ldr	r0, [r7, #0]
 8005d8e:	f000 fb79 	bl	8006484 <wizchip_settimeout>
         break;
 8005d92:	e006      	b.n	8005da2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005d94:	6838      	ldr	r0, [r7, #0]
 8005d96:	f000 fb8a 	bl	80064ae <wizchip_gettimeout>
         break;
 8005d9a:	e002      	b.n	8005da2 <ctlnetwork+0x72>
      default:
         return -1;
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005da0:	e000      	b.n	8005da4 <ctlnetwork+0x74>
   }
   return 0;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005db2:	2008      	movs	r0, #8
 8005db4:	f7fe fe7c 	bl	8004ab0 <WIZCHIP_READ>
 8005db8:	4603      	mov	r3, r0
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	713b      	strb	r3, [r7, #4]
 8005dc2:	2008      	movs	r0, #8
 8005dc4:	f7fe fe74 	bl	8004ab0 <WIZCHIP_READ>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	717b      	strb	r3, [r7, #5]
 8005dce:	200a      	movs	r0, #10
 8005dd0:	f7fe fe6e 	bl	8004ab0 <WIZCHIP_READ>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	71bb      	strb	r3, [r7, #6]
 8005dde:	200a      	movs	r0, #10
 8005de0:	f7fe fe66 	bl	8004ab0 <WIZCHIP_READ>
 8005de4:	4603      	mov	r3, r0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	71fb      	strb	r3, [r7, #7]
 8005dea:	200c      	movs	r0, #12
 8005dec:	f7fe fe60 	bl	8004ab0 <WIZCHIP_READ>
 8005df0:	4603      	mov	r3, r0
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	723b      	strb	r3, [r7, #8]
 8005dfa:	200c      	movs	r0, #12
 8005dfc:	f7fe fe58 	bl	8004ab0 <WIZCHIP_READ>
 8005e00:	4603      	mov	r3, r0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005e06:	2010      	movs	r0, #16
 8005e08:	f7fe fe52 	bl	8004ab0 <WIZCHIP_READ>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	0a1b      	lsrs	r3, r3, #8
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	753b      	strb	r3, [r7, #20]
 8005e16:	2010      	movs	r0, #16
 8005e18:	f7fe fe4a 	bl	8004ab0 <WIZCHIP_READ>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	757b      	strb	r3, [r7, #21]
 8005e22:	2012      	movs	r0, #18
 8005e24:	f7fe fe44 	bl	8004ab0 <WIZCHIP_READ>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	0a1b      	lsrs	r3, r3, #8
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	75bb      	strb	r3, [r7, #22]
 8005e32:	2012      	movs	r0, #18
 8005e34:	f7fe fe3c 	bl	8004ab0 <WIZCHIP_READ>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	75fb      	strb	r3, [r7, #23]
 8005e3e:	2014      	movs	r0, #20
 8005e40:	f7fe fe36 	bl	8004ab0 <WIZCHIP_READ>
 8005e44:	4603      	mov	r3, r0
 8005e46:	0a1b      	lsrs	r3, r3, #8
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	743b      	strb	r3, [r7, #16]
 8005e4e:	2014      	movs	r0, #20
 8005e50:	f7fe fe2e 	bl	8004ab0 <WIZCHIP_READ>
 8005e54:	4603      	mov	r3, r0
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	747b      	strb	r3, [r7, #17]
 8005e5a:	2016      	movs	r0, #22
 8005e5c:	f7fe fe28 	bl	8004ab0 <WIZCHIP_READ>
 8005e60:	4603      	mov	r3, r0
 8005e62:	0a1b      	lsrs	r3, r3, #8
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	74bb      	strb	r3, [r7, #18]
 8005e6a:	2016      	movs	r0, #22
 8005e6c:	f7fe fe20 	bl	8004ab0 <WIZCHIP_READ>
 8005e70:	4603      	mov	r3, r0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	74fb      	strb	r3, [r7, #19]
 8005e76:	2018      	movs	r0, #24
 8005e78:	f7fe fe1a 	bl	8004ab0 <WIZCHIP_READ>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	733b      	strb	r3, [r7, #12]
 8005e86:	2018      	movs	r0, #24
 8005e88:	f7fe fe12 	bl	8004ab0 <WIZCHIP_READ>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	737b      	strb	r3, [r7, #13]
 8005e92:	201a      	movs	r0, #26
 8005e94:	f7fe fe0c 	bl	8004ab0 <WIZCHIP_READ>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	73bb      	strb	r3, [r7, #14]
 8005ea2:	201a      	movs	r0, #26
 8005ea4:	f7fe fe04 	bl	8004ab0 <WIZCHIP_READ>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	f7fe fddf 	bl	8004a74 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f7fe fdfa 	bl	8004ab0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005ebc:	793b      	ldrb	r3, [r7, #4]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	797b      	ldrb	r3, [r7, #5]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	4619      	mov	r1, r3
 8005ece:	2008      	movs	r0, #8
 8005ed0:	f7fe fdd0 	bl	8004a74 <WIZCHIP_WRITE>
 8005ed4:	79bb      	ldrb	r3, [r7, #6]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	200a      	movs	r0, #10
 8005ee8:	f7fe fdc4 	bl	8004a74 <WIZCHIP_WRITE>
 8005eec:	7a3b      	ldrb	r3, [r7, #8]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	7a7b      	ldrb	r3, [r7, #9]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	4413      	add	r3, r2
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	4619      	mov	r1, r3
 8005efe:	200c      	movs	r0, #12
 8005f00:	f7fe fdb8 	bl	8004a74 <WIZCHIP_WRITE>
   setGAR(gw);
 8005f04:	7d3b      	ldrb	r3, [r7, #20]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	7d7b      	ldrb	r3, [r7, #21]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4413      	add	r3, r2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	2010      	movs	r0, #16
 8005f18:	f7fe fdac 	bl	8004a74 <WIZCHIP_WRITE>
 8005f1c:	7dbb      	ldrb	r3, [r7, #22]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	4413      	add	r3, r2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	2012      	movs	r0, #18
 8005f30:	f7fe fda0 	bl	8004a74 <WIZCHIP_WRITE>
   setSUBR(sn);
 8005f34:	7c3b      	ldrb	r3, [r7, #16]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	7c7b      	ldrb	r3, [r7, #17]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	4619      	mov	r1, r3
 8005f46:	2014      	movs	r0, #20
 8005f48:	f7fe fd94 	bl	8004a74 <WIZCHIP_WRITE>
 8005f4c:	7cbb      	ldrb	r3, [r7, #18]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	7cfb      	ldrb	r3, [r7, #19]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	4413      	add	r3, r2
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	2016      	movs	r0, #22
 8005f60:	f7fe fd88 	bl	8004a74 <WIZCHIP_WRITE>
   setSIPR(sip);
 8005f64:	7b3b      	ldrb	r3, [r7, #12]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	7b7b      	ldrb	r3, [r7, #13]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	4413      	add	r3, r2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	4619      	mov	r1, r3
 8005f76:	2018      	movs	r0, #24
 8005f78:	f7fe fd7c 	bl	8004a74 <WIZCHIP_WRITE>
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	201a      	movs	r0, #26
 8005f90:	f7fe fd70 	bl	8004a74 <WIZCHIP_WRITE>
}
 8005f94:	bf00      	nop
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005faa:	f7ff feff 	bl	8005dac <wizchip_sw_reset>
   if(txsize)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d02a      	beq.n	800600a <wizchip_init+0x6e>
   {
      tmp = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73bb      	strb	r3, [r7, #14]
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e018      	b.n	8005ff0 <wizchip_init+0x54>
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8005fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b3f      	cmp	r3, #63	; 0x3f
 8005fca:	d902      	bls.n	8005fd2 <wizchip_init+0x36>
 8005fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd0:	e04a      	b.n	8006068 <wizchip_init+0xcc>
			tmp += txsize[i];
 8005fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	4413      	add	r3, r2
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	3301      	adds	r3, #1
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	73fb      	strb	r3, [r7, #15]
 8005ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff4:	2b07      	cmp	r3, #7
 8005ff6:	dde2      	ble.n	8005fbe <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <wizchip_init+0x6e>
 8006004:	f04f 33ff 	mov.w	r3, #4294967295
 8006008:	e02e      	b.n	8006068 <wizchip_init+0xcc>
		}

	#endif
   }

   if(rxsize)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d02a      	beq.n	8006066 <wizchip_init+0xca>
   {
      tmp = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	73bb      	strb	r3, [r7, #14]
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006014:	2300      	movs	r3, #0
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	e018      	b.n	800604c <wizchip_init+0xb0>
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800601a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	4413      	add	r3, r2
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b3f      	cmp	r3, #63	; 0x3f
 8006026:	d902      	bls.n	800602e <wizchip_init+0x92>
 8006028:	f04f 33ff 	mov.w	r3, #4294967295
 800602c:	e01c      	b.n	8006068 <wizchip_init+0xcc>
			tmp += rxsize[i];
 800602e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	4413      	add	r3, r2
 8006036:	781a      	ldrb	r2, [r3, #0]
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	4413      	add	r3, r2
 800603c:	b2db      	uxtb	r3, r3
 800603e:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	3301      	adds	r3, #1
 8006048:	b2db      	uxtb	r3, r3
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006050:	2b07      	cmp	r3, #7
 8006052:	dde2      	ble.n	800601a <wizchip_init+0x7e>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8006054:	7bbb      	ldrb	r3, [r7, #14]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <wizchip_init+0xca>
 8006060:	f04f 33ff 	mov.w	r3, #4294967295
 8006064:	e000      	b.n	8006068 <wizchip_init+0xcc>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	0a1b      	lsrs	r3, r3, #8
 8006082:	b29b      	uxth	r3, r3
 8006084:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	f043 0310 	orr.w	r3, r3, #16
 800608c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	b21a      	sxth	r2, r3
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	b21b      	sxth	r3, r3
 8006098:	4313      	orrs	r3, r2
 800609a:	b21b      	sxth	r3, r3
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	4619      	mov	r1, r3
 80060a6:	2002      	movs	r0, #2
 80060a8:	f7fe fce4 	bl	8004a74 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 80060c6:	2002      	movs	r0, #2
 80060c8:	f7fe fcf2 	bl	8004ab0 <WIZCHIP_READ>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060d2:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 80060d4:	88bb      	ldrh	r3, [r7, #4]
 80060d6:	0a1b      	lsrs	r3, r3, #8
 80060d8:	b29b      	uxth	r3, r3
 80060da:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 80060dc:	88bb      	ldrh	r3, [r7, #4]
 80060de:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80060e0:	79bb      	ldrb	r3, [r7, #6]
 80060e2:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80060e4:	88bb      	ldrh	r3, [r7, #4]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	4413      	add	r3, r2
 80060f0:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80060f2:	88bb      	ldrh	r3, [r7, #4]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	0a1b      	lsrs	r3, r3, #8
 800610e:	b29b      	uxth	r3, r3
 8006110:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	f023 0310 	bic.w	r3, r3, #16
 8006118:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	b21a      	sxth	r2, r3
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	b21b      	sxth	r3, r3
 8006124:	4313      	orrs	r3, r2
 8006126:	b21b      	sxth	r3, r3
 8006128:	b29b      	uxth	r3, r3
 800612a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800612e:	b29b      	uxth	r3, r3
 8006130:	4619      	mov	r1, r3
 8006132:	2004      	movs	r0, #4
 8006134:	f7fe fc9e 	bl	8004a74 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8006152:	2004      	movs	r0, #4
 8006154:	f7fe fcac 	bl	8004ab0 <WIZCHIP_READ>
 8006158:	4603      	mov	r3, r0
 800615a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800615e:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 8006160:	88bb      	ldrh	r3, [r7, #4]
 8006162:	0a1b      	lsrs	r3, r3, #8
 8006164:	b29b      	uxth	r3, r3
 8006166:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8006168:	88bb      	ldrh	r3, [r7, #4]
 800616a:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	f023 0310 	bic.w	r3, r3, #16
 8006172:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006174:	79bb      	ldrb	r3, [r7, #6]
 8006176:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006178:	88bb      	ldrh	r3, [r7, #4]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	b29a      	uxth	r2, r3
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	b29b      	uxth	r3, r3
 8006182:	4413      	add	r3, r2
 8006184:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006186:	88bb      	ldrh	r3, [r7, #4]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	4619      	mov	r1, r3
 80061ae:	2008      	movs	r0, #8
 80061b0:	f7fe fc60 	bl	8004a74 <WIZCHIP_WRITE>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	789b      	ldrb	r3, [r3, #2]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	78db      	ldrb	r3, [r3, #3]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	4413      	add	r3, r2
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	4619      	mov	r1, r3
 80061ca:	200a      	movs	r0, #10
 80061cc:	f7fe fc52 	bl	8004a74 <WIZCHIP_WRITE>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	791b      	ldrb	r3, [r3, #4]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	b29a      	uxth	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	795b      	ldrb	r3, [r3, #5]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4413      	add	r3, r2
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	4619      	mov	r1, r3
 80061e6:	200c      	movs	r0, #12
 80061e8:	f7fe fc44 	bl	8004a74 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	7b9b      	ldrb	r3, [r3, #14]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	7bdb      	ldrb	r3, [r3, #15]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	4413      	add	r3, r2
 80061fe:	b29b      	uxth	r3, r3
 8006200:	4619      	mov	r1, r3
 8006202:	2010      	movs	r0, #16
 8006204:	f7fe fc36 	bl	8004a74 <WIZCHIP_WRITE>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	7c1b      	ldrb	r3, [r3, #16]
 800620c:	b29b      	uxth	r3, r3
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	b29a      	uxth	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	7c5b      	ldrb	r3, [r3, #17]
 8006216:	b29b      	uxth	r3, r3
 8006218:	4413      	add	r3, r2
 800621a:	b29b      	uxth	r3, r3
 800621c:	4619      	mov	r1, r3
 800621e:	2012      	movs	r0, #18
 8006220:	f7fe fc28 	bl	8004a74 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	7a9b      	ldrb	r3, [r3, #10]
 8006228:	b29b      	uxth	r3, r3
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	7adb      	ldrb	r3, [r3, #11]
 8006232:	b29b      	uxth	r3, r3
 8006234:	4413      	add	r3, r2
 8006236:	b29b      	uxth	r3, r3
 8006238:	4619      	mov	r1, r3
 800623a:	2014      	movs	r0, #20
 800623c:	f7fe fc1a 	bl	8004a74 <WIZCHIP_WRITE>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7b1b      	ldrb	r3, [r3, #12]
 8006244:	b29b      	uxth	r3, r3
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	b29a      	uxth	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7b5b      	ldrb	r3, [r3, #13]
 800624e:	b29b      	uxth	r3, r3
 8006250:	4413      	add	r3, r2
 8006252:	b29b      	uxth	r3, r3
 8006254:	4619      	mov	r1, r3
 8006256:	2016      	movs	r0, #22
 8006258:	f7fe fc0c 	bl	8004a74 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	799b      	ldrb	r3, [r3, #6]
 8006260:	b29b      	uxth	r3, r3
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	b29a      	uxth	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	79db      	ldrb	r3, [r3, #7]
 800626a:	b29b      	uxth	r3, r3
 800626c:	4413      	add	r3, r2
 800626e:	b29b      	uxth	r3, r3
 8006270:	4619      	mov	r1, r3
 8006272:	2018      	movs	r0, #24
 8006274:	f7fe fbfe 	bl	8004a74 <WIZCHIP_WRITE>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	7a1b      	ldrb	r3, [r3, #8]
 800627c:	b29b      	uxth	r3, r3
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	b29a      	uxth	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	7a5b      	ldrb	r3, [r3, #9]
 8006286:	b29b      	uxth	r3, r3
 8006288:	4413      	add	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	4619      	mov	r1, r3
 800628e:	201a      	movs	r0, #26
 8006290:	f7fe fbf0 	bl	8004a74 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7c9a      	ldrb	r2, [r3, #18]
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <wizchip_setnetinfo+0x134>)
 800629a:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	7cda      	ldrb	r2, [r3, #19]
 80062a0:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <wizchip_setnetinfo+0x134>)
 80062a2:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7d1a      	ldrb	r2, [r3, #20]
 80062a8:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <wizchip_setnetinfo+0x134>)
 80062aa:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7d5a      	ldrb	r2, [r3, #21]
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <wizchip_setnetinfo+0x134>)
 80062b2:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	7d9a      	ldrb	r2, [r3, #22]
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <wizchip_setnetinfo+0x138>)
 80062ba:	701a      	strb	r2, [r3, #0]
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	200009e8 	.word	0x200009e8
 80062c8:	200009ec 	.word	0x200009ec

080062cc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80062d4:	2008      	movs	r0, #8
 80062d6:	f7fe fbeb 	bl	8004ab0 <WIZCHIP_READ>
 80062da:	4603      	mov	r3, r0
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	b29b      	uxth	r3, r3
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	2008      	movs	r0, #8
 80062e8:	f7fe fbe2 	bl	8004ab0 <WIZCHIP_READ>
 80062ec:	4603      	mov	r3, r0
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	705a      	strb	r2, [r3, #1]
 80062f4:	200a      	movs	r0, #10
 80062f6:	f7fe fbdb 	bl	8004ab0 <WIZCHIP_READ>
 80062fa:	4603      	mov	r3, r0
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	b29b      	uxth	r3, r3
 8006300:	b2da      	uxtb	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	709a      	strb	r2, [r3, #2]
 8006306:	200a      	movs	r0, #10
 8006308:	f7fe fbd2 	bl	8004ab0 <WIZCHIP_READ>
 800630c:	4603      	mov	r3, r0
 800630e:	b2da      	uxtb	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	70da      	strb	r2, [r3, #3]
 8006314:	200c      	movs	r0, #12
 8006316:	f7fe fbcb 	bl	8004ab0 <WIZCHIP_READ>
 800631a:	4603      	mov	r3, r0
 800631c:	0a1b      	lsrs	r3, r3, #8
 800631e:	b29b      	uxth	r3, r3
 8006320:	b2da      	uxtb	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	711a      	strb	r2, [r3, #4]
 8006326:	200c      	movs	r0, #12
 8006328:	f7fe fbc2 	bl	8004ab0 <WIZCHIP_READ>
 800632c:	4603      	mov	r3, r0
 800632e:	b2da      	uxtb	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8006334:	2010      	movs	r0, #16
 8006336:	f7fe fbbb 	bl	8004ab0 <WIZCHIP_READ>
 800633a:	4603      	mov	r3, r0
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	b29b      	uxth	r3, r3
 8006340:	b2da      	uxtb	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	739a      	strb	r2, [r3, #14]
 8006346:	2010      	movs	r0, #16
 8006348:	f7fe fbb2 	bl	8004ab0 <WIZCHIP_READ>
 800634c:	4603      	mov	r3, r0
 800634e:	b2da      	uxtb	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	73da      	strb	r2, [r3, #15]
 8006354:	2012      	movs	r0, #18
 8006356:	f7fe fbab 	bl	8004ab0 <WIZCHIP_READ>
 800635a:	4603      	mov	r3, r0
 800635c:	0a1b      	lsrs	r3, r3, #8
 800635e:	b29b      	uxth	r3, r3
 8006360:	b2da      	uxtb	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	741a      	strb	r2, [r3, #16]
 8006366:	2012      	movs	r0, #18
 8006368:	f7fe fba2 	bl	8004ab0 <WIZCHIP_READ>
 800636c:	4603      	mov	r3, r0
 800636e:	b2da      	uxtb	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 8006374:	2014      	movs	r0, #20
 8006376:	f7fe fb9b 	bl	8004ab0 <WIZCHIP_READ>
 800637a:	4603      	mov	r3, r0
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	b29b      	uxth	r3, r3
 8006380:	b2da      	uxtb	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	729a      	strb	r2, [r3, #10]
 8006386:	2014      	movs	r0, #20
 8006388:	f7fe fb92 	bl	8004ab0 <WIZCHIP_READ>
 800638c:	4603      	mov	r3, r0
 800638e:	b2da      	uxtb	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	72da      	strb	r2, [r3, #11]
 8006394:	2016      	movs	r0, #22
 8006396:	f7fe fb8b 	bl	8004ab0 <WIZCHIP_READ>
 800639a:	4603      	mov	r3, r0
 800639c:	0a1b      	lsrs	r3, r3, #8
 800639e:	b29b      	uxth	r3, r3
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	731a      	strb	r2, [r3, #12]
 80063a6:	2016      	movs	r0, #22
 80063a8:	f7fe fb82 	bl	8004ab0 <WIZCHIP_READ>
 80063ac:	4603      	mov	r3, r0
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 80063b4:	2018      	movs	r0, #24
 80063b6:	f7fe fb7b 	bl	8004ab0 <WIZCHIP_READ>
 80063ba:	4603      	mov	r3, r0
 80063bc:	0a1b      	lsrs	r3, r3, #8
 80063be:	b29b      	uxth	r3, r3
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	719a      	strb	r2, [r3, #6]
 80063c6:	2018      	movs	r0, #24
 80063c8:	f7fe fb72 	bl	8004ab0 <WIZCHIP_READ>
 80063cc:	4603      	mov	r3, r0
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	71da      	strb	r2, [r3, #7]
 80063d4:	201a      	movs	r0, #26
 80063d6:	f7fe fb6b 	bl	8004ab0 <WIZCHIP_READ>
 80063da:	4603      	mov	r3, r0
 80063dc:	0a1b      	lsrs	r3, r3, #8
 80063de:	b29b      	uxth	r3, r3
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	721a      	strb	r2, [r3, #8]
 80063e6:	201a      	movs	r0, #26
 80063e8:	f7fe fb62 	bl	8004ab0 <WIZCHIP_READ>
 80063ec:	4603      	mov	r3, r0
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <wizchip_getnetinfo+0x158>)
 80063f6:	781a      	ldrb	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80063fc:	4b09      	ldr	r3, [pc, #36]	; (8006424 <wizchip_getnetinfo+0x158>)
 80063fe:	785a      	ldrb	r2, [r3, #1]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006404:	4b07      	ldr	r3, [pc, #28]	; (8006424 <wizchip_getnetinfo+0x158>)
 8006406:	789a      	ldrb	r2, [r3, #2]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <wizchip_getnetinfo+0x158>)
 800640e:	78da      	ldrb	r2, [r3, #3]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006414:	4b04      	ldr	r3, [pc, #16]	; (8006428 <wizchip_getnetinfo+0x15c>)
 8006416:	781a      	ldrb	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	759a      	strb	r2, [r3, #22]
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	200009e8 	.word	0x200009e8
 8006428:	200009ec 	.word	0x200009ec

0800642c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <wizchip_setnetmode+0x1e>
 8006444:	f04f 33ff 	mov.w	r3, #4294967295
 8006448:	e00f      	b.n	800646a <wizchip_setnetmode+0x3e>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 800644a:	2000      	movs	r0, #0
 800644c:	f7fe fb30 	bl	8004ab0 <WIZCHIP_READ>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8006454:	7bfa      	ldrb	r2, [r7, #15]
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	4313      	orrs	r3, r2
 800645a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	b29b      	uxth	r3, r3
 8006460:	4619      	mov	r1, r3
 8006462:	2000      	movs	r0, #0
 8006464:	f7fe fb06 	bl	8004a74 <WIZCHIP_WRITE>
   return 0;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8006476:	2000      	movs	r0, #0
 8006478:	f7fe fb1a 	bl	8004ab0 <WIZCHIP_READ>
 800647c:	4603      	mov	r3, r0
 800647e:	b2db      	uxtb	r3, r3
}
 8006480:	4618      	mov	r0, r3
 8006482:	bd80      	pop	{r7, pc}

08006484 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	4619      	mov	r1, r3
 8006494:	201e      	movs	r0, #30
 8006496:	f7fe faed 	bl	8004a74 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	885b      	ldrh	r3, [r3, #2]
 800649e:	4619      	mov	r1, r3
 80064a0:	201c      	movs	r0, #28
 80064a2:	f7fe fae7 	bl	8004a74 <WIZCHIP_WRITE>
}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80064b6:	201e      	movs	r0, #30
 80064b8:	f7fe fafa 	bl	8004ab0 <WIZCHIP_READ>
 80064bc:	4603      	mov	r3, r0
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80064c4:	201c      	movs	r0, #28
 80064c6:	f7fe faf3 	bl	8004ab0 <WIZCHIP_READ>
 80064ca:	4603      	mov	r3, r0
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	805a      	strh	r2, [r3, #2]
}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <__errno>:
 80064dc:	4b01      	ldr	r3, [pc, #4]	; (80064e4 <__errno+0x8>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20000060 	.word	0x20000060

080064e8 <__libc_init_array>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	4d0d      	ldr	r5, [pc, #52]	; (8006520 <__libc_init_array+0x38>)
 80064ec:	4c0d      	ldr	r4, [pc, #52]	; (8006524 <__libc_init_array+0x3c>)
 80064ee:	1b64      	subs	r4, r4, r5
 80064f0:	10a4      	asrs	r4, r4, #2
 80064f2:	2600      	movs	r6, #0
 80064f4:	42a6      	cmp	r6, r4
 80064f6:	d109      	bne.n	800650c <__libc_init_array+0x24>
 80064f8:	4d0b      	ldr	r5, [pc, #44]	; (8006528 <__libc_init_array+0x40>)
 80064fa:	4c0c      	ldr	r4, [pc, #48]	; (800652c <__libc_init_array+0x44>)
 80064fc:	f001 f824 	bl	8007548 <_init>
 8006500:	1b64      	subs	r4, r4, r5
 8006502:	10a4      	asrs	r4, r4, #2
 8006504:	2600      	movs	r6, #0
 8006506:	42a6      	cmp	r6, r4
 8006508:	d105      	bne.n	8006516 <__libc_init_array+0x2e>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006510:	4798      	blx	r3
 8006512:	3601      	adds	r6, #1
 8006514:	e7ee      	b.n	80064f4 <__libc_init_array+0xc>
 8006516:	f855 3b04 	ldr.w	r3, [r5], #4
 800651a:	4798      	blx	r3
 800651c:	3601      	adds	r6, #1
 800651e:	e7f2      	b.n	8006506 <__libc_init_array+0x1e>
 8006520:	08007860 	.word	0x08007860
 8006524:	08007860 	.word	0x08007860
 8006528:	08007860 	.word	0x08007860
 800652c:	08007864 	.word	0x08007864

08006530 <memset>:
 8006530:	4402      	add	r2, r0
 8006532:	4603      	mov	r3, r0
 8006534:	4293      	cmp	r3, r2
 8006536:	d100      	bne.n	800653a <memset+0xa>
 8006538:	4770      	bx	lr
 800653a:	f803 1b01 	strb.w	r1, [r3], #1
 800653e:	e7f9      	b.n	8006534 <memset+0x4>

08006540 <_free_r>:
 8006540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006542:	2900      	cmp	r1, #0
 8006544:	d044      	beq.n	80065d0 <_free_r+0x90>
 8006546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800654a:	9001      	str	r0, [sp, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f1a1 0404 	sub.w	r4, r1, #4
 8006552:	bfb8      	it	lt
 8006554:	18e4      	addlt	r4, r4, r3
 8006556:	f000 fcc9 	bl	8006eec <__malloc_lock>
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <_free_r+0x94>)
 800655c:	9801      	ldr	r0, [sp, #4]
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	b933      	cbnz	r3, 8006570 <_free_r+0x30>
 8006562:	6063      	str	r3, [r4, #4]
 8006564:	6014      	str	r4, [r2, #0]
 8006566:	b003      	add	sp, #12
 8006568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800656c:	f000 bcc4 	b.w	8006ef8 <__malloc_unlock>
 8006570:	42a3      	cmp	r3, r4
 8006572:	d908      	bls.n	8006586 <_free_r+0x46>
 8006574:	6825      	ldr	r5, [r4, #0]
 8006576:	1961      	adds	r1, r4, r5
 8006578:	428b      	cmp	r3, r1
 800657a:	bf01      	itttt	eq
 800657c:	6819      	ldreq	r1, [r3, #0]
 800657e:	685b      	ldreq	r3, [r3, #4]
 8006580:	1949      	addeq	r1, r1, r5
 8006582:	6021      	streq	r1, [r4, #0]
 8006584:	e7ed      	b.n	8006562 <_free_r+0x22>
 8006586:	461a      	mov	r2, r3
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b10b      	cbz	r3, 8006590 <_free_r+0x50>
 800658c:	42a3      	cmp	r3, r4
 800658e:	d9fa      	bls.n	8006586 <_free_r+0x46>
 8006590:	6811      	ldr	r1, [r2, #0]
 8006592:	1855      	adds	r5, r2, r1
 8006594:	42a5      	cmp	r5, r4
 8006596:	d10b      	bne.n	80065b0 <_free_r+0x70>
 8006598:	6824      	ldr	r4, [r4, #0]
 800659a:	4421      	add	r1, r4
 800659c:	1854      	adds	r4, r2, r1
 800659e:	42a3      	cmp	r3, r4
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	d1e0      	bne.n	8006566 <_free_r+0x26>
 80065a4:	681c      	ldr	r4, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	6053      	str	r3, [r2, #4]
 80065aa:	4421      	add	r1, r4
 80065ac:	6011      	str	r1, [r2, #0]
 80065ae:	e7da      	b.n	8006566 <_free_r+0x26>
 80065b0:	d902      	bls.n	80065b8 <_free_r+0x78>
 80065b2:	230c      	movs	r3, #12
 80065b4:	6003      	str	r3, [r0, #0]
 80065b6:	e7d6      	b.n	8006566 <_free_r+0x26>
 80065b8:	6825      	ldr	r5, [r4, #0]
 80065ba:	1961      	adds	r1, r4, r5
 80065bc:	428b      	cmp	r3, r1
 80065be:	bf04      	itt	eq
 80065c0:	6819      	ldreq	r1, [r3, #0]
 80065c2:	685b      	ldreq	r3, [r3, #4]
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	bf04      	itt	eq
 80065c8:	1949      	addeq	r1, r1, r5
 80065ca:	6021      	streq	r1, [r4, #0]
 80065cc:	6054      	str	r4, [r2, #4]
 80065ce:	e7ca      	b.n	8006566 <_free_r+0x26>
 80065d0:	b003      	add	sp, #12
 80065d2:	bd30      	pop	{r4, r5, pc}
 80065d4:	200009f0 	.word	0x200009f0

080065d8 <sbrk_aligned>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	4e0e      	ldr	r6, [pc, #56]	; (8006614 <sbrk_aligned+0x3c>)
 80065dc:	460c      	mov	r4, r1
 80065de:	6831      	ldr	r1, [r6, #0]
 80065e0:	4605      	mov	r5, r0
 80065e2:	b911      	cbnz	r1, 80065ea <sbrk_aligned+0x12>
 80065e4:	f000 f91a 	bl	800681c <_sbrk_r>
 80065e8:	6030      	str	r0, [r6, #0]
 80065ea:	4621      	mov	r1, r4
 80065ec:	4628      	mov	r0, r5
 80065ee:	f000 f915 	bl	800681c <_sbrk_r>
 80065f2:	1c43      	adds	r3, r0, #1
 80065f4:	d00a      	beq.n	800660c <sbrk_aligned+0x34>
 80065f6:	1cc4      	adds	r4, r0, #3
 80065f8:	f024 0403 	bic.w	r4, r4, #3
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	d007      	beq.n	8006610 <sbrk_aligned+0x38>
 8006600:	1a21      	subs	r1, r4, r0
 8006602:	4628      	mov	r0, r5
 8006604:	f000 f90a 	bl	800681c <_sbrk_r>
 8006608:	3001      	adds	r0, #1
 800660a:	d101      	bne.n	8006610 <sbrk_aligned+0x38>
 800660c:	f04f 34ff 	mov.w	r4, #4294967295
 8006610:	4620      	mov	r0, r4
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	200009f4 	.word	0x200009f4

08006618 <_malloc_r>:
 8006618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661c:	1ccd      	adds	r5, r1, #3
 800661e:	f025 0503 	bic.w	r5, r5, #3
 8006622:	3508      	adds	r5, #8
 8006624:	2d0c      	cmp	r5, #12
 8006626:	bf38      	it	cc
 8006628:	250c      	movcc	r5, #12
 800662a:	2d00      	cmp	r5, #0
 800662c:	4607      	mov	r7, r0
 800662e:	db01      	blt.n	8006634 <_malloc_r+0x1c>
 8006630:	42a9      	cmp	r1, r5
 8006632:	d905      	bls.n	8006640 <_malloc_r+0x28>
 8006634:	230c      	movs	r3, #12
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	2600      	movs	r6, #0
 800663a:	4630      	mov	r0, r6
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	4e2e      	ldr	r6, [pc, #184]	; (80066fc <_malloc_r+0xe4>)
 8006642:	f000 fc53 	bl	8006eec <__malloc_lock>
 8006646:	6833      	ldr	r3, [r6, #0]
 8006648:	461c      	mov	r4, r3
 800664a:	bb34      	cbnz	r4, 800669a <_malloc_r+0x82>
 800664c:	4629      	mov	r1, r5
 800664e:	4638      	mov	r0, r7
 8006650:	f7ff ffc2 	bl	80065d8 <sbrk_aligned>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	4604      	mov	r4, r0
 8006658:	d14d      	bne.n	80066f6 <_malloc_r+0xde>
 800665a:	6834      	ldr	r4, [r6, #0]
 800665c:	4626      	mov	r6, r4
 800665e:	2e00      	cmp	r6, #0
 8006660:	d140      	bne.n	80066e4 <_malloc_r+0xcc>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	4631      	mov	r1, r6
 8006666:	4638      	mov	r0, r7
 8006668:	eb04 0803 	add.w	r8, r4, r3
 800666c:	f000 f8d6 	bl	800681c <_sbrk_r>
 8006670:	4580      	cmp	r8, r0
 8006672:	d13a      	bne.n	80066ea <_malloc_r+0xd2>
 8006674:	6821      	ldr	r1, [r4, #0]
 8006676:	3503      	adds	r5, #3
 8006678:	1a6d      	subs	r5, r5, r1
 800667a:	f025 0503 	bic.w	r5, r5, #3
 800667e:	3508      	adds	r5, #8
 8006680:	2d0c      	cmp	r5, #12
 8006682:	bf38      	it	cc
 8006684:	250c      	movcc	r5, #12
 8006686:	4629      	mov	r1, r5
 8006688:	4638      	mov	r0, r7
 800668a:	f7ff ffa5 	bl	80065d8 <sbrk_aligned>
 800668e:	3001      	adds	r0, #1
 8006690:	d02b      	beq.n	80066ea <_malloc_r+0xd2>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	442b      	add	r3, r5
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	e00e      	b.n	80066b8 <_malloc_r+0xa0>
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	1b52      	subs	r2, r2, r5
 800669e:	d41e      	bmi.n	80066de <_malloc_r+0xc6>
 80066a0:	2a0b      	cmp	r2, #11
 80066a2:	d916      	bls.n	80066d2 <_malloc_r+0xba>
 80066a4:	1961      	adds	r1, r4, r5
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	6025      	str	r5, [r4, #0]
 80066aa:	bf18      	it	ne
 80066ac:	6059      	strne	r1, [r3, #4]
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	bf08      	it	eq
 80066b2:	6031      	streq	r1, [r6, #0]
 80066b4:	5162      	str	r2, [r4, r5]
 80066b6:	604b      	str	r3, [r1, #4]
 80066b8:	4638      	mov	r0, r7
 80066ba:	f104 060b 	add.w	r6, r4, #11
 80066be:	f000 fc1b 	bl	8006ef8 <__malloc_unlock>
 80066c2:	f026 0607 	bic.w	r6, r6, #7
 80066c6:	1d23      	adds	r3, r4, #4
 80066c8:	1af2      	subs	r2, r6, r3
 80066ca:	d0b6      	beq.n	800663a <_malloc_r+0x22>
 80066cc:	1b9b      	subs	r3, r3, r6
 80066ce:	50a3      	str	r3, [r4, r2]
 80066d0:	e7b3      	b.n	800663a <_malloc_r+0x22>
 80066d2:	6862      	ldr	r2, [r4, #4]
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	bf0c      	ite	eq
 80066d8:	6032      	streq	r2, [r6, #0]
 80066da:	605a      	strne	r2, [r3, #4]
 80066dc:	e7ec      	b.n	80066b8 <_malloc_r+0xa0>
 80066de:	4623      	mov	r3, r4
 80066e0:	6864      	ldr	r4, [r4, #4]
 80066e2:	e7b2      	b.n	800664a <_malloc_r+0x32>
 80066e4:	4634      	mov	r4, r6
 80066e6:	6876      	ldr	r6, [r6, #4]
 80066e8:	e7b9      	b.n	800665e <_malloc_r+0x46>
 80066ea:	230c      	movs	r3, #12
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4638      	mov	r0, r7
 80066f0:	f000 fc02 	bl	8006ef8 <__malloc_unlock>
 80066f4:	e7a1      	b.n	800663a <_malloc_r+0x22>
 80066f6:	6025      	str	r5, [r4, #0]
 80066f8:	e7de      	b.n	80066b8 <_malloc_r+0xa0>
 80066fa:	bf00      	nop
 80066fc:	200009f0 	.word	0x200009f0

08006700 <iprintf>:
 8006700:	b40f      	push	{r0, r1, r2, r3}
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <iprintf+0x2c>)
 8006704:	b513      	push	{r0, r1, r4, lr}
 8006706:	681c      	ldr	r4, [r3, #0]
 8006708:	b124      	cbz	r4, 8006714 <iprintf+0x14>
 800670a:	69a3      	ldr	r3, [r4, #24]
 800670c:	b913      	cbnz	r3, 8006714 <iprintf+0x14>
 800670e:	4620      	mov	r0, r4
 8006710:	f000 fad4 	bl	8006cbc <__sinit>
 8006714:	ab05      	add	r3, sp, #20
 8006716:	9a04      	ldr	r2, [sp, #16]
 8006718:	68a1      	ldr	r1, [r4, #8]
 800671a:	9301      	str	r3, [sp, #4]
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fc1b 	bl	8006f58 <_vfiprintf_r>
 8006722:	b002      	add	sp, #8
 8006724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006728:	b004      	add	sp, #16
 800672a:	4770      	bx	lr
 800672c:	20000060 	.word	0x20000060

08006730 <_puts_r>:
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	460e      	mov	r6, r1
 8006734:	4605      	mov	r5, r0
 8006736:	b118      	cbz	r0, 8006740 <_puts_r+0x10>
 8006738:	6983      	ldr	r3, [r0, #24]
 800673a:	b90b      	cbnz	r3, 8006740 <_puts_r+0x10>
 800673c:	f000 fabe 	bl	8006cbc <__sinit>
 8006740:	69ab      	ldr	r3, [r5, #24]
 8006742:	68ac      	ldr	r4, [r5, #8]
 8006744:	b913      	cbnz	r3, 800674c <_puts_r+0x1c>
 8006746:	4628      	mov	r0, r5
 8006748:	f000 fab8 	bl	8006cbc <__sinit>
 800674c:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <_puts_r+0xd0>)
 800674e:	429c      	cmp	r4, r3
 8006750:	d120      	bne.n	8006794 <_puts_r+0x64>
 8006752:	686c      	ldr	r4, [r5, #4]
 8006754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006756:	07db      	lsls	r3, r3, #31
 8006758:	d405      	bmi.n	8006766 <_puts_r+0x36>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	0598      	lsls	r0, r3, #22
 800675e:	d402      	bmi.n	8006766 <_puts_r+0x36>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f000 fb49 	bl	8006df8 <__retarget_lock_acquire_recursive>
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	0719      	lsls	r1, r3, #28
 800676a:	d51d      	bpl.n	80067a8 <_puts_r+0x78>
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	b1db      	cbz	r3, 80067a8 <_puts_r+0x78>
 8006770:	3e01      	subs	r6, #1
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006778:	3b01      	subs	r3, #1
 800677a:	60a3      	str	r3, [r4, #8]
 800677c:	bb39      	cbnz	r1, 80067ce <_puts_r+0x9e>
 800677e:	2b00      	cmp	r3, #0
 8006780:	da38      	bge.n	80067f4 <_puts_r+0xc4>
 8006782:	4622      	mov	r2, r4
 8006784:	210a      	movs	r1, #10
 8006786:	4628      	mov	r0, r5
 8006788:	f000 f89c 	bl	80068c4 <__swbuf_r>
 800678c:	3001      	adds	r0, #1
 800678e:	d011      	beq.n	80067b4 <_puts_r+0x84>
 8006790:	250a      	movs	r5, #10
 8006792:	e011      	b.n	80067b8 <_puts_r+0x88>
 8006794:	4b1b      	ldr	r3, [pc, #108]	; (8006804 <_puts_r+0xd4>)
 8006796:	429c      	cmp	r4, r3
 8006798:	d101      	bne.n	800679e <_puts_r+0x6e>
 800679a:	68ac      	ldr	r4, [r5, #8]
 800679c:	e7da      	b.n	8006754 <_puts_r+0x24>
 800679e:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <_puts_r+0xd8>)
 80067a0:	429c      	cmp	r4, r3
 80067a2:	bf08      	it	eq
 80067a4:	68ec      	ldreq	r4, [r5, #12]
 80067a6:	e7d5      	b.n	8006754 <_puts_r+0x24>
 80067a8:	4621      	mov	r1, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 f8ee 	bl	800698c <__swsetup_r>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d0dd      	beq.n	8006770 <_puts_r+0x40>
 80067b4:	f04f 35ff 	mov.w	r5, #4294967295
 80067b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ba:	07da      	lsls	r2, r3, #31
 80067bc:	d405      	bmi.n	80067ca <_puts_r+0x9a>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	059b      	lsls	r3, r3, #22
 80067c2:	d402      	bmi.n	80067ca <_puts_r+0x9a>
 80067c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c6:	f000 fb18 	bl	8006dfa <__retarget_lock_release_recursive>
 80067ca:	4628      	mov	r0, r5
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da04      	bge.n	80067dc <_puts_r+0xac>
 80067d2:	69a2      	ldr	r2, [r4, #24]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	dc06      	bgt.n	80067e6 <_puts_r+0xb6>
 80067d8:	290a      	cmp	r1, #10
 80067da:	d004      	beq.n	80067e6 <_puts_r+0xb6>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	6022      	str	r2, [r4, #0]
 80067e2:	7019      	strb	r1, [r3, #0]
 80067e4:	e7c5      	b.n	8006772 <_puts_r+0x42>
 80067e6:	4622      	mov	r2, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 f86b 	bl	80068c4 <__swbuf_r>
 80067ee:	3001      	adds	r0, #1
 80067f0:	d1bf      	bne.n	8006772 <_puts_r+0x42>
 80067f2:	e7df      	b.n	80067b4 <_puts_r+0x84>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	250a      	movs	r5, #10
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	6022      	str	r2, [r4, #0]
 80067fc:	701d      	strb	r5, [r3, #0]
 80067fe:	e7db      	b.n	80067b8 <_puts_r+0x88>
 8006800:	080077e4 	.word	0x080077e4
 8006804:	08007804 	.word	0x08007804
 8006808:	080077c4 	.word	0x080077c4

0800680c <puts>:
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <puts+0xc>)
 800680e:	4601      	mov	r1, r0
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f7ff bf8d 	b.w	8006730 <_puts_r>
 8006816:	bf00      	nop
 8006818:	20000060 	.word	0x20000060

0800681c <_sbrk_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d06      	ldr	r5, [pc, #24]	; (8006838 <_sbrk_r+0x1c>)
 8006820:	2300      	movs	r3, #0
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fa fb56 	bl	8000ed8 <_sbrk>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_sbrk_r+0x1a>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_sbrk_r+0x1a>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	200009fc 	.word	0x200009fc

0800683c <__sread>:
 800683c:	b510      	push	{r4, lr}
 800683e:	460c      	mov	r4, r1
 8006840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006844:	f000 fe4c 	bl	80074e0 <_read_r>
 8006848:	2800      	cmp	r0, #0
 800684a:	bfab      	itete	ge
 800684c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800684e:	89a3      	ldrhlt	r3, [r4, #12]
 8006850:	181b      	addge	r3, r3, r0
 8006852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006856:	bfac      	ite	ge
 8006858:	6563      	strge	r3, [r4, #84]	; 0x54
 800685a:	81a3      	strhlt	r3, [r4, #12]
 800685c:	bd10      	pop	{r4, pc}

0800685e <__swrite>:
 800685e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006862:	461f      	mov	r7, r3
 8006864:	898b      	ldrh	r3, [r1, #12]
 8006866:	05db      	lsls	r3, r3, #23
 8006868:	4605      	mov	r5, r0
 800686a:	460c      	mov	r4, r1
 800686c:	4616      	mov	r6, r2
 800686e:	d505      	bpl.n	800687c <__swrite+0x1e>
 8006870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006874:	2302      	movs	r3, #2
 8006876:	2200      	movs	r2, #0
 8006878:	f000 fac0 	bl	8006dfc <_lseek_r>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	4632      	mov	r2, r6
 800688a:	463b      	mov	r3, r7
 800688c:	4628      	mov	r0, r5
 800688e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006892:	f000 b869 	b.w	8006968 <_write_r>

08006896 <__sseek>:
 8006896:	b510      	push	{r4, lr}
 8006898:	460c      	mov	r4, r1
 800689a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689e:	f000 faad 	bl	8006dfc <_lseek_r>
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	bf15      	itete	ne
 80068a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80068aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068b2:	81a3      	strheq	r3, [r4, #12]
 80068b4:	bf18      	it	ne
 80068b6:	81a3      	strhne	r3, [r4, #12]
 80068b8:	bd10      	pop	{r4, pc}

080068ba <__sclose>:
 80068ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068be:	f000 b8d3 	b.w	8006a68 <_close_r>
	...

080068c4 <__swbuf_r>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	460e      	mov	r6, r1
 80068c8:	4614      	mov	r4, r2
 80068ca:	4605      	mov	r5, r0
 80068cc:	b118      	cbz	r0, 80068d6 <__swbuf_r+0x12>
 80068ce:	6983      	ldr	r3, [r0, #24]
 80068d0:	b90b      	cbnz	r3, 80068d6 <__swbuf_r+0x12>
 80068d2:	f000 f9f3 	bl	8006cbc <__sinit>
 80068d6:	4b21      	ldr	r3, [pc, #132]	; (800695c <__swbuf_r+0x98>)
 80068d8:	429c      	cmp	r4, r3
 80068da:	d12b      	bne.n	8006934 <__swbuf_r+0x70>
 80068dc:	686c      	ldr	r4, [r5, #4]
 80068de:	69a3      	ldr	r3, [r4, #24]
 80068e0:	60a3      	str	r3, [r4, #8]
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	071a      	lsls	r2, r3, #28
 80068e6:	d52f      	bpl.n	8006948 <__swbuf_r+0x84>
 80068e8:	6923      	ldr	r3, [r4, #16]
 80068ea:	b36b      	cbz	r3, 8006948 <__swbuf_r+0x84>
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	6820      	ldr	r0, [r4, #0]
 80068f0:	1ac0      	subs	r0, r0, r3
 80068f2:	6963      	ldr	r3, [r4, #20]
 80068f4:	b2f6      	uxtb	r6, r6
 80068f6:	4283      	cmp	r3, r0
 80068f8:	4637      	mov	r7, r6
 80068fa:	dc04      	bgt.n	8006906 <__swbuf_r+0x42>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 f948 	bl	8006b94 <_fflush_r>
 8006904:	bb30      	cbnz	r0, 8006954 <__swbuf_r+0x90>
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	3b01      	subs	r3, #1
 800690a:	60a3      	str	r3, [r4, #8]
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	701e      	strb	r6, [r3, #0]
 8006914:	6963      	ldr	r3, [r4, #20]
 8006916:	3001      	adds	r0, #1
 8006918:	4283      	cmp	r3, r0
 800691a:	d004      	beq.n	8006926 <__swbuf_r+0x62>
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	07db      	lsls	r3, r3, #31
 8006920:	d506      	bpl.n	8006930 <__swbuf_r+0x6c>
 8006922:	2e0a      	cmp	r6, #10
 8006924:	d104      	bne.n	8006930 <__swbuf_r+0x6c>
 8006926:	4621      	mov	r1, r4
 8006928:	4628      	mov	r0, r5
 800692a:	f000 f933 	bl	8006b94 <_fflush_r>
 800692e:	b988      	cbnz	r0, 8006954 <__swbuf_r+0x90>
 8006930:	4638      	mov	r0, r7
 8006932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <__swbuf_r+0x9c>)
 8006936:	429c      	cmp	r4, r3
 8006938:	d101      	bne.n	800693e <__swbuf_r+0x7a>
 800693a:	68ac      	ldr	r4, [r5, #8]
 800693c:	e7cf      	b.n	80068de <__swbuf_r+0x1a>
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <__swbuf_r+0xa0>)
 8006940:	429c      	cmp	r4, r3
 8006942:	bf08      	it	eq
 8006944:	68ec      	ldreq	r4, [r5, #12]
 8006946:	e7ca      	b.n	80068de <__swbuf_r+0x1a>
 8006948:	4621      	mov	r1, r4
 800694a:	4628      	mov	r0, r5
 800694c:	f000 f81e 	bl	800698c <__swsetup_r>
 8006950:	2800      	cmp	r0, #0
 8006952:	d0cb      	beq.n	80068ec <__swbuf_r+0x28>
 8006954:	f04f 37ff 	mov.w	r7, #4294967295
 8006958:	e7ea      	b.n	8006930 <__swbuf_r+0x6c>
 800695a:	bf00      	nop
 800695c:	080077e4 	.word	0x080077e4
 8006960:	08007804 	.word	0x08007804
 8006964:	080077c4 	.word	0x080077c4

08006968 <_write_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4d07      	ldr	r5, [pc, #28]	; (8006988 <_write_r+0x20>)
 800696c:	4604      	mov	r4, r0
 800696e:	4608      	mov	r0, r1
 8006970:	4611      	mov	r1, r2
 8006972:	2200      	movs	r2, #0
 8006974:	602a      	str	r2, [r5, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f7f9 fe0c 	bl	8000594 <_write>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_write_r+0x1e>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_write_r+0x1e>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	200009fc 	.word	0x200009fc

0800698c <__swsetup_r>:
 800698c:	4b32      	ldr	r3, [pc, #200]	; (8006a58 <__swsetup_r+0xcc>)
 800698e:	b570      	push	{r4, r5, r6, lr}
 8006990:	681d      	ldr	r5, [r3, #0]
 8006992:	4606      	mov	r6, r0
 8006994:	460c      	mov	r4, r1
 8006996:	b125      	cbz	r5, 80069a2 <__swsetup_r+0x16>
 8006998:	69ab      	ldr	r3, [r5, #24]
 800699a:	b913      	cbnz	r3, 80069a2 <__swsetup_r+0x16>
 800699c:	4628      	mov	r0, r5
 800699e:	f000 f98d 	bl	8006cbc <__sinit>
 80069a2:	4b2e      	ldr	r3, [pc, #184]	; (8006a5c <__swsetup_r+0xd0>)
 80069a4:	429c      	cmp	r4, r3
 80069a6:	d10f      	bne.n	80069c8 <__swsetup_r+0x3c>
 80069a8:	686c      	ldr	r4, [r5, #4]
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069b0:	0719      	lsls	r1, r3, #28
 80069b2:	d42c      	bmi.n	8006a0e <__swsetup_r+0x82>
 80069b4:	06dd      	lsls	r5, r3, #27
 80069b6:	d411      	bmi.n	80069dc <__swsetup_r+0x50>
 80069b8:	2309      	movs	r3, #9
 80069ba:	6033      	str	r3, [r6, #0]
 80069bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	f04f 30ff 	mov.w	r0, #4294967295
 80069c6:	e03e      	b.n	8006a46 <__swsetup_r+0xba>
 80069c8:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <__swsetup_r+0xd4>)
 80069ca:	429c      	cmp	r4, r3
 80069cc:	d101      	bne.n	80069d2 <__swsetup_r+0x46>
 80069ce:	68ac      	ldr	r4, [r5, #8]
 80069d0:	e7eb      	b.n	80069aa <__swsetup_r+0x1e>
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <__swsetup_r+0xd8>)
 80069d4:	429c      	cmp	r4, r3
 80069d6:	bf08      	it	eq
 80069d8:	68ec      	ldreq	r4, [r5, #12]
 80069da:	e7e6      	b.n	80069aa <__swsetup_r+0x1e>
 80069dc:	0758      	lsls	r0, r3, #29
 80069de:	d512      	bpl.n	8006a06 <__swsetup_r+0x7a>
 80069e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069e2:	b141      	cbz	r1, 80069f6 <__swsetup_r+0x6a>
 80069e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069e8:	4299      	cmp	r1, r3
 80069ea:	d002      	beq.n	80069f2 <__swsetup_r+0x66>
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7ff fda7 	bl	8006540 <_free_r>
 80069f2:	2300      	movs	r3, #0
 80069f4:	6363      	str	r3, [r4, #52]	; 0x34
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	2300      	movs	r3, #0
 8006a00:	6063      	str	r3, [r4, #4]
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f043 0308 	orr.w	r3, r3, #8
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	b94b      	cbnz	r3, 8006a26 <__swsetup_r+0x9a>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1c:	d003      	beq.n	8006a26 <__swsetup_r+0x9a>
 8006a1e:	4621      	mov	r1, r4
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 fa23 	bl	8006e6c <__smakebuf_r>
 8006a26:	89a0      	ldrh	r0, [r4, #12]
 8006a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a2c:	f010 0301 	ands.w	r3, r0, #1
 8006a30:	d00a      	beq.n	8006a48 <__swsetup_r+0xbc>
 8006a32:	2300      	movs	r3, #0
 8006a34:	60a3      	str	r3, [r4, #8]
 8006a36:	6963      	ldr	r3, [r4, #20]
 8006a38:	425b      	negs	r3, r3
 8006a3a:	61a3      	str	r3, [r4, #24]
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	b943      	cbnz	r3, 8006a52 <__swsetup_r+0xc6>
 8006a40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a44:	d1ba      	bne.n	80069bc <__swsetup_r+0x30>
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	0781      	lsls	r1, r0, #30
 8006a4a:	bf58      	it	pl
 8006a4c:	6963      	ldrpl	r3, [r4, #20]
 8006a4e:	60a3      	str	r3, [r4, #8]
 8006a50:	e7f4      	b.n	8006a3c <__swsetup_r+0xb0>
 8006a52:	2000      	movs	r0, #0
 8006a54:	e7f7      	b.n	8006a46 <__swsetup_r+0xba>
 8006a56:	bf00      	nop
 8006a58:	20000060 	.word	0x20000060
 8006a5c:	080077e4 	.word	0x080077e4
 8006a60:	08007804 	.word	0x08007804
 8006a64:	080077c4 	.word	0x080077c4

08006a68 <_close_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4d06      	ldr	r5, [pc, #24]	; (8006a84 <_close_r+0x1c>)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4604      	mov	r4, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	602b      	str	r3, [r5, #0]
 8006a74:	f7fa f9fb 	bl	8000e6e <_close>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_close_r+0x1a>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_close_r+0x1a>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	200009fc 	.word	0x200009fc

08006a88 <__sflush_r>:
 8006a88:	898a      	ldrh	r2, [r1, #12]
 8006a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8e:	4605      	mov	r5, r0
 8006a90:	0710      	lsls	r0, r2, #28
 8006a92:	460c      	mov	r4, r1
 8006a94:	d458      	bmi.n	8006b48 <__sflush_r+0xc0>
 8006a96:	684b      	ldr	r3, [r1, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dc05      	bgt.n	8006aa8 <__sflush_r+0x20>
 8006a9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	dc02      	bgt.n	8006aa8 <__sflush_r+0x20>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aaa:	2e00      	cmp	r6, #0
 8006aac:	d0f9      	beq.n	8006aa2 <__sflush_r+0x1a>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ab4:	682f      	ldr	r7, [r5, #0]
 8006ab6:	602b      	str	r3, [r5, #0]
 8006ab8:	d032      	beq.n	8006b20 <__sflush_r+0x98>
 8006aba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	075a      	lsls	r2, r3, #29
 8006ac0:	d505      	bpl.n	8006ace <__sflush_r+0x46>
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	1ac0      	subs	r0, r0, r3
 8006ac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ac8:	b10b      	cbz	r3, 8006ace <__sflush_r+0x46>
 8006aca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006acc:	1ac0      	subs	r0, r0, r3
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ad4:	6a21      	ldr	r1, [r4, #32]
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b0      	blx	r6
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	d106      	bne.n	8006aee <__sflush_r+0x66>
 8006ae0:	6829      	ldr	r1, [r5, #0]
 8006ae2:	291d      	cmp	r1, #29
 8006ae4:	d82c      	bhi.n	8006b40 <__sflush_r+0xb8>
 8006ae6:	4a2a      	ldr	r2, [pc, #168]	; (8006b90 <__sflush_r+0x108>)
 8006ae8:	40ca      	lsrs	r2, r1
 8006aea:	07d6      	lsls	r6, r2, #31
 8006aec:	d528      	bpl.n	8006b40 <__sflush_r+0xb8>
 8006aee:	2200      	movs	r2, #0
 8006af0:	6062      	str	r2, [r4, #4]
 8006af2:	04d9      	lsls	r1, r3, #19
 8006af4:	6922      	ldr	r2, [r4, #16]
 8006af6:	6022      	str	r2, [r4, #0]
 8006af8:	d504      	bpl.n	8006b04 <__sflush_r+0x7c>
 8006afa:	1c42      	adds	r2, r0, #1
 8006afc:	d101      	bne.n	8006b02 <__sflush_r+0x7a>
 8006afe:	682b      	ldr	r3, [r5, #0]
 8006b00:	b903      	cbnz	r3, 8006b04 <__sflush_r+0x7c>
 8006b02:	6560      	str	r0, [r4, #84]	; 0x54
 8006b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b06:	602f      	str	r7, [r5, #0]
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	d0ca      	beq.n	8006aa2 <__sflush_r+0x1a>
 8006b0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b10:	4299      	cmp	r1, r3
 8006b12:	d002      	beq.n	8006b1a <__sflush_r+0x92>
 8006b14:	4628      	mov	r0, r5
 8006b16:	f7ff fd13 	bl	8006540 <_free_r>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b1e:	e7c1      	b.n	8006aa4 <__sflush_r+0x1c>
 8006b20:	6a21      	ldr	r1, [r4, #32]
 8006b22:	2301      	movs	r3, #1
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b0      	blx	r6
 8006b28:	1c41      	adds	r1, r0, #1
 8006b2a:	d1c7      	bne.n	8006abc <__sflush_r+0x34>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0c4      	beq.n	8006abc <__sflush_r+0x34>
 8006b32:	2b1d      	cmp	r3, #29
 8006b34:	d001      	beq.n	8006b3a <__sflush_r+0xb2>
 8006b36:	2b16      	cmp	r3, #22
 8006b38:	d101      	bne.n	8006b3e <__sflush_r+0xb6>
 8006b3a:	602f      	str	r7, [r5, #0]
 8006b3c:	e7b1      	b.n	8006aa2 <__sflush_r+0x1a>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	e7ad      	b.n	8006aa4 <__sflush_r+0x1c>
 8006b48:	690f      	ldr	r7, [r1, #16]
 8006b4a:	2f00      	cmp	r7, #0
 8006b4c:	d0a9      	beq.n	8006aa2 <__sflush_r+0x1a>
 8006b4e:	0793      	lsls	r3, r2, #30
 8006b50:	680e      	ldr	r6, [r1, #0]
 8006b52:	bf08      	it	eq
 8006b54:	694b      	ldreq	r3, [r1, #20]
 8006b56:	600f      	str	r7, [r1, #0]
 8006b58:	bf18      	it	ne
 8006b5a:	2300      	movne	r3, #0
 8006b5c:	eba6 0807 	sub.w	r8, r6, r7
 8006b60:	608b      	str	r3, [r1, #8]
 8006b62:	f1b8 0f00 	cmp.w	r8, #0
 8006b66:	dd9c      	ble.n	8006aa2 <__sflush_r+0x1a>
 8006b68:	6a21      	ldr	r1, [r4, #32]
 8006b6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b6c:	4643      	mov	r3, r8
 8006b6e:	463a      	mov	r2, r7
 8006b70:	4628      	mov	r0, r5
 8006b72:	47b0      	blx	r6
 8006b74:	2800      	cmp	r0, #0
 8006b76:	dc06      	bgt.n	8006b86 <__sflush_r+0xfe>
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b7e:	81a3      	strh	r3, [r4, #12]
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	e78e      	b.n	8006aa4 <__sflush_r+0x1c>
 8006b86:	4407      	add	r7, r0
 8006b88:	eba8 0800 	sub.w	r8, r8, r0
 8006b8c:	e7e9      	b.n	8006b62 <__sflush_r+0xda>
 8006b8e:	bf00      	nop
 8006b90:	20400001 	.word	0x20400001

08006b94 <_fflush_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	690b      	ldr	r3, [r1, #16]
 8006b98:	4605      	mov	r5, r0
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	b913      	cbnz	r3, 8006ba4 <_fflush_r+0x10>
 8006b9e:	2500      	movs	r5, #0
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	b118      	cbz	r0, 8006bae <_fflush_r+0x1a>
 8006ba6:	6983      	ldr	r3, [r0, #24]
 8006ba8:	b90b      	cbnz	r3, 8006bae <_fflush_r+0x1a>
 8006baa:	f000 f887 	bl	8006cbc <__sinit>
 8006bae:	4b14      	ldr	r3, [pc, #80]	; (8006c00 <_fflush_r+0x6c>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	d11b      	bne.n	8006bec <_fflush_r+0x58>
 8006bb4:	686c      	ldr	r4, [r5, #4]
 8006bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0ef      	beq.n	8006b9e <_fflush_r+0xa>
 8006bbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bc0:	07d0      	lsls	r0, r2, #31
 8006bc2:	d404      	bmi.n	8006bce <_fflush_r+0x3a>
 8006bc4:	0599      	lsls	r1, r3, #22
 8006bc6:	d402      	bmi.n	8006bce <_fflush_r+0x3a>
 8006bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bca:	f000 f915 	bl	8006df8 <__retarget_lock_acquire_recursive>
 8006bce:	4628      	mov	r0, r5
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	f7ff ff59 	bl	8006a88 <__sflush_r>
 8006bd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bd8:	07da      	lsls	r2, r3, #31
 8006bda:	4605      	mov	r5, r0
 8006bdc:	d4e0      	bmi.n	8006ba0 <_fflush_r+0xc>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	059b      	lsls	r3, r3, #22
 8006be2:	d4dd      	bmi.n	8006ba0 <_fflush_r+0xc>
 8006be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006be6:	f000 f908 	bl	8006dfa <__retarget_lock_release_recursive>
 8006bea:	e7d9      	b.n	8006ba0 <_fflush_r+0xc>
 8006bec:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <_fflush_r+0x70>)
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	d101      	bne.n	8006bf6 <_fflush_r+0x62>
 8006bf2:	68ac      	ldr	r4, [r5, #8]
 8006bf4:	e7df      	b.n	8006bb6 <_fflush_r+0x22>
 8006bf6:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <_fflush_r+0x74>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	bf08      	it	eq
 8006bfc:	68ec      	ldreq	r4, [r5, #12]
 8006bfe:	e7da      	b.n	8006bb6 <_fflush_r+0x22>
 8006c00:	080077e4 	.word	0x080077e4
 8006c04:	08007804 	.word	0x08007804
 8006c08:	080077c4 	.word	0x080077c4

08006c0c <std>:
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	b510      	push	{r4, lr}
 8006c10:	4604      	mov	r4, r0
 8006c12:	e9c0 3300 	strd	r3, r3, [r0]
 8006c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c1a:	6083      	str	r3, [r0, #8]
 8006c1c:	8181      	strh	r1, [r0, #12]
 8006c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c20:	81c2      	strh	r2, [r0, #14]
 8006c22:	6183      	str	r3, [r0, #24]
 8006c24:	4619      	mov	r1, r3
 8006c26:	2208      	movs	r2, #8
 8006c28:	305c      	adds	r0, #92	; 0x5c
 8006c2a:	f7ff fc81 	bl	8006530 <memset>
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <std+0x38>)
 8006c30:	6263      	str	r3, [r4, #36]	; 0x24
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <std+0x3c>)
 8006c34:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c36:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <std+0x40>)
 8006c38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c3a:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <std+0x44>)
 8006c3c:	6224      	str	r4, [r4, #32]
 8006c3e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c40:	bd10      	pop	{r4, pc}
 8006c42:	bf00      	nop
 8006c44:	0800683d 	.word	0x0800683d
 8006c48:	0800685f 	.word	0x0800685f
 8006c4c:	08006897 	.word	0x08006897
 8006c50:	080068bb 	.word	0x080068bb

08006c54 <_cleanup_r>:
 8006c54:	4901      	ldr	r1, [pc, #4]	; (8006c5c <_cleanup_r+0x8>)
 8006c56:	f000 b8af 	b.w	8006db8 <_fwalk_reent>
 8006c5a:	bf00      	nop
 8006c5c:	08006b95 	.word	0x08006b95

08006c60 <__sfmoreglue>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	2268      	movs	r2, #104	; 0x68
 8006c64:	1e4d      	subs	r5, r1, #1
 8006c66:	4355      	muls	r5, r2
 8006c68:	460e      	mov	r6, r1
 8006c6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c6e:	f7ff fcd3 	bl	8006618 <_malloc_r>
 8006c72:	4604      	mov	r4, r0
 8006c74:	b140      	cbz	r0, 8006c88 <__sfmoreglue+0x28>
 8006c76:	2100      	movs	r1, #0
 8006c78:	e9c0 1600 	strd	r1, r6, [r0]
 8006c7c:	300c      	adds	r0, #12
 8006c7e:	60a0      	str	r0, [r4, #8]
 8006c80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c84:	f7ff fc54 	bl	8006530 <memset>
 8006c88:	4620      	mov	r0, r4
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}

08006c8c <__sfp_lock_acquire>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__sfp_lock_acquire+0x8>)
 8006c8e:	f000 b8b3 	b.w	8006df8 <__retarget_lock_acquire_recursive>
 8006c92:	bf00      	nop
 8006c94:	200009f9 	.word	0x200009f9

08006c98 <__sfp_lock_release>:
 8006c98:	4801      	ldr	r0, [pc, #4]	; (8006ca0 <__sfp_lock_release+0x8>)
 8006c9a:	f000 b8ae 	b.w	8006dfa <__retarget_lock_release_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	200009f9 	.word	0x200009f9

08006ca4 <__sinit_lock_acquire>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	; (8006cac <__sinit_lock_acquire+0x8>)
 8006ca6:	f000 b8a7 	b.w	8006df8 <__retarget_lock_acquire_recursive>
 8006caa:	bf00      	nop
 8006cac:	200009fa 	.word	0x200009fa

08006cb0 <__sinit_lock_release>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	; (8006cb8 <__sinit_lock_release+0x8>)
 8006cb2:	f000 b8a2 	b.w	8006dfa <__retarget_lock_release_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	200009fa 	.word	0x200009fa

08006cbc <__sinit>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	f7ff fff0 	bl	8006ca4 <__sinit_lock_acquire>
 8006cc4:	69a3      	ldr	r3, [r4, #24]
 8006cc6:	b11b      	cbz	r3, 8006cd0 <__sinit+0x14>
 8006cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ccc:	f7ff bff0 	b.w	8006cb0 <__sinit_lock_release>
 8006cd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cd4:	6523      	str	r3, [r4, #80]	; 0x50
 8006cd6:	4b13      	ldr	r3, [pc, #76]	; (8006d24 <__sinit+0x68>)
 8006cd8:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <__sinit+0x6c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	bf04      	itt	eq
 8006ce2:	2301      	moveq	r3, #1
 8006ce4:	61a3      	streq	r3, [r4, #24]
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 f820 	bl	8006d2c <__sfp>
 8006cec:	6060      	str	r0, [r4, #4]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 f81c 	bl	8006d2c <__sfp>
 8006cf4:	60a0      	str	r0, [r4, #8]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 f818 	bl	8006d2c <__sfp>
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	60e0      	str	r0, [r4, #12]
 8006d00:	2104      	movs	r1, #4
 8006d02:	6860      	ldr	r0, [r4, #4]
 8006d04:	f7ff ff82 	bl	8006c0c <std>
 8006d08:	68a0      	ldr	r0, [r4, #8]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	2109      	movs	r1, #9
 8006d0e:	f7ff ff7d 	bl	8006c0c <std>
 8006d12:	68e0      	ldr	r0, [r4, #12]
 8006d14:	2202      	movs	r2, #2
 8006d16:	2112      	movs	r1, #18
 8006d18:	f7ff ff78 	bl	8006c0c <std>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	61a3      	str	r3, [r4, #24]
 8006d20:	e7d2      	b.n	8006cc8 <__sinit+0xc>
 8006d22:	bf00      	nop
 8006d24:	080077c0 	.word	0x080077c0
 8006d28:	08006c55 	.word	0x08006c55

08006d2c <__sfp>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	4607      	mov	r7, r0
 8006d30:	f7ff ffac 	bl	8006c8c <__sfp_lock_acquire>
 8006d34:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <__sfp+0x84>)
 8006d36:	681e      	ldr	r6, [r3, #0]
 8006d38:	69b3      	ldr	r3, [r6, #24]
 8006d3a:	b913      	cbnz	r3, 8006d42 <__sfp+0x16>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7ff ffbd 	bl	8006cbc <__sinit>
 8006d42:	3648      	adds	r6, #72	; 0x48
 8006d44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	d503      	bpl.n	8006d54 <__sfp+0x28>
 8006d4c:	6833      	ldr	r3, [r6, #0]
 8006d4e:	b30b      	cbz	r3, 8006d94 <__sfp+0x68>
 8006d50:	6836      	ldr	r6, [r6, #0]
 8006d52:	e7f7      	b.n	8006d44 <__sfp+0x18>
 8006d54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d58:	b9d5      	cbnz	r5, 8006d90 <__sfp+0x64>
 8006d5a:	4b16      	ldr	r3, [pc, #88]	; (8006db4 <__sfp+0x88>)
 8006d5c:	60e3      	str	r3, [r4, #12]
 8006d5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d62:	6665      	str	r5, [r4, #100]	; 0x64
 8006d64:	f000 f847 	bl	8006df6 <__retarget_lock_init_recursive>
 8006d68:	f7ff ff96 	bl	8006c98 <__sfp_lock_release>
 8006d6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d74:	6025      	str	r5, [r4, #0]
 8006d76:	61a5      	str	r5, [r4, #24]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d80:	f7ff fbd6 	bl	8006530 <memset>
 8006d84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d90:	3468      	adds	r4, #104	; 0x68
 8006d92:	e7d9      	b.n	8006d48 <__sfp+0x1c>
 8006d94:	2104      	movs	r1, #4
 8006d96:	4638      	mov	r0, r7
 8006d98:	f7ff ff62 	bl	8006c60 <__sfmoreglue>
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	6030      	str	r0, [r6, #0]
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d1d5      	bne.n	8006d50 <__sfp+0x24>
 8006da4:	f7ff ff78 	bl	8006c98 <__sfp_lock_release>
 8006da8:	230c      	movs	r3, #12
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	e7ee      	b.n	8006d8c <__sfp+0x60>
 8006dae:	bf00      	nop
 8006db0:	080077c0 	.word	0x080077c0
 8006db4:	ffff0001 	.word	0xffff0001

08006db8 <_fwalk_reent>:
 8006db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dbc:	4606      	mov	r6, r0
 8006dbe:	4688      	mov	r8, r1
 8006dc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dc4:	2700      	movs	r7, #0
 8006dc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dca:	f1b9 0901 	subs.w	r9, r9, #1
 8006dce:	d505      	bpl.n	8006ddc <_fwalk_reent+0x24>
 8006dd0:	6824      	ldr	r4, [r4, #0]
 8006dd2:	2c00      	cmp	r4, #0
 8006dd4:	d1f7      	bne.n	8006dc6 <_fwalk_reent+0xe>
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ddc:	89ab      	ldrh	r3, [r5, #12]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d907      	bls.n	8006df2 <_fwalk_reent+0x3a>
 8006de2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006de6:	3301      	adds	r3, #1
 8006de8:	d003      	beq.n	8006df2 <_fwalk_reent+0x3a>
 8006dea:	4629      	mov	r1, r5
 8006dec:	4630      	mov	r0, r6
 8006dee:	47c0      	blx	r8
 8006df0:	4307      	orrs	r7, r0
 8006df2:	3568      	adds	r5, #104	; 0x68
 8006df4:	e7e9      	b.n	8006dca <_fwalk_reent+0x12>

08006df6 <__retarget_lock_init_recursive>:
 8006df6:	4770      	bx	lr

08006df8 <__retarget_lock_acquire_recursive>:
 8006df8:	4770      	bx	lr

08006dfa <__retarget_lock_release_recursive>:
 8006dfa:	4770      	bx	lr

08006dfc <_lseek_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	; (8006e1c <_lseek_r+0x20>)
 8006e00:	4604      	mov	r4, r0
 8006e02:	4608      	mov	r0, r1
 8006e04:	4611      	mov	r1, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f7fa f856 	bl	8000ebc <_lseek>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_lseek_r+0x1e>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_lseek_r+0x1e>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	200009fc 	.word	0x200009fc

08006e20 <__swhatbuf_r>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	460e      	mov	r6, r1
 8006e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	b096      	sub	sp, #88	; 0x58
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	461d      	mov	r5, r3
 8006e30:	da08      	bge.n	8006e44 <__swhatbuf_r+0x24>
 8006e32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	602a      	str	r2, [r5, #0]
 8006e3a:	061a      	lsls	r2, r3, #24
 8006e3c:	d410      	bmi.n	8006e60 <__swhatbuf_r+0x40>
 8006e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e42:	e00e      	b.n	8006e62 <__swhatbuf_r+0x42>
 8006e44:	466a      	mov	r2, sp
 8006e46:	f000 fb5d 	bl	8007504 <_fstat_r>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	dbf1      	blt.n	8006e32 <__swhatbuf_r+0x12>
 8006e4e:	9a01      	ldr	r2, [sp, #4]
 8006e50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e58:	425a      	negs	r2, r3
 8006e5a:	415a      	adcs	r2, r3
 8006e5c:	602a      	str	r2, [r5, #0]
 8006e5e:	e7ee      	b.n	8006e3e <__swhatbuf_r+0x1e>
 8006e60:	2340      	movs	r3, #64	; 0x40
 8006e62:	2000      	movs	r0, #0
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	b016      	add	sp, #88	; 0x58
 8006e68:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e6c <__smakebuf_r>:
 8006e6c:	898b      	ldrh	r3, [r1, #12]
 8006e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e70:	079d      	lsls	r5, r3, #30
 8006e72:	4606      	mov	r6, r0
 8006e74:	460c      	mov	r4, r1
 8006e76:	d507      	bpl.n	8006e88 <__smakebuf_r+0x1c>
 8006e78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	6123      	str	r3, [r4, #16]
 8006e80:	2301      	movs	r3, #1
 8006e82:	6163      	str	r3, [r4, #20]
 8006e84:	b002      	add	sp, #8
 8006e86:	bd70      	pop	{r4, r5, r6, pc}
 8006e88:	ab01      	add	r3, sp, #4
 8006e8a:	466a      	mov	r2, sp
 8006e8c:	f7ff ffc8 	bl	8006e20 <__swhatbuf_r>
 8006e90:	9900      	ldr	r1, [sp, #0]
 8006e92:	4605      	mov	r5, r0
 8006e94:	4630      	mov	r0, r6
 8006e96:	f7ff fbbf 	bl	8006618 <_malloc_r>
 8006e9a:	b948      	cbnz	r0, 8006eb0 <__smakebuf_r+0x44>
 8006e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ea0:	059a      	lsls	r2, r3, #22
 8006ea2:	d4ef      	bmi.n	8006e84 <__smakebuf_r+0x18>
 8006ea4:	f023 0303 	bic.w	r3, r3, #3
 8006ea8:	f043 0302 	orr.w	r3, r3, #2
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	e7e3      	b.n	8006e78 <__smakebuf_r+0xc>
 8006eb0:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <__smakebuf_r+0x7c>)
 8006eb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	6020      	str	r0, [r4, #0]
 8006eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ebc:	81a3      	strh	r3, [r4, #12]
 8006ebe:	9b00      	ldr	r3, [sp, #0]
 8006ec0:	6163      	str	r3, [r4, #20]
 8006ec2:	9b01      	ldr	r3, [sp, #4]
 8006ec4:	6120      	str	r0, [r4, #16]
 8006ec6:	b15b      	cbz	r3, 8006ee0 <__smakebuf_r+0x74>
 8006ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f000 fb2b 	bl	8007528 <_isatty_r>
 8006ed2:	b128      	cbz	r0, 8006ee0 <__smakebuf_r+0x74>
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	81a3      	strh	r3, [r4, #12]
 8006ee0:	89a0      	ldrh	r0, [r4, #12]
 8006ee2:	4305      	orrs	r5, r0
 8006ee4:	81a5      	strh	r5, [r4, #12]
 8006ee6:	e7cd      	b.n	8006e84 <__smakebuf_r+0x18>
 8006ee8:	08006c55 	.word	0x08006c55

08006eec <__malloc_lock>:
 8006eec:	4801      	ldr	r0, [pc, #4]	; (8006ef4 <__malloc_lock+0x8>)
 8006eee:	f7ff bf83 	b.w	8006df8 <__retarget_lock_acquire_recursive>
 8006ef2:	bf00      	nop
 8006ef4:	200009f8 	.word	0x200009f8

08006ef8 <__malloc_unlock>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	; (8006f00 <__malloc_unlock+0x8>)
 8006efa:	f7ff bf7e 	b.w	8006dfa <__retarget_lock_release_recursive>
 8006efe:	bf00      	nop
 8006f00:	200009f8 	.word	0x200009f8

08006f04 <__sfputc_r>:
 8006f04:	6893      	ldr	r3, [r2, #8]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	b410      	push	{r4}
 8006f0c:	6093      	str	r3, [r2, #8]
 8006f0e:	da08      	bge.n	8006f22 <__sfputc_r+0x1e>
 8006f10:	6994      	ldr	r4, [r2, #24]
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	db01      	blt.n	8006f1a <__sfputc_r+0x16>
 8006f16:	290a      	cmp	r1, #10
 8006f18:	d103      	bne.n	8006f22 <__sfputc_r+0x1e>
 8006f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f1e:	f7ff bcd1 	b.w	80068c4 <__swbuf_r>
 8006f22:	6813      	ldr	r3, [r2, #0]
 8006f24:	1c58      	adds	r0, r3, #1
 8006f26:	6010      	str	r0, [r2, #0]
 8006f28:	7019      	strb	r1, [r3, #0]
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <__sfputs_r>:
 8006f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f34:	4606      	mov	r6, r0
 8006f36:	460f      	mov	r7, r1
 8006f38:	4614      	mov	r4, r2
 8006f3a:	18d5      	adds	r5, r2, r3
 8006f3c:	42ac      	cmp	r4, r5
 8006f3e:	d101      	bne.n	8006f44 <__sfputs_r+0x12>
 8006f40:	2000      	movs	r0, #0
 8006f42:	e007      	b.n	8006f54 <__sfputs_r+0x22>
 8006f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f48:	463a      	mov	r2, r7
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7ff ffda 	bl	8006f04 <__sfputc_r>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d1f3      	bne.n	8006f3c <__sfputs_r+0xa>
 8006f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f58 <_vfiprintf_r>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	460d      	mov	r5, r1
 8006f5e:	b09d      	sub	sp, #116	; 0x74
 8006f60:	4614      	mov	r4, r2
 8006f62:	4698      	mov	r8, r3
 8006f64:	4606      	mov	r6, r0
 8006f66:	b118      	cbz	r0, 8006f70 <_vfiprintf_r+0x18>
 8006f68:	6983      	ldr	r3, [r0, #24]
 8006f6a:	b90b      	cbnz	r3, 8006f70 <_vfiprintf_r+0x18>
 8006f6c:	f7ff fea6 	bl	8006cbc <__sinit>
 8006f70:	4b89      	ldr	r3, [pc, #548]	; (8007198 <_vfiprintf_r+0x240>)
 8006f72:	429d      	cmp	r5, r3
 8006f74:	d11b      	bne.n	8006fae <_vfiprintf_r+0x56>
 8006f76:	6875      	ldr	r5, [r6, #4]
 8006f78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f7a:	07d9      	lsls	r1, r3, #31
 8006f7c:	d405      	bmi.n	8006f8a <_vfiprintf_r+0x32>
 8006f7e:	89ab      	ldrh	r3, [r5, #12]
 8006f80:	059a      	lsls	r2, r3, #22
 8006f82:	d402      	bmi.n	8006f8a <_vfiprintf_r+0x32>
 8006f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f86:	f7ff ff37 	bl	8006df8 <__retarget_lock_acquire_recursive>
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	071b      	lsls	r3, r3, #28
 8006f8e:	d501      	bpl.n	8006f94 <_vfiprintf_r+0x3c>
 8006f90:	692b      	ldr	r3, [r5, #16]
 8006f92:	b9eb      	cbnz	r3, 8006fd0 <_vfiprintf_r+0x78>
 8006f94:	4629      	mov	r1, r5
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff fcf8 	bl	800698c <__swsetup_r>
 8006f9c:	b1c0      	cbz	r0, 8006fd0 <_vfiprintf_r+0x78>
 8006f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa0:	07dc      	lsls	r4, r3, #31
 8006fa2:	d50e      	bpl.n	8006fc2 <_vfiprintf_r+0x6a>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	b01d      	add	sp, #116	; 0x74
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	4b7b      	ldr	r3, [pc, #492]	; (800719c <_vfiprintf_r+0x244>)
 8006fb0:	429d      	cmp	r5, r3
 8006fb2:	d101      	bne.n	8006fb8 <_vfiprintf_r+0x60>
 8006fb4:	68b5      	ldr	r5, [r6, #8]
 8006fb6:	e7df      	b.n	8006f78 <_vfiprintf_r+0x20>
 8006fb8:	4b79      	ldr	r3, [pc, #484]	; (80071a0 <_vfiprintf_r+0x248>)
 8006fba:	429d      	cmp	r5, r3
 8006fbc:	bf08      	it	eq
 8006fbe:	68f5      	ldreq	r5, [r6, #12]
 8006fc0:	e7da      	b.n	8006f78 <_vfiprintf_r+0x20>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	0598      	lsls	r0, r3, #22
 8006fc6:	d4ed      	bmi.n	8006fa4 <_vfiprintf_r+0x4c>
 8006fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fca:	f7ff ff16 	bl	8006dfa <__retarget_lock_release_recursive>
 8006fce:	e7e9      	b.n	8006fa4 <_vfiprintf_r+0x4c>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fde:	2330      	movs	r3, #48	; 0x30
 8006fe0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071a4 <_vfiprintf_r+0x24c>
 8006fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fe8:	f04f 0901 	mov.w	r9, #1
 8006fec:	4623      	mov	r3, r4
 8006fee:	469a      	mov	sl, r3
 8006ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff4:	b10a      	cbz	r2, 8006ffa <_vfiprintf_r+0xa2>
 8006ff6:	2a25      	cmp	r2, #37	; 0x25
 8006ff8:	d1f9      	bne.n	8006fee <_vfiprintf_r+0x96>
 8006ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8006ffe:	d00b      	beq.n	8007018 <_vfiprintf_r+0xc0>
 8007000:	465b      	mov	r3, fp
 8007002:	4622      	mov	r2, r4
 8007004:	4629      	mov	r1, r5
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ff93 	bl	8006f32 <__sfputs_r>
 800700c:	3001      	adds	r0, #1
 800700e:	f000 80aa 	beq.w	8007166 <_vfiprintf_r+0x20e>
 8007012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007014:	445a      	add	r2, fp
 8007016:	9209      	str	r2, [sp, #36]	; 0x24
 8007018:	f89a 3000 	ldrb.w	r3, [sl]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80a2 	beq.w	8007166 <_vfiprintf_r+0x20e>
 8007022:	2300      	movs	r3, #0
 8007024:	f04f 32ff 	mov.w	r2, #4294967295
 8007028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800702c:	f10a 0a01 	add.w	sl, sl, #1
 8007030:	9304      	str	r3, [sp, #16]
 8007032:	9307      	str	r3, [sp, #28]
 8007034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007038:	931a      	str	r3, [sp, #104]	; 0x68
 800703a:	4654      	mov	r4, sl
 800703c:	2205      	movs	r2, #5
 800703e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007042:	4858      	ldr	r0, [pc, #352]	; (80071a4 <_vfiprintf_r+0x24c>)
 8007044:	f7f9 f8d4 	bl	80001f0 <memchr>
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	b9d8      	cbnz	r0, 8007084 <_vfiprintf_r+0x12c>
 800704c:	06d1      	lsls	r1, r2, #27
 800704e:	bf44      	itt	mi
 8007050:	2320      	movmi	r3, #32
 8007052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007056:	0713      	lsls	r3, r2, #28
 8007058:	bf44      	itt	mi
 800705a:	232b      	movmi	r3, #43	; 0x2b
 800705c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007060:	f89a 3000 	ldrb.w	r3, [sl]
 8007064:	2b2a      	cmp	r3, #42	; 0x2a
 8007066:	d015      	beq.n	8007094 <_vfiprintf_r+0x13c>
 8007068:	9a07      	ldr	r2, [sp, #28]
 800706a:	4654      	mov	r4, sl
 800706c:	2000      	movs	r0, #0
 800706e:	f04f 0c0a 	mov.w	ip, #10
 8007072:	4621      	mov	r1, r4
 8007074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007078:	3b30      	subs	r3, #48	; 0x30
 800707a:	2b09      	cmp	r3, #9
 800707c:	d94e      	bls.n	800711c <_vfiprintf_r+0x1c4>
 800707e:	b1b0      	cbz	r0, 80070ae <_vfiprintf_r+0x156>
 8007080:	9207      	str	r2, [sp, #28]
 8007082:	e014      	b.n	80070ae <_vfiprintf_r+0x156>
 8007084:	eba0 0308 	sub.w	r3, r0, r8
 8007088:	fa09 f303 	lsl.w	r3, r9, r3
 800708c:	4313      	orrs	r3, r2
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	46a2      	mov	sl, r4
 8007092:	e7d2      	b.n	800703a <_vfiprintf_r+0xe2>
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	1d19      	adds	r1, r3, #4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	9103      	str	r1, [sp, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	bfbb      	ittet	lt
 80070a0:	425b      	neglt	r3, r3
 80070a2:	f042 0202 	orrlt.w	r2, r2, #2
 80070a6:	9307      	strge	r3, [sp, #28]
 80070a8:	9307      	strlt	r3, [sp, #28]
 80070aa:	bfb8      	it	lt
 80070ac:	9204      	strlt	r2, [sp, #16]
 80070ae:	7823      	ldrb	r3, [r4, #0]
 80070b0:	2b2e      	cmp	r3, #46	; 0x2e
 80070b2:	d10c      	bne.n	80070ce <_vfiprintf_r+0x176>
 80070b4:	7863      	ldrb	r3, [r4, #1]
 80070b6:	2b2a      	cmp	r3, #42	; 0x2a
 80070b8:	d135      	bne.n	8007126 <_vfiprintf_r+0x1ce>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	1d1a      	adds	r2, r3, #4
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	9203      	str	r2, [sp, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bfb8      	it	lt
 80070c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80070ca:	3402      	adds	r4, #2
 80070cc:	9305      	str	r3, [sp, #20]
 80070ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071b4 <_vfiprintf_r+0x25c>
 80070d2:	7821      	ldrb	r1, [r4, #0]
 80070d4:	2203      	movs	r2, #3
 80070d6:	4650      	mov	r0, sl
 80070d8:	f7f9 f88a 	bl	80001f0 <memchr>
 80070dc:	b140      	cbz	r0, 80070f0 <_vfiprintf_r+0x198>
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	eba0 000a 	sub.w	r0, r0, sl
 80070e4:	fa03 f000 	lsl.w	r0, r3, r0
 80070e8:	9b04      	ldr	r3, [sp, #16]
 80070ea:	4303      	orrs	r3, r0
 80070ec:	3401      	adds	r4, #1
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f4:	482c      	ldr	r0, [pc, #176]	; (80071a8 <_vfiprintf_r+0x250>)
 80070f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070fa:	2206      	movs	r2, #6
 80070fc:	f7f9 f878 	bl	80001f0 <memchr>
 8007100:	2800      	cmp	r0, #0
 8007102:	d03f      	beq.n	8007184 <_vfiprintf_r+0x22c>
 8007104:	4b29      	ldr	r3, [pc, #164]	; (80071ac <_vfiprintf_r+0x254>)
 8007106:	bb1b      	cbnz	r3, 8007150 <_vfiprintf_r+0x1f8>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	3307      	adds	r3, #7
 800710c:	f023 0307 	bic.w	r3, r3, #7
 8007110:	3308      	adds	r3, #8
 8007112:	9303      	str	r3, [sp, #12]
 8007114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007116:	443b      	add	r3, r7
 8007118:	9309      	str	r3, [sp, #36]	; 0x24
 800711a:	e767      	b.n	8006fec <_vfiprintf_r+0x94>
 800711c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007120:	460c      	mov	r4, r1
 8007122:	2001      	movs	r0, #1
 8007124:	e7a5      	b.n	8007072 <_vfiprintf_r+0x11a>
 8007126:	2300      	movs	r3, #0
 8007128:	3401      	adds	r4, #1
 800712a:	9305      	str	r3, [sp, #20]
 800712c:	4619      	mov	r1, r3
 800712e:	f04f 0c0a 	mov.w	ip, #10
 8007132:	4620      	mov	r0, r4
 8007134:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007138:	3a30      	subs	r2, #48	; 0x30
 800713a:	2a09      	cmp	r2, #9
 800713c:	d903      	bls.n	8007146 <_vfiprintf_r+0x1ee>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0c5      	beq.n	80070ce <_vfiprintf_r+0x176>
 8007142:	9105      	str	r1, [sp, #20]
 8007144:	e7c3      	b.n	80070ce <_vfiprintf_r+0x176>
 8007146:	fb0c 2101 	mla	r1, ip, r1, r2
 800714a:	4604      	mov	r4, r0
 800714c:	2301      	movs	r3, #1
 800714e:	e7f0      	b.n	8007132 <_vfiprintf_r+0x1da>
 8007150:	ab03      	add	r3, sp, #12
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	462a      	mov	r2, r5
 8007156:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <_vfiprintf_r+0x258>)
 8007158:	a904      	add	r1, sp, #16
 800715a:	4630      	mov	r0, r6
 800715c:	f3af 8000 	nop.w
 8007160:	4607      	mov	r7, r0
 8007162:	1c78      	adds	r0, r7, #1
 8007164:	d1d6      	bne.n	8007114 <_vfiprintf_r+0x1bc>
 8007166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007168:	07d9      	lsls	r1, r3, #31
 800716a:	d405      	bmi.n	8007178 <_vfiprintf_r+0x220>
 800716c:	89ab      	ldrh	r3, [r5, #12]
 800716e:	059a      	lsls	r2, r3, #22
 8007170:	d402      	bmi.n	8007178 <_vfiprintf_r+0x220>
 8007172:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007174:	f7ff fe41 	bl	8006dfa <__retarget_lock_release_recursive>
 8007178:	89ab      	ldrh	r3, [r5, #12]
 800717a:	065b      	lsls	r3, r3, #25
 800717c:	f53f af12 	bmi.w	8006fa4 <_vfiprintf_r+0x4c>
 8007180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007182:	e711      	b.n	8006fa8 <_vfiprintf_r+0x50>
 8007184:	ab03      	add	r3, sp, #12
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	462a      	mov	r2, r5
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <_vfiprintf_r+0x258>)
 800718c:	a904      	add	r1, sp, #16
 800718e:	4630      	mov	r0, r6
 8007190:	f000 f880 	bl	8007294 <_printf_i>
 8007194:	e7e4      	b.n	8007160 <_vfiprintf_r+0x208>
 8007196:	bf00      	nop
 8007198:	080077e4 	.word	0x080077e4
 800719c:	08007804 	.word	0x08007804
 80071a0:	080077c4 	.word	0x080077c4
 80071a4:	08007824 	.word	0x08007824
 80071a8:	0800782e 	.word	0x0800782e
 80071ac:	00000000 	.word	0x00000000
 80071b0:	08006f33 	.word	0x08006f33
 80071b4:	0800782a 	.word	0x0800782a

080071b8 <_printf_common>:
 80071b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071bc:	4616      	mov	r6, r2
 80071be:	4699      	mov	r9, r3
 80071c0:	688a      	ldr	r2, [r1, #8]
 80071c2:	690b      	ldr	r3, [r1, #16]
 80071c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	bfb8      	it	lt
 80071cc:	4613      	movlt	r3, r2
 80071ce:	6033      	str	r3, [r6, #0]
 80071d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071d4:	4607      	mov	r7, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	b10a      	cbz	r2, 80071de <_printf_common+0x26>
 80071da:	3301      	adds	r3, #1
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	0699      	lsls	r1, r3, #26
 80071e2:	bf42      	ittt	mi
 80071e4:	6833      	ldrmi	r3, [r6, #0]
 80071e6:	3302      	addmi	r3, #2
 80071e8:	6033      	strmi	r3, [r6, #0]
 80071ea:	6825      	ldr	r5, [r4, #0]
 80071ec:	f015 0506 	ands.w	r5, r5, #6
 80071f0:	d106      	bne.n	8007200 <_printf_common+0x48>
 80071f2:	f104 0a19 	add.w	sl, r4, #25
 80071f6:	68e3      	ldr	r3, [r4, #12]
 80071f8:	6832      	ldr	r2, [r6, #0]
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	42ab      	cmp	r3, r5
 80071fe:	dc26      	bgt.n	800724e <_printf_common+0x96>
 8007200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007204:	1e13      	subs	r3, r2, #0
 8007206:	6822      	ldr	r2, [r4, #0]
 8007208:	bf18      	it	ne
 800720a:	2301      	movne	r3, #1
 800720c:	0692      	lsls	r2, r2, #26
 800720e:	d42b      	bmi.n	8007268 <_printf_common+0xb0>
 8007210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007214:	4649      	mov	r1, r9
 8007216:	4638      	mov	r0, r7
 8007218:	47c0      	blx	r8
 800721a:	3001      	adds	r0, #1
 800721c:	d01e      	beq.n	800725c <_printf_common+0xa4>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	68e5      	ldr	r5, [r4, #12]
 8007222:	6832      	ldr	r2, [r6, #0]
 8007224:	f003 0306 	and.w	r3, r3, #6
 8007228:	2b04      	cmp	r3, #4
 800722a:	bf08      	it	eq
 800722c:	1aad      	subeq	r5, r5, r2
 800722e:	68a3      	ldr	r3, [r4, #8]
 8007230:	6922      	ldr	r2, [r4, #16]
 8007232:	bf0c      	ite	eq
 8007234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007238:	2500      	movne	r5, #0
 800723a:	4293      	cmp	r3, r2
 800723c:	bfc4      	itt	gt
 800723e:	1a9b      	subgt	r3, r3, r2
 8007240:	18ed      	addgt	r5, r5, r3
 8007242:	2600      	movs	r6, #0
 8007244:	341a      	adds	r4, #26
 8007246:	42b5      	cmp	r5, r6
 8007248:	d11a      	bne.n	8007280 <_printf_common+0xc8>
 800724a:	2000      	movs	r0, #0
 800724c:	e008      	b.n	8007260 <_printf_common+0xa8>
 800724e:	2301      	movs	r3, #1
 8007250:	4652      	mov	r2, sl
 8007252:	4649      	mov	r1, r9
 8007254:	4638      	mov	r0, r7
 8007256:	47c0      	blx	r8
 8007258:	3001      	adds	r0, #1
 800725a:	d103      	bne.n	8007264 <_printf_common+0xac>
 800725c:	f04f 30ff 	mov.w	r0, #4294967295
 8007260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007264:	3501      	adds	r5, #1
 8007266:	e7c6      	b.n	80071f6 <_printf_common+0x3e>
 8007268:	18e1      	adds	r1, r4, r3
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	2030      	movs	r0, #48	; 0x30
 800726e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007272:	4422      	add	r2, r4
 8007274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800727c:	3302      	adds	r3, #2
 800727e:	e7c7      	b.n	8007210 <_printf_common+0x58>
 8007280:	2301      	movs	r3, #1
 8007282:	4622      	mov	r2, r4
 8007284:	4649      	mov	r1, r9
 8007286:	4638      	mov	r0, r7
 8007288:	47c0      	blx	r8
 800728a:	3001      	adds	r0, #1
 800728c:	d0e6      	beq.n	800725c <_printf_common+0xa4>
 800728e:	3601      	adds	r6, #1
 8007290:	e7d9      	b.n	8007246 <_printf_common+0x8e>
	...

08007294 <_printf_i>:
 8007294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	7e0f      	ldrb	r7, [r1, #24]
 800729a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800729c:	2f78      	cmp	r7, #120	; 0x78
 800729e:	4691      	mov	r9, r2
 80072a0:	4680      	mov	r8, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	469a      	mov	sl, r3
 80072a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072aa:	d807      	bhi.n	80072bc <_printf_i+0x28>
 80072ac:	2f62      	cmp	r7, #98	; 0x62
 80072ae:	d80a      	bhi.n	80072c6 <_printf_i+0x32>
 80072b0:	2f00      	cmp	r7, #0
 80072b2:	f000 80d8 	beq.w	8007466 <_printf_i+0x1d2>
 80072b6:	2f58      	cmp	r7, #88	; 0x58
 80072b8:	f000 80a3 	beq.w	8007402 <_printf_i+0x16e>
 80072bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072c4:	e03a      	b.n	800733c <_printf_i+0xa8>
 80072c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072ca:	2b15      	cmp	r3, #21
 80072cc:	d8f6      	bhi.n	80072bc <_printf_i+0x28>
 80072ce:	a101      	add	r1, pc, #4	; (adr r1, 80072d4 <_printf_i+0x40>)
 80072d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072d4:	0800732d 	.word	0x0800732d
 80072d8:	08007341 	.word	0x08007341
 80072dc:	080072bd 	.word	0x080072bd
 80072e0:	080072bd 	.word	0x080072bd
 80072e4:	080072bd 	.word	0x080072bd
 80072e8:	080072bd 	.word	0x080072bd
 80072ec:	08007341 	.word	0x08007341
 80072f0:	080072bd 	.word	0x080072bd
 80072f4:	080072bd 	.word	0x080072bd
 80072f8:	080072bd 	.word	0x080072bd
 80072fc:	080072bd 	.word	0x080072bd
 8007300:	0800744d 	.word	0x0800744d
 8007304:	08007371 	.word	0x08007371
 8007308:	0800742f 	.word	0x0800742f
 800730c:	080072bd 	.word	0x080072bd
 8007310:	080072bd 	.word	0x080072bd
 8007314:	0800746f 	.word	0x0800746f
 8007318:	080072bd 	.word	0x080072bd
 800731c:	08007371 	.word	0x08007371
 8007320:	080072bd 	.word	0x080072bd
 8007324:	080072bd 	.word	0x080072bd
 8007328:	08007437 	.word	0x08007437
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	1d1a      	adds	r2, r3, #4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	602a      	str	r2, [r5, #0]
 8007334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800733c:	2301      	movs	r3, #1
 800733e:	e0a3      	b.n	8007488 <_printf_i+0x1f4>
 8007340:	6820      	ldr	r0, [r4, #0]
 8007342:	6829      	ldr	r1, [r5, #0]
 8007344:	0606      	lsls	r6, r0, #24
 8007346:	f101 0304 	add.w	r3, r1, #4
 800734a:	d50a      	bpl.n	8007362 <_printf_i+0xce>
 800734c:	680e      	ldr	r6, [r1, #0]
 800734e:	602b      	str	r3, [r5, #0]
 8007350:	2e00      	cmp	r6, #0
 8007352:	da03      	bge.n	800735c <_printf_i+0xc8>
 8007354:	232d      	movs	r3, #45	; 0x2d
 8007356:	4276      	negs	r6, r6
 8007358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800735c:	485e      	ldr	r0, [pc, #376]	; (80074d8 <_printf_i+0x244>)
 800735e:	230a      	movs	r3, #10
 8007360:	e019      	b.n	8007396 <_printf_i+0x102>
 8007362:	680e      	ldr	r6, [r1, #0]
 8007364:	602b      	str	r3, [r5, #0]
 8007366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800736a:	bf18      	it	ne
 800736c:	b236      	sxthne	r6, r6
 800736e:	e7ef      	b.n	8007350 <_printf_i+0xbc>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	6820      	ldr	r0, [r4, #0]
 8007374:	1d19      	adds	r1, r3, #4
 8007376:	6029      	str	r1, [r5, #0]
 8007378:	0601      	lsls	r1, r0, #24
 800737a:	d501      	bpl.n	8007380 <_printf_i+0xec>
 800737c:	681e      	ldr	r6, [r3, #0]
 800737e:	e002      	b.n	8007386 <_printf_i+0xf2>
 8007380:	0646      	lsls	r6, r0, #25
 8007382:	d5fb      	bpl.n	800737c <_printf_i+0xe8>
 8007384:	881e      	ldrh	r6, [r3, #0]
 8007386:	4854      	ldr	r0, [pc, #336]	; (80074d8 <_printf_i+0x244>)
 8007388:	2f6f      	cmp	r7, #111	; 0x6f
 800738a:	bf0c      	ite	eq
 800738c:	2308      	moveq	r3, #8
 800738e:	230a      	movne	r3, #10
 8007390:	2100      	movs	r1, #0
 8007392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007396:	6865      	ldr	r5, [r4, #4]
 8007398:	60a5      	str	r5, [r4, #8]
 800739a:	2d00      	cmp	r5, #0
 800739c:	bfa2      	ittt	ge
 800739e:	6821      	ldrge	r1, [r4, #0]
 80073a0:	f021 0104 	bicge.w	r1, r1, #4
 80073a4:	6021      	strge	r1, [r4, #0]
 80073a6:	b90e      	cbnz	r6, 80073ac <_printf_i+0x118>
 80073a8:	2d00      	cmp	r5, #0
 80073aa:	d04d      	beq.n	8007448 <_printf_i+0x1b4>
 80073ac:	4615      	mov	r5, r2
 80073ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80073b2:	fb03 6711 	mls	r7, r3, r1, r6
 80073b6:	5dc7      	ldrb	r7, [r0, r7]
 80073b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073bc:	4637      	mov	r7, r6
 80073be:	42bb      	cmp	r3, r7
 80073c0:	460e      	mov	r6, r1
 80073c2:	d9f4      	bls.n	80073ae <_printf_i+0x11a>
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d10b      	bne.n	80073e0 <_printf_i+0x14c>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	07de      	lsls	r6, r3, #31
 80073cc:	d508      	bpl.n	80073e0 <_printf_i+0x14c>
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	6861      	ldr	r1, [r4, #4]
 80073d2:	4299      	cmp	r1, r3
 80073d4:	bfde      	ittt	le
 80073d6:	2330      	movle	r3, #48	; 0x30
 80073d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073e0:	1b52      	subs	r2, r2, r5
 80073e2:	6122      	str	r2, [r4, #16]
 80073e4:	f8cd a000 	str.w	sl, [sp]
 80073e8:	464b      	mov	r3, r9
 80073ea:	aa03      	add	r2, sp, #12
 80073ec:	4621      	mov	r1, r4
 80073ee:	4640      	mov	r0, r8
 80073f0:	f7ff fee2 	bl	80071b8 <_printf_common>
 80073f4:	3001      	adds	r0, #1
 80073f6:	d14c      	bne.n	8007492 <_printf_i+0x1fe>
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	b004      	add	sp, #16
 80073fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007402:	4835      	ldr	r0, [pc, #212]	; (80074d8 <_printf_i+0x244>)
 8007404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007408:	6829      	ldr	r1, [r5, #0]
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007410:	6029      	str	r1, [r5, #0]
 8007412:	061d      	lsls	r5, r3, #24
 8007414:	d514      	bpl.n	8007440 <_printf_i+0x1ac>
 8007416:	07df      	lsls	r7, r3, #31
 8007418:	bf44      	itt	mi
 800741a:	f043 0320 	orrmi.w	r3, r3, #32
 800741e:	6023      	strmi	r3, [r4, #0]
 8007420:	b91e      	cbnz	r6, 800742a <_printf_i+0x196>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	f023 0320 	bic.w	r3, r3, #32
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	2310      	movs	r3, #16
 800742c:	e7b0      	b.n	8007390 <_printf_i+0xfc>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	f043 0320 	orr.w	r3, r3, #32
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	2378      	movs	r3, #120	; 0x78
 8007438:	4828      	ldr	r0, [pc, #160]	; (80074dc <_printf_i+0x248>)
 800743a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800743e:	e7e3      	b.n	8007408 <_printf_i+0x174>
 8007440:	0659      	lsls	r1, r3, #25
 8007442:	bf48      	it	mi
 8007444:	b2b6      	uxthmi	r6, r6
 8007446:	e7e6      	b.n	8007416 <_printf_i+0x182>
 8007448:	4615      	mov	r5, r2
 800744a:	e7bb      	b.n	80073c4 <_printf_i+0x130>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	6826      	ldr	r6, [r4, #0]
 8007450:	6961      	ldr	r1, [r4, #20]
 8007452:	1d18      	adds	r0, r3, #4
 8007454:	6028      	str	r0, [r5, #0]
 8007456:	0635      	lsls	r5, r6, #24
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	d501      	bpl.n	8007460 <_printf_i+0x1cc>
 800745c:	6019      	str	r1, [r3, #0]
 800745e:	e002      	b.n	8007466 <_printf_i+0x1d2>
 8007460:	0670      	lsls	r0, r6, #25
 8007462:	d5fb      	bpl.n	800745c <_printf_i+0x1c8>
 8007464:	8019      	strh	r1, [r3, #0]
 8007466:	2300      	movs	r3, #0
 8007468:	6123      	str	r3, [r4, #16]
 800746a:	4615      	mov	r5, r2
 800746c:	e7ba      	b.n	80073e4 <_printf_i+0x150>
 800746e:	682b      	ldr	r3, [r5, #0]
 8007470:	1d1a      	adds	r2, r3, #4
 8007472:	602a      	str	r2, [r5, #0]
 8007474:	681d      	ldr	r5, [r3, #0]
 8007476:	6862      	ldr	r2, [r4, #4]
 8007478:	2100      	movs	r1, #0
 800747a:	4628      	mov	r0, r5
 800747c:	f7f8 feb8 	bl	80001f0 <memchr>
 8007480:	b108      	cbz	r0, 8007486 <_printf_i+0x1f2>
 8007482:	1b40      	subs	r0, r0, r5
 8007484:	6060      	str	r0, [r4, #4]
 8007486:	6863      	ldr	r3, [r4, #4]
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	2300      	movs	r3, #0
 800748c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007490:	e7a8      	b.n	80073e4 <_printf_i+0x150>
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	462a      	mov	r2, r5
 8007496:	4649      	mov	r1, r9
 8007498:	4640      	mov	r0, r8
 800749a:	47d0      	blx	sl
 800749c:	3001      	adds	r0, #1
 800749e:	d0ab      	beq.n	80073f8 <_printf_i+0x164>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	079b      	lsls	r3, r3, #30
 80074a4:	d413      	bmi.n	80074ce <_printf_i+0x23a>
 80074a6:	68e0      	ldr	r0, [r4, #12]
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	4298      	cmp	r0, r3
 80074ac:	bfb8      	it	lt
 80074ae:	4618      	movlt	r0, r3
 80074b0:	e7a4      	b.n	80073fc <_printf_i+0x168>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4632      	mov	r2, r6
 80074b6:	4649      	mov	r1, r9
 80074b8:	4640      	mov	r0, r8
 80074ba:	47d0      	blx	sl
 80074bc:	3001      	adds	r0, #1
 80074be:	d09b      	beq.n	80073f8 <_printf_i+0x164>
 80074c0:	3501      	adds	r5, #1
 80074c2:	68e3      	ldr	r3, [r4, #12]
 80074c4:	9903      	ldr	r1, [sp, #12]
 80074c6:	1a5b      	subs	r3, r3, r1
 80074c8:	42ab      	cmp	r3, r5
 80074ca:	dcf2      	bgt.n	80074b2 <_printf_i+0x21e>
 80074cc:	e7eb      	b.n	80074a6 <_printf_i+0x212>
 80074ce:	2500      	movs	r5, #0
 80074d0:	f104 0619 	add.w	r6, r4, #25
 80074d4:	e7f5      	b.n	80074c2 <_printf_i+0x22e>
 80074d6:	bf00      	nop
 80074d8:	08007835 	.word	0x08007835
 80074dc:	08007846 	.word	0x08007846

080074e0 <_read_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d07      	ldr	r5, [pc, #28]	; (8007500 <_read_r+0x20>)
 80074e4:	4604      	mov	r4, r0
 80074e6:	4608      	mov	r0, r1
 80074e8:	4611      	mov	r1, r2
 80074ea:	2200      	movs	r2, #0
 80074ec:	602a      	str	r2, [r5, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f7f9 fca0 	bl	8000e34 <_read>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_read_r+0x1e>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_read_r+0x1e>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	200009fc 	.word	0x200009fc

08007504 <_fstat_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4d07      	ldr	r5, [pc, #28]	; (8007524 <_fstat_r+0x20>)
 8007508:	2300      	movs	r3, #0
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	4611      	mov	r1, r2
 8007510:	602b      	str	r3, [r5, #0]
 8007512:	f7f9 fcb8 	bl	8000e86 <_fstat>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	d102      	bne.n	8007520 <_fstat_r+0x1c>
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	b103      	cbz	r3, 8007520 <_fstat_r+0x1c>
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	bd38      	pop	{r3, r4, r5, pc}
 8007522:	bf00      	nop
 8007524:	200009fc 	.word	0x200009fc

08007528 <_isatty_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d06      	ldr	r5, [pc, #24]	; (8007544 <_isatty_r+0x1c>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7f9 fcb7 	bl	8000ea6 <_isatty>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_isatty_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_isatty_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	200009fc 	.word	0x200009fc

08007548 <_init>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	bf00      	nop
 800754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754e:	bc08      	pop	{r3}
 8007550:	469e      	mov	lr, r3
 8007552:	4770      	bx	lr

08007554 <_fini>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	bf00      	nop
 8007558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755a:	bc08      	pop	{r3}
 800755c:	469e      	mov	lr, r3
 800755e:	4770      	bx	lr
