
L496_W5300_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac0  08007ac0  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac8  08007ac8  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08007ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001188  200000dc  08007bac  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001264  08007bac  00021264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011021  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b27  00000000  00000000  0003112d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00033c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00034ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0e8  00000000  00000000  00035818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132d0  00000000  00000000  00060900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100abe  00000000  00000000  00073bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017468e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  001746e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800777c 	.word	0x0800777c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	0800777c 	.word	0x0800777c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:
static void MX_FMC_Init(void);
/* USER CODE BEGIN PFP */
uint8_t rxData[2];

int _write(int fd, char *str, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	e00b      	b.n	80005be <_write+0x2a>
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	18d1      	adds	r1, r2, r3
 80005ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b0:	2201      	movs	r2, #1
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <_write+0x3c>)
 80005b4:	f002 fd6e 	bl	8003094 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dbef      	blt.n	80005a6 <_write+0x12>
	}
	return len;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000f8 	.word	0x200000f8

080005d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    */

     /*
       loop back received data
     */
     HAL_UART_Receive_IT(&hlpuart1, rxData, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4907      	ldr	r1, [pc, #28]	; (80005fc <HAL_UART_RxCpltCallback+0x28>)
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <HAL_UART_RxCpltCallback+0x2c>)
 80005e2:	f002 fdeb 	bl	80031bc <HAL_UART_Receive_IT>
     HAL_UART_Transmit(&hlpuart1, rxData, 1, 1000);
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	2201      	movs	r2, #1
 80005ec:	4903      	ldr	r1, [pc, #12]	; (80005fc <HAL_UART_RxCpltCallback+0x28>)
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <HAL_UART_RxCpltCallback+0x2c>)
 80005f0:	f002 fd50 	bl	8003094 <HAL_UART_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000121c 	.word	0x2000121c
 8000600:	200000f8 	.word	0x200000f8

08000604 <Reset_W5300>:
void Reset_W5300()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <Reset_W5300+0x2c>)
 800060e:	f001 f917 	bl	8001840 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fdce 	bl	80011b4 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <Reset_W5300+0x2c>)
 800061e:	f001 f90f 	bl	8001840 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000626:	f000 fdc5 	bl	80011b4 <HAL_Delay>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	48001400 	.word	0x48001400

08000634 <print_network_information>:
void W5300CsDisable(void)
{

}
void print_network_information(void)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af04      	add	r7, sp, #16
    wizchip_getnetinfo(W5300_BANK_ADDR1, &gWIZNETINFO);
 800063a:	4960      	ldr	r1, [pc, #384]	; (80007bc <print_network_information+0x188>)
 800063c:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000640:	f005 ff3c 	bl	80064bc <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000644:	4b5d      	ldr	r3, [pc, #372]	; (80007bc <print_network_information+0x188>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	4b5c      	ldr	r3, [pc, #368]	; (80007bc <print_network_information+0x188>)
 800064c:	785b      	ldrb	r3, [r3, #1]
 800064e:	461c      	mov	r4, r3
 8000650:	4b5a      	ldr	r3, [pc, #360]	; (80007bc <print_network_information+0x188>)
 8000652:	789b      	ldrb	r3, [r3, #2]
 8000654:	461d      	mov	r5, r3
 8000656:	4b59      	ldr	r3, [pc, #356]	; (80007bc <print_network_information+0x188>)
 8000658:	78db      	ldrb	r3, [r3, #3]
 800065a:	461a      	mov	r2, r3
 800065c:	4b57      	ldr	r3, [pc, #348]	; (80007bc <print_network_information+0x188>)
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	4619      	mov	r1, r3
 8000662:	4b56      	ldr	r3, [pc, #344]	; (80007bc <print_network_information+0x188>)
 8000664:	795b      	ldrb	r3, [r3, #5]
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	9101      	str	r1, [sp, #4]
 800066a:	9200      	str	r2, [sp, #0]
 800066c:	462b      	mov	r3, r5
 800066e:	4622      	mov	r2, r4
 8000670:	4601      	mov	r1, r0
 8000672:	4853      	ldr	r0, [pc, #332]	; (80007c0 <print_network_information+0x18c>)
 8000674:	f006 f87e 	bl	8006774 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000678:	4b50      	ldr	r3, [pc, #320]	; (80007bc <print_network_information+0x188>)
 800067a:	799b      	ldrb	r3, [r3, #6]
 800067c:	4619      	mov	r1, r3
 800067e:	4b4f      	ldr	r3, [pc, #316]	; (80007bc <print_network_information+0x188>)
 8000680:	79db      	ldrb	r3, [r3, #7]
 8000682:	461a      	mov	r2, r3
 8000684:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <print_network_information+0x188>)
 8000686:	7a1b      	ldrb	r3, [r3, #8]
 8000688:	4618      	mov	r0, r3
 800068a:	4b4c      	ldr	r3, [pc, #304]	; (80007bc <print_network_information+0x188>)
 800068c:	7a5b      	ldrb	r3, [r3, #9]
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	4603      	mov	r3, r0
 8000692:	484c      	ldr	r0, [pc, #304]	; (80007c4 <print_network_information+0x190>)
 8000694:	f006 f86e 	bl	8006774 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000698:	4b48      	ldr	r3, [pc, #288]	; (80007bc <print_network_information+0x188>)
 800069a:	7a9b      	ldrb	r3, [r3, #10]
 800069c:	4619      	mov	r1, r3
 800069e:	4b47      	ldr	r3, [pc, #284]	; (80007bc <print_network_information+0x188>)
 80006a0:	7adb      	ldrb	r3, [r3, #11]
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <print_network_information+0x188>)
 80006a6:	7b1b      	ldrb	r3, [r3, #12]
 80006a8:	4618      	mov	r0, r3
 80006aa:	4b44      	ldr	r3, [pc, #272]	; (80007bc <print_network_information+0x188>)
 80006ac:	7b5b      	ldrb	r3, [r3, #13]
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	4845      	ldr	r0, [pc, #276]	; (80007c8 <print_network_information+0x194>)
 80006b4:	f006 f85e 	bl	8006774 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 80006b8:	4b40      	ldr	r3, [pc, #256]	; (80007bc <print_network_information+0x188>)
 80006ba:	7b9b      	ldrb	r3, [r3, #14]
 80006bc:	4619      	mov	r1, r3
 80006be:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <print_network_information+0x188>)
 80006c0:	7bdb      	ldrb	r3, [r3, #15]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b3d      	ldr	r3, [pc, #244]	; (80007bc <print_network_information+0x188>)
 80006c6:	7c1b      	ldrb	r3, [r3, #16]
 80006c8:	4618      	mov	r0, r3
 80006ca:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <print_network_information+0x188>)
 80006cc:	7c5b      	ldrb	r3, [r3, #17]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	4603      	mov	r3, r0
 80006d2:	483e      	ldr	r0, [pc, #248]	; (80007cc <print_network_information+0x198>)
 80006d4:	f006 f84e 	bl	8006774 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 80006d8:	4b38      	ldr	r3, [pc, #224]	; (80007bc <print_network_information+0x188>)
 80006da:	7c9b      	ldrb	r3, [r3, #18]
 80006dc:	4619      	mov	r1, r3
 80006de:	4b37      	ldr	r3, [pc, #220]	; (80007bc <print_network_information+0x188>)
 80006e0:	7cdb      	ldrb	r3, [r3, #19]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b35      	ldr	r3, [pc, #212]	; (80007bc <print_network_information+0x188>)
 80006e6:	7d1b      	ldrb	r3, [r3, #20]
 80006e8:	4618      	mov	r0, r3
 80006ea:	4b34      	ldr	r3, [pc, #208]	; (80007bc <print_network_information+0x188>)
 80006ec:	7d5b      	ldrb	r3, [r3, #21]
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	4603      	mov	r3, r0
 80006f2:	4837      	ldr	r0, [pc, #220]	; (80007d0 <print_network_information+0x19c>)
 80006f4:	f006 f83e 	bl	8006774 <iprintf>
    wizchip_getnetinfo(W5300_BANK_ADDR3, &gWIZNETINFO1);
 80006f8:	4936      	ldr	r1, [pc, #216]	; (80007d4 <print_network_information+0x1a0>)
 80006fa:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 80006fe:	f005 fedd 	bl	80064bc <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO1.mac[0],gWIZNETINFO1.mac[1],gWIZNETINFO1.mac[2],gWIZNETINFO1.mac[3],gWIZNETINFO1.mac[4],gWIZNETINFO1.mac[5]);
 8000702:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <print_network_information+0x1a0>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <print_network_information+0x1a0>)
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	461c      	mov	r4, r3
 800070e:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <print_network_information+0x1a0>)
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	461d      	mov	r5, r3
 8000714:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <print_network_information+0x1a0>)
 8000716:	78db      	ldrb	r3, [r3, #3]
 8000718:	461a      	mov	r2, r3
 800071a:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <print_network_information+0x1a0>)
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	4619      	mov	r1, r3
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <print_network_information+0x1a0>)
 8000722:	795b      	ldrb	r3, [r3, #5]
 8000724:	9302      	str	r3, [sp, #8]
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	9200      	str	r2, [sp, #0]
 800072a:	462b      	mov	r3, r5
 800072c:	4622      	mov	r2, r4
 800072e:	4601      	mov	r1, r0
 8000730:	4823      	ldr	r0, [pc, #140]	; (80007c0 <print_network_information+0x18c>)
 8000732:	f006 f81f 	bl	8006774 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO1.ip[0],gWIZNETINFO1.ip[1],gWIZNETINFO1.ip[2],gWIZNETINFO1.ip[3]);
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <print_network_information+0x1a0>)
 8000738:	799b      	ldrb	r3, [r3, #6]
 800073a:	4619      	mov	r1, r3
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <print_network_information+0x1a0>)
 800073e:	79db      	ldrb	r3, [r3, #7]
 8000740:	461a      	mov	r2, r3
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <print_network_information+0x1a0>)
 8000744:	7a1b      	ldrb	r3, [r3, #8]
 8000746:	4618      	mov	r0, r3
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <print_network_information+0x1a0>)
 800074a:	7a5b      	ldrb	r3, [r3, #9]
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	4603      	mov	r3, r0
 8000750:	481c      	ldr	r0, [pc, #112]	; (80007c4 <print_network_information+0x190>)
 8000752:	f006 f80f 	bl	8006774 <iprintf>
	printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO1.sn[0],gWIZNETINFO1.sn[1],gWIZNETINFO1.sn[2],gWIZNETINFO1.sn[3]);
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <print_network_information+0x1a0>)
 8000758:	7a9b      	ldrb	r3, [r3, #10]
 800075a:	4619      	mov	r1, r3
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <print_network_information+0x1a0>)
 800075e:	7adb      	ldrb	r3, [r3, #11]
 8000760:	461a      	mov	r2, r3
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <print_network_information+0x1a0>)
 8000764:	7b1b      	ldrb	r3, [r3, #12]
 8000766:	4618      	mov	r0, r3
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <print_network_information+0x1a0>)
 800076a:	7b5b      	ldrb	r3, [r3, #13]
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4603      	mov	r3, r0
 8000770:	4815      	ldr	r0, [pc, #84]	; (80007c8 <print_network_information+0x194>)
 8000772:	f005 ffff 	bl	8006774 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO1.gw[0],gWIZNETINFO1.gw[1],gWIZNETINFO1.gw[2],gWIZNETINFO1.gw[3]);
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <print_network_information+0x1a0>)
 8000778:	7b9b      	ldrb	r3, [r3, #14]
 800077a:	4619      	mov	r1, r3
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <print_network_information+0x1a0>)
 800077e:	7bdb      	ldrb	r3, [r3, #15]
 8000780:	461a      	mov	r2, r3
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <print_network_information+0x1a0>)
 8000784:	7c1b      	ldrb	r3, [r3, #16]
 8000786:	4618      	mov	r0, r3
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <print_network_information+0x1a0>)
 800078a:	7c5b      	ldrb	r3, [r3, #17]
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	4603      	mov	r3, r0
 8000790:	480e      	ldr	r0, [pc, #56]	; (80007cc <print_network_information+0x198>)
 8000792:	f005 ffef 	bl	8006774 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO1.dns[0],gWIZNETINFO1.dns[1],gWIZNETINFO1.dns[2],gWIZNETINFO1.dns[3]);
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <print_network_information+0x1a0>)
 8000798:	7c9b      	ldrb	r3, [r3, #18]
 800079a:	4619      	mov	r1, r3
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <print_network_information+0x1a0>)
 800079e:	7cdb      	ldrb	r3, [r3, #19]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <print_network_information+0x1a0>)
 80007a4:	7d1b      	ldrb	r3, [r3, #20]
 80007a6:	4618      	mov	r0, r3
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <print_network_information+0x1a0>)
 80007aa:	7d5b      	ldrb	r3, [r3, #21]
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	4603      	mov	r3, r0
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <print_network_information+0x19c>)
 80007b2:	f005 ffdf 	bl	8006774 <iprintf>
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bdb0      	pop	{r4, r5, r7, pc}
 80007bc:	20000010 	.word	0x20000010
 80007c0:	08007794 	.word	0x08007794
 80007c4:	080077c4 	.word	0x080077c4
 80007c8:	080077e0 	.word	0x080077e0
 80007cc:	080077fc 	.word	0x080077fc
 80007d0:	08007818 	.word	0x08007818
 80007d4:	20000028 	.word	0x20000028

080007d8 <_InitW5300>:

void _InitW5300(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
	unsigned int tmpaddr[4];

	Reset_W5300();
 80007de:	f7ff ff11 	bl	8000604 <Reset_W5300>
	//reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
	//reg_wizchip_cs_cbfunc(W5300CsEnable, W5300CsDisable);
	//setMR(W5300_BANK_ADDR1,0xB800);
	printf("getMR(0x%x) = %04X\r\n",W5300_BANK_ADDR1,  getMR(W5300_BANK_ADDR1));
 80007e2:	2100      	movs	r1, #0
 80007e4:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80007e8:	f004 fa06 	bl	8004bf8 <WIZCHIP_READ>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80007f4:	4826      	ldr	r0, [pc, #152]	; (8000890 <_InitW5300+0xb8>)
 80007f6:	f005 ffbd 	bl	8006774 <iprintf>
	HAL_Delay(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f000 fcda 	bl	80011b4 <HAL_Delay>
	printf("getMR(0x%x) = %04X\r\n",W5300_BANK_ADDR3,  getMR(W5300_BANK_ADDR3));
 8000800:	2100      	movs	r1, #0
 8000802:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 8000806:	f004 f9f7 	bl	8004bf8 <WIZCHIP_READ>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	f04f 41d0 	mov.w	r1, #1744830464	; 0x68000000
 8000812:	481f      	ldr	r0, [pc, #124]	; (8000890 <_InitW5300+0xb8>)
 8000814:	f005 ffae 	bl	8006774 <iprintf>
	HAL_Delay(100);
 8000818:	2064      	movs	r0, #100	; 0x64
 800081a:	f000 fccb 	bl	80011b4 <HAL_Delay>

	if (ctlwizchip(W5300_BANK_ADDR1, CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 800081e:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <_InitW5300+0xbc>)
 8000820:	2101      	movs	r1, #1
 8000822:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000826:	f005 fabf 	bl	8005da8 <ctlwizchip>
 800082a:	4603      	mov	r3, r0
 800082c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000830:	d102      	bne.n	8000838 <_InitW5300+0x60>
	{
		printf("W5300 memory initialization failed\r\n");
 8000832:	4819      	ldr	r0, [pc, #100]	; (8000898 <_InitW5300+0xc0>)
 8000834:	f006 f824 	bl	8006880 <puts>
	}
	HAL_Delay(100);
 8000838:	2064      	movs	r0, #100	; 0x64
 800083a:	f000 fcbb 	bl	80011b4 <HAL_Delay>
	if (ctlwizchip(W5300_BANK_ADDR3, CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <_InitW5300+0xbc>)
 8000840:	2101      	movs	r1, #1
 8000842:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 8000846:	f005 faaf 	bl	8005da8 <ctlwizchip>
 800084a:	4603      	mov	r3, r0
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000850:	d102      	bne.n	8000858 <_InitW5300+0x80>
	{
		printf("W5300 memory initialization failed\r\n");
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <_InitW5300+0xc0>)
 8000854:	f006 f814 	bl	8006880 <puts>
	}
	HAL_Delay(100);
 8000858:	2064      	movs	r0, #100	; 0x64
 800085a:	f000 fcab 	bl	80011b4 <HAL_Delay>

	ctlnetwork(W5300_BANK_ADDR1, CN_SET_NETINFO, (void *)&gWIZNETINFO);
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <_InitW5300+0xc4>)
 8000860:	2100      	movs	r1, #0
 8000862:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000866:	f005 fb1d 	bl	8005ea4 <ctlnetwork>
	HAL_Delay(100);
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f000 fca2 	bl	80011b4 <HAL_Delay>
	ctlnetwork(W5300_BANK_ADDR3, CN_SET_NETINFO, (void *)&gWIZNETINFO1);
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <_InitW5300+0xc8>)
 8000872:	2100      	movs	r1, #0
 8000874:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 8000878:	f005 fb14 	bl	8005ea4 <ctlnetwork>
	HAL_Delay(100);
 800087c:	2064      	movs	r0, #100	; 0x64
 800087e:	f000 fc99 	bl	80011b4 <HAL_Delay>
	print_network_information();
 8000882:	f7ff fed7 	bl	8000634 <print_network_information>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	08007834 	.word	0x08007834
 8000894:	20000000 	.word	0x20000000
 8000898:	0800784c 	.word	0x0800784c
 800089c:	20000010 	.word	0x20000010
 80008a0:	20000028 	.word	0x20000028

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 fc0f 	bl	80010ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f82c 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b0:	f000 f95a 	bl	8000b68 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80008b4:	f000 f87c 	bl	80009b0 <MX_LPUART1_UART_Init>
  MX_FMC_Init();
 80008b8:	f000 f8a6 	bl	8000a08 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello! W5300 BUS loopback System \r\n");
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <main+0x50>)
 80008be:	f005 ffdf 	bl	8006880 <puts>
  HAL_UART_Receive_IT(&hlpuart1, rxData, 1);
 80008c2:	2201      	movs	r2, #1
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <main+0x54>)
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <main+0x58>)
 80008c8:	f002 fc78 	bl	80031bc <HAL_UART_Receive_IT>

  _InitW5300();
 80008cc:	f7ff ff84 	bl	80007d8 <_InitW5300>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 loopback_tcps(W5300_BANK_ADDR1, 0, ethBuf0, 3000);
 80008d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <main+0x5c>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80008dc:	f004 f81e 	bl	800491c <loopback_tcps>
	 loopback_tcps(W5300_BANK_ADDR3, 0, ethBuf1, 3001);
 80008e0:	f640 33b9 	movw	r3, #3001	; 0xbb9
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <main+0x60>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 80008ec:	f004 f816 	bl	800491c <loopback_tcps>
  {
 80008f0:	e7ee      	b.n	80008d0 <main+0x2c>
 80008f2:	bf00      	nop
 80008f4:	08007870 	.word	0x08007870
 80008f8:	2000121c 	.word	0x2000121c
 80008fc:	200000f8 	.word	0x200000f8
 8000900:	2000021c 	.word	0x2000021c
 8000904:	20000a1c 	.word	0x20000a1c

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b096      	sub	sp, #88	; 0x58
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2244      	movs	r2, #68	; 0x44
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f005 ff24 	bl	8006764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800092a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800092e:	f000 ffad 	bl	800188c <HAL_PWREx_ControlVoltageScaling>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000938:	f000 f9c6 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800093c:	2310      	movs	r3, #16
 800093e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000948:	2360      	movs	r3, #96	; 0x60
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000950:	2301      	movs	r3, #1
 8000952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000958:	2347      	movs	r3, #71	; 0x47
 800095a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000964:	2306      	movs	r3, #6
 8000966:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fff3 	bl	8001958 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000978:	f000 f9a6 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2303      	movs	r3, #3
 8000982:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	2102      	movs	r1, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fbf8 	bl	800218c <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009a2:	f000 f991 	bl	8000cc8 <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3758      	adds	r7, #88	; 0x58
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009b6:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <MX_LPUART1_UART_Init+0x54>)
 80009b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_LPUART1_UART_Init+0x50>)
 80009ee:	f002 fb03 	bl	8002ff8 <HAL_UART_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80009f8:	f000 f966 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000f8 	.word	0x200000f8
 8000a04:	40008000 	.word	0x40008000

08000a08 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f005 fea5 	bl	8006764 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a1a:	4b50      	ldr	r3, [pc, #320]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a1c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000a20:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000a22:	4b4e      	ldr	r3, [pc, #312]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a24:	4a4e      	ldr	r2, [pc, #312]	; (8000b60 <MX_FMC_Init+0x158>)
 8000a26:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000a28:	4b4c      	ldr	r3, [pc, #304]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a2e:	4b4b      	ldr	r3, [pc, #300]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000a34:	4b49      	ldr	r3, [pc, #292]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a3a:	4b48      	ldr	r3, [pc, #288]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a3c:	2210      	movs	r2, #16
 8000a3e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000a40:	4b46      	ldr	r3, [pc, #280]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a46:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a4c:	4b43      	ldr	r3, [pc, #268]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000a52:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000a5a:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a60:	4b3e      	ldr	r3, [pc, #248]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a66:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000a6c:	4b3b      	ldr	r3, [pc, #236]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a72:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a78:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a7e:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <MX_FMC_Init+0x154>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a84:	230f      	movs	r3, #15
 8000a86:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a8c:	23ff      	movs	r3, #255	; 0xff
 8000a8e:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000a90:	230f      	movs	r3, #15
 8000a92:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a94:	2310      	movs	r3, #16
 8000a96:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000a98:	2311      	movs	r3, #17
 8000a9a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	482d      	ldr	r0, [pc, #180]	; (8000b5c <MX_FMC_Init+0x154>)
 8000aa8:	f002 fa5e 	bl	8002f68 <HAL_SRAM_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_FMC_Init+0xae>
  {
    Error_Handler( );
 8000ab2:	f000 f909 	bl	8000cc8 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000ab8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000abc:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000ac0:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <MX_FMC_Init+0x158>)
 8000ac2:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000ad8:	2210      	movs	r2, #16
 8000ada:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000af0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000b20:	230f      	movs	r3, #15
 8000b22:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000b24:	230f      	movs	r3, #15
 8000b26:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000b28:	23ff      	movs	r3, #255	; 0xff
 8000b2a:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b30:	2310      	movs	r3, #16
 8000b32:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b34:	2311      	movs	r3, #17
 8000b36:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	4808      	ldr	r0, [pc, #32]	; (8000b64 <MX_FMC_Init+0x15c>)
 8000b44:	f002 fa10 	bl	8002f68 <HAL_SRAM_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_FMC_Init+0x14a>
  {
    Error_Handler( );
 8000b4e:	f000 f8bb 	bl	8000cc8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000017c 	.word	0x2000017c
 8000b60:	a0000104 	.word	0xa0000104
 8000b64:	200001cc 	.word	0x200001cc

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b4e      	ldr	r3, [pc, #312]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a4d      	ldr	r2, [pc, #308]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b4b      	ldr	r3, [pc, #300]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b48      	ldr	r3, [pc, #288]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a47      	ldr	r2, [pc, #284]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b45      	ldr	r3, [pc, #276]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	61fb      	str	r3, [r7, #28]
 8000bac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	4b42      	ldr	r3, [pc, #264]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a41      	ldr	r2, [pc, #260]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a3b      	ldr	r2, [pc, #236]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b39      	ldr	r3, [pc, #228]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b36      	ldr	r3, [pc, #216]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a35      	ldr	r2, [pc, #212]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a2f      	ldr	r2, [pc, #188]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a29      	ldr	r2, [pc, #164]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000c26:	f000 fe87 	bl	8001938 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_GPIO_Init+0x150>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5300_Reset_GPIO_Port, W5300_Reset_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	481d      	ldr	r0, [pc, #116]	; (8000cbc <MX_GPIO_Init+0x154>)
 8000c48:	f000 fdfa 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c52:	481b      	ldr	r0, [pc, #108]	; (8000cc0 <MX_GPIO_Init+0x158>)
 8000c54:	f000 fdf4 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <MX_GPIO_Init+0x15c>)
 8000c70:	f000 fc54 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5300_Reset_Pin */
  GPIO_InitStruct.Pin = W5300_Reset_Pin;
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(W5300_Reset_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_GPIO_Init+0x154>)
 8000c8c:	f000 fc46 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c90:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_GPIO_Init+0x158>)
 8000caa:	f000 fc37 	bl	800151c <HAL_GPIO_Init>

}
 8000cae:	bf00      	nop
 8000cb0:	3738      	adds	r7, #56	; 0x38
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48001400 	.word	0x48001400
 8000cc0:	48000400 	.word	0x48000400
 8000cc4:	48000800 	.word	0x48000800

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0ac      	sub	sp, #176	; 0xb0
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	228c      	movs	r2, #140	; 0x8c
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 fd11 	bl	8006764 <memset>
  if(huart->Instance==LPUART1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <HAL_UART_MspInit+0xc4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d145      	bne.n	8000dd8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fc3b 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d64:	f7ff ffb0 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000d98:	f000 fdce 	bl	8001938 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000db6:	2308      	movs	r3, #8
 8000db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_UART_MspInit+0xcc>)
 8000dc4:	f000 fbaa 	bl	800151c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2046      	movs	r0, #70	; 0x46
 8000dce:	f000 faf0 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000dd2:	2046      	movs	r0, #70	; 0x46
 8000dd4:	f000 fb09 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	37b0      	adds	r7, #176	; 0xb0
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40008000 	.word	0x40008000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48001800 	.word	0x48001800

08000dec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <HAL_FMC_MspInit+0xc4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d14f      	bne.n	8000ea8 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <HAL_FMC_MspInit+0xc4>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <HAL_FMC_MspInit+0xc8>)
 8000e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e12:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_FMC_MspInit+0xc8>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6513      	str	r3, [r2, #80]	; 0x50
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <HAL_FMC_MspInit+0xc8>)
 8000e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  PG10   ------> FMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e26:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000e2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481d      	ldr	r0, [pc, #116]	; (8000eb8 <HAL_FMC_MspInit+0xcc>)
 8000e42:	f000 fb6b 	bl	800151c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e46:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000e4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4816      	ldr	r0, [pc, #88]	; (8000ebc <HAL_FMC_MspInit+0xd0>)
 8000e62:	f000 fb5b 	bl	800151c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e66:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000e6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <HAL_FMC_MspInit+0xd4>)
 8000e82:	f000 fb4b 	bl	800151c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <HAL_FMC_MspInit+0xd8>)
 8000ea2:	f000 fb3b 	bl	800151c <HAL_GPIO_Init>
 8000ea6:	e000      	b.n	8000eaa <HAL_FMC_MspInit+0xbe>
    return;
 8000ea8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20001220 	.word	0x20001220
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48001400 	.word	0x48001400
 8000ebc:	48001000 	.word	0x48001000
 8000ec0:	48000c00 	.word	0x48000c00
 8000ec4:	48001800 	.word	0x48001800

08000ec8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000ed0:	f7ff ff8c 	bl	8000dec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f924 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <LPUART1_IRQHandler+0x10>)
 8000f36:	f002 f997 	bl	8003268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000f8 	.word	0x200000f8

08000f44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e00a      	b.n	8000f6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f56:	f3af 8000 	nop.w
 8000f5a:	4601      	mov	r1, r0
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	b2ca      	uxtb	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf0      	blt.n	8000f56 <_read+0x12>
	}

return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	return -1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_isatty>:

int _isatty(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f005 fb7a 	bl	8006710 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20050000 	.word	0x20050000
 8001048:	00000400 	.word	0x00000400
 800104c:	20001224 	.word	0x20001224
 8001050:	20001268 	.word	0x20001268

08001054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopForever+0x2>
 800107c:	f7ff ffea 	bl	8001054 <SystemInit>
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LoopForever+0x6>)
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <LoopForever+0xa>)
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <LoopForever+0xe>)
 8001086:	2300      	movs	r3, #0
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:
 800108a:	58d4      	ldr	r4, [r2, r3]
 800108c:	50c4      	str	r4, [r0, r3]
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:
 8001090:	18c4      	adds	r4, r0, r3
 8001092:	428c      	cmp	r4, r1
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <LoopForever+0x12>)
 8001098:	4c0a      	ldr	r4, [pc, #40]	; (80010c4 <LoopForever+0x16>)
 800109a:	2300      	movs	r3, #0
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:
 80010a2:	42a2      	cmp	r2, r4
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>
 80010a6:	f005 fb39 	bl	800671c <__libc_init_array>
 80010aa:	f7ff fbfb 	bl	80008a4 <main>

080010ae <LoopForever>:
 80010ae:	e7fe      	b.n	80010ae <LoopForever>
 80010b0:	20050000 	.word	0x20050000
 80010b4:	20000000 	.word	0x20000000
 80010b8:	200000dc 	.word	0x200000dc
 80010bc:	08007ad0 	.word	0x08007ad0
 80010c0:	200000dc 	.word	0x200000dc
 80010c4:	20001264 	.word	0x20001264

080010c8 <ADC1_2_IRQHandler>:
 80010c8:	e7fe      	b.n	80010c8 <ADC1_2_IRQHandler>

080010ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f961 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f80e 	bl	80010fc <HAL_InitTick>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e001      	b.n	80010f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ec:	f7ff fdf2 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_InitTick+0x6c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d023      	beq.n	8001158 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_InitTick+0x70>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_InitTick+0x6c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f96d 	bl	8001406 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d809      	bhi.n	800114c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f937 	bl	80013b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_InitTick+0x74>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e007      	b.n	800115c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e004      	b.n	800115c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e001      	b.n	800115c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000048 	.word	0x20000048
 800116c:	20000040 	.word	0x20000040
 8001170:	20000044 	.word	0x20000044

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000048 	.word	0x20000048
 8001198:	20001228 	.word	0x20001228

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20001228 	.word	0x20001228

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000048 	.word	0x20000048

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff3e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff31 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d008      	beq.n	8001448 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2204      	movs	r2, #4
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e022      	b.n	800148e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 020e 	bic.w	r2, r2, #14
 8001456:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f003 021c 	and.w	r2, r3, #28
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	2101      	movs	r1, #1
 8001476:	fa01 f202 	lsl.w	r2, r1, r2
 800147a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d005      	beq.n	80014be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2204      	movs	r2, #4
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e029      	b.n	8001512 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 020e 	bic.w	r2, r2, #14
 80014cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f003 021c 	and.w	r2, r3, #28
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
    }
  }
  return status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152a:	e166      	b.n	80017fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8158 	beq.w	80017f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d005      	beq.n	800155c <HAL_GPIO_Init+0x40>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d130      	bne.n	80015be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001592:	2201      	movs	r2, #1
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	f003 0201 	and.w	r2, r3, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d017      	beq.n	80015fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d123      	bne.n	800164e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	6939      	ldr	r1, [r7, #16]
 800164a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0203 	and.w	r2, r3, #3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 80b2 	beq.w	80017f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001690:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_GPIO_Init+0x2fc>)
 8001692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001694:	4a60      	ldr	r2, [pc, #384]	; (8001818 <HAL_GPIO_Init+0x2fc>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6613      	str	r3, [r2, #96]	; 0x60
 800169c:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <HAL_GPIO_Init+0x2fc>)
 800169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016a8:	4a5c      	ldr	r2, [pc, #368]	; (800181c <HAL_GPIO_Init+0x300>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	220f      	movs	r2, #15
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016d2:	d02b      	beq.n	800172c <HAL_GPIO_Init+0x210>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_GPIO_Init+0x304>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d025      	beq.n	8001728 <HAL_GPIO_Init+0x20c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a51      	ldr	r2, [pc, #324]	; (8001824 <HAL_GPIO_Init+0x308>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d01f      	beq.n	8001724 <HAL_GPIO_Init+0x208>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a50      	ldr	r2, [pc, #320]	; (8001828 <HAL_GPIO_Init+0x30c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d019      	beq.n	8001720 <HAL_GPIO_Init+0x204>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a4f      	ldr	r2, [pc, #316]	; (800182c <HAL_GPIO_Init+0x310>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d013      	beq.n	800171c <HAL_GPIO_Init+0x200>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a4e      	ldr	r2, [pc, #312]	; (8001830 <HAL_GPIO_Init+0x314>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00d      	beq.n	8001718 <HAL_GPIO_Init+0x1fc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a4d      	ldr	r2, [pc, #308]	; (8001834 <HAL_GPIO_Init+0x318>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d007      	beq.n	8001714 <HAL_GPIO_Init+0x1f8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a4c      	ldr	r2, [pc, #304]	; (8001838 <HAL_GPIO_Init+0x31c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_GPIO_Init+0x1f4>
 800170c:	2307      	movs	r3, #7
 800170e:	e00e      	b.n	800172e <HAL_GPIO_Init+0x212>
 8001710:	2308      	movs	r3, #8
 8001712:	e00c      	b.n	800172e <HAL_GPIO_Init+0x212>
 8001714:	2306      	movs	r3, #6
 8001716:	e00a      	b.n	800172e <HAL_GPIO_Init+0x212>
 8001718:	2305      	movs	r3, #5
 800171a:	e008      	b.n	800172e <HAL_GPIO_Init+0x212>
 800171c:	2304      	movs	r3, #4
 800171e:	e006      	b.n	800172e <HAL_GPIO_Init+0x212>
 8001720:	2303      	movs	r3, #3
 8001722:	e004      	b.n	800172e <HAL_GPIO_Init+0x212>
 8001724:	2302      	movs	r3, #2
 8001726:	e002      	b.n	800172e <HAL_GPIO_Init+0x212>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_GPIO_Init+0x212>
 800172c:	2300      	movs	r3, #0
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4093      	lsls	r3, r2
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800173e:	4937      	ldr	r1, [pc, #220]	; (800181c <HAL_GPIO_Init+0x300>)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_GPIO_Init+0x320>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001770:	4a32      	ldr	r2, [pc, #200]	; (800183c <HAL_GPIO_Init+0x320>)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <HAL_GPIO_Init+0x320>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800179a:	4a28      	ldr	r2, [pc, #160]	; (800183c <HAL_GPIO_Init+0x320>)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_GPIO_Init+0x320>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017c4:	4a1d      	ldr	r2, [pc, #116]	; (800183c <HAL_GPIO_Init+0x320>)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_GPIO_Init+0x320>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_GPIO_Init+0x320>)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	f47f ae91 	bne.w	800152c <HAL_GPIO_Init+0x10>
  }
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	371c      	adds	r7, #28
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40021000 	.word	0x40021000
 800181c:	40010000 	.word	0x40010000
 8001820:	48000400 	.word	0x48000400
 8001824:	48000800 	.word	0x48000800
 8001828:	48000c00 	.word	0x48000c00
 800182c:	48001000 	.word	0x48001000
 8001830:	48001400 	.word	0x48001400
 8001834:	48001800 	.word	0x48001800
 8001838:	48001c00 	.word	0x48001c00
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
 800184c:	4613      	mov	r3, r2
 800184e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001850:	787b      	ldrb	r3, [r7, #1]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800185c:	e002      	b.n	8001864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_PWREx_GetVoltageRange+0x18>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40007000 	.word	0x40007000

0800188c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800189a:	d130      	bne.n	80018fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a8:	d038      	beq.n	800191c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018b2:	4a1e      	ldr	r2, [pc, #120]	; (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2232      	movs	r2, #50	; 0x32
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9b      	lsrs	r3, r3, #18
 80018cc:	3301      	adds	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d0:	e002      	b.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e4:	d102      	bne.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f2      	bne.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f8:	d110      	bne.n	800191c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e00f      	b.n	800191e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190a:	d007      	beq.n	800191c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001914:	4a05      	ldr	r2, [pc, #20]	; (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40007000 	.word	0x40007000
 8001930:	20000040 	.word	0x20000040
 8001934:	431bde83 	.word	0x431bde83

08001938 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_PWREx_EnableVddIO2+0x1c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001946:	6053      	str	r3, [r2, #4]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40007000 	.word	0x40007000

08001958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	f000 bc08 	b.w	800217c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196c:	4b96      	ldr	r3, [pc, #600]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001976:	4b94      	ldr	r3, [pc, #592]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80e4 	beq.w	8001b56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4c>
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	f040 808b 	bne.w	8001ab2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	f040 8087 	bne.w	8001ab2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a4:	4b88      	ldr	r3, [pc, #544]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_OscConfig+0x64>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e3df      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	4b81      	ldr	r3, [pc, #516]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <HAL_RCC_OscConfig+0x7e>
 80019cc:	4b7e      	ldr	r3, [pc, #504]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d4:	e005      	b.n	80019e2 <HAL_RCC_OscConfig+0x8a>
 80019d6:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d223      	bcs.n	8001a2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fd92 	bl	8002514 <RCC_SetFlashLatencyFromMSIRange>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e3c0      	b.n	800217c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a72      	ldr	r2, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b70      	ldr	r3, [pc, #448]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	496d      	ldr	r1, [pc, #436]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	4968      	ldr	r1, [pc, #416]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
 8001a2c:	e025      	b.n	8001a7a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2e:	4b66      	ldr	r3, [pc, #408]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a65      	ldr	r2, [pc, #404]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4960      	ldr	r1, [pc, #384]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4c:	4b5e      	ldr	r3, [pc, #376]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	495b      	ldr	r1, [pc, #364]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fd52 	bl	8002514 <RCC_SetFlashLatencyFromMSIRange>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e380      	b.n	800217c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a7a:	f000 fc87 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	4950      	ldr	r1, [pc, #320]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_RCC_OscConfig+0x278>)
 8001a98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fb2c 	bl	80010fc <HAL_InitTick>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d052      	beq.n	8001b54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	e364      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d032      	beq.n	8001b20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fb69 	bl	800119c <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ace:	f7ff fb65 	bl	800119c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e34d      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4930      	ldr	r1, [pc, #192]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	492b      	ldr	r1, [pc, #172]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
 8001b1e:	e01a      	b.n	8001b56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb36 	bl	800119c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b34:	f7ff fb32 	bl	800119c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e31a      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1dc>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d073      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_OscConfig+0x21c>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d10e      	bne.n	8001b8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d10b      	bne.n	8001b8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d063      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d15f      	bne.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e2f7      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b94:	d106      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x24c>
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e025      	b.n	8001bf0 <HAL_RCC_OscConfig+0x298>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bac:	d114      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x280>
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a02      	ldr	r2, [pc, #8]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e013      	b.n	8001bf0 <HAL_RCC_OscConfig+0x298>
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	080079e0 	.word	0x080079e0
 8001bd0:	20000040 	.word	0x20000040
 8001bd4:	20000044 	.word	0x20000044
 8001bd8:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a9f      	ldr	r2, [pc, #636]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b9d      	ldr	r3, [pc, #628]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a9c      	ldr	r2, [pc, #624]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fad0 	bl	800119c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff facc 	bl	800119c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e2b4      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c12:	4b92      	ldr	r3, [pc, #584]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2a8>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fabc 	bl	800119c <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fab8 	bl	800119c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e2a0      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2d0>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d060      	beq.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_OscConfig+0x310>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d119      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d116      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c68:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x328>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e27d      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	4973      	ldr	r1, [pc, #460]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c94:	e040      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d023      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff fa77 	bl	800119c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fa73 	bl	800119c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e25b      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	495f      	ldr	r1, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	e018      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5c      	ldr	r2, [pc, #368]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fa53 	bl	800119c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fa4f 	bl	800119c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e237      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d32:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fa2e 	bl	800119c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fa2a 	bl	800119c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e212      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ef      	beq.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
 8001d64:	e01b      	b.n	8001d9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6c:	4a3b      	ldr	r2, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff fa11 	bl	800119c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fa0d 	bl	800119c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1f5      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ef      	bne.n	8001d7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80a6 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001db0:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d118      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df0:	f7ff f9d4 	bl	800119c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7ff f9d0 	bl	800119c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1b8      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4d8>
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2e:	e029      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d115      	bne.n	8001e64 <HAL_RCC_OscConfig+0x50c>
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e58:	e014      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40007000 	.word	0x40007000
 8001e64:	4b9d      	ldr	r3, [pc, #628]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a9c      	ldr	r2, [pc, #624]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e74:	4b99      	ldr	r3, [pc, #612]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a98      	ldr	r2, [pc, #608]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d016      	beq.n	8001eba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f986 	bl	800119c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff f982 	bl	800119c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e168      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	4b8c      	ldr	r3, [pc, #560]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ed      	beq.n	8001e94 <HAL_RCC_OscConfig+0x53c>
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff f96f 	bl	800119c <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff f96b 	bl	800119c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e151      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed8:	4b80      	ldr	r3, [pc, #512]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ed      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d03c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f0c:	4b73      	ldr	r3, [pc, #460]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f12:	4a72      	ldr	r2, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f93e 	bl	800119c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f24:	f7ff f93a 	bl	800119c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e122      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f36:	4b69      	ldr	r3, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ef      	beq.n	8001f24 <HAL_RCC_OscConfig+0x5cc>
 8001f44:	e01b      	b.n	8001f7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f46:	4b65      	ldr	r3, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f4c:	4a63      	ldr	r2, [pc, #396]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff f921 	bl	800119c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f5e:	f7ff f91d 	bl	800119c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e105      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f70:	4b5a      	ldr	r3, [pc, #360]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1ef      	bne.n	8001f5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80f9 	beq.w	800217a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	f040 80cf 	bne.w	8002130 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0203 	and.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d12c      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d123      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d11b      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d113      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d109      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d071      	beq.n	80020e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d068      	beq.n	80020d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0ac      	b.n	800217c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800202e:	f7ff f8b5 	bl	800119c <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff f8b1 	bl	800119c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e099      	b.n	800217c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_RCC_OscConfig+0x788>)
 800205a:	4013      	ands	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002064:	3a01      	subs	r2, #1
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800206e:	0212      	lsls	r2, r2, #8
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002076:	0852      	lsrs	r2, r2, #1
 8002078:	3a01      	subs	r2, #1
 800207a:	0552      	lsls	r2, r2, #21
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002082:	0852      	lsrs	r2, r2, #1
 8002084:	3a01      	subs	r2, #1
 8002086:	0652      	lsls	r2, r2, #25
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800208e:	06d2      	lsls	r2, r2, #27
 8002090:	430a      	orrs	r2, r1
 8002092:	4912      	ldr	r1, [pc, #72]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002094:	4313      	orrs	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020b0:	f7ff f874 	bl	800119c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff f870 	bl	800119c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e058      	b.n	800217c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d6:	e050      	b.n	800217a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e04f      	b.n	800217c <HAL_RCC_OscConfig+0x824>
 80020dc:	40021000 	.word	0x40021000
 80020e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d144      	bne.n	800217a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a23      	ldr	r2, [pc, #140]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a20      	ldr	r2, [pc, #128]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002106:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002108:	f7ff f848 	bl	800119c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff f844 	bl	800119c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e02c      	b.n	800217c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x7b8>
 800212e:	e024      	b.n	800217a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d01f      	beq.n	8002176 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 800213c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7ff f82b 	bl	800119c <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7ff f827 	bl	800119c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e00f      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4905      	ldr	r1, [pc, #20]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_OscConfig+0x830>)
 8002170:	4013      	ands	r3, r2
 8002172:	60cb      	str	r3, [r1, #12]
 8002174:	e001      	b.n	800217a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	feeefffc 	.word	0xfeeefffc

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0e7      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b75      	ldr	r3, [pc, #468]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b72      	ldr	r3, [pc, #456]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4970      	ldr	r1, [pc, #448]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b6e      	ldr	r3, [pc, #440]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0cf      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d908      	bls.n	80021fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4960      	ldr	r1, [pc, #384]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d04c      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	4b5a      	ldr	r3, [pc, #360]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d121      	bne.n	8002262 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0a6      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222a:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e09a      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002242:	4b4e      	ldr	r3, [pc, #312]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e08e      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002252:	4b4a      	ldr	r3, [pc, #296]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e086      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b46      	ldr	r3, [pc, #280]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4943      	ldr	r1, [pc, #268]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	4313      	orrs	r3, r2
 8002272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002274:	f7fe ff92 	bl	800119c <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe ff8e 	bl	800119c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e06e      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d010      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022bc:	429a      	cmp	r2, r3
 80022be:	d208      	bcs.n	80022d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b2e      	ldr	r3, [pc, #184]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	492b      	ldr	r1, [pc, #172]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d210      	bcs.n	8002302 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 0207 	bic.w	r2, r3, #7
 80022e8:	4923      	ldr	r1, [pc, #140]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e036      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	4918      	ldr	r1, [pc, #96]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4910      	ldr	r1, [pc, #64]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002340:	f000 f824 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	490b      	ldr	r1, [pc, #44]	; (8002380 <HAL_RCC_ClockConfig+0x1f4>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 800235e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1fc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fec9 	bl	80010fc <HAL_InitTick>
 800236a:	4603      	mov	r3, r0
 800236c:	72fb      	strb	r3, [r7, #11]

  return status;
 800236e:	7afb      	ldrb	r3, [r7, #11]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40022000 	.word	0x40022000
 800237c:	40021000 	.word	0x40021000
 8002380:	080079e0 	.word	0x080079e0
 8002384:	20000040 	.word	0x20000040
 8002388:	20000044 	.word	0x20000044

0800238c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239a:	4b3e      	ldr	r3, [pc, #248]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a4:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x34>
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d121      	bne.n	80023fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d11e      	bne.n	80023fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023cc:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e005      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023e8:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d102      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <HAL_RCC_GetSysClockFreq+0x110>)
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	e004      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d101      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002410:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002412:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d134      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0xa6>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d003      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0xac>
 8002430:	e005      	b.n	800243e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <HAL_RCC_GetSysClockFreq+0x110>)
 8002434:	617b      	str	r3, [r7, #20]
      break;
 8002436:	e005      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800243a:	617b      	str	r3, [r7, #20]
      break;
 800243c:	e002      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	617b      	str	r3, [r7, #20]
      break;
 8002442:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	3301      	adds	r3, #1
 8002450:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	fb03 f202 	mul.w	r2, r3, r2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	0e5b      	lsrs	r3, r3, #25
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	3301      	adds	r3, #1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002484:	69bb      	ldr	r3, [r7, #24]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	080079f8 	.word	0x080079f8
 800249c:	00f42400 	.word	0x00f42400
 80024a0:	007a1200 	.word	0x007a1200

080024a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000040 	.word	0x20000040

080024bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024c0:	f7ff fff0 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4904      	ldr	r1, [pc, #16]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	080079f0 	.word	0x080079f0

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024ec:	f7ff ffda 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0adb      	lsrs	r3, r3, #11
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4904      	ldr	r1, [pc, #16]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	080079f0 	.word	0x080079f0

08002514 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800252c:	f7ff f9a0 	bl	8001870 <HAL_PWREx_GetVoltageRange>
 8002530:	6178      	str	r0, [r7, #20]
 8002532:	e014      	b.n	800255e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	4a24      	ldr	r2, [pc, #144]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253e:	6593      	str	r3, [r2, #88]	; 0x58
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800254c:	f7ff f990 	bl	8001870 <HAL_PWREx_GetVoltageRange>
 8002550:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002564:	d10b      	bne.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d919      	bls.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2ba0      	cmp	r3, #160	; 0xa0
 8002570:	d902      	bls.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002572:	2302      	movs	r3, #2
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e013      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002578:	2301      	movs	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	e010      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b80      	cmp	r3, #128	; 0x80
 8002582:	d902      	bls.n	800258a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002584:	2303      	movs	r3, #3
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e00a      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d102      	bne.n	8002596 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002590:	2302      	movs	r3, #2
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	e004      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b70      	cmp	r3, #112	; 0x70
 800259a:	d101      	bne.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800259c:	2301      	movs	r3, #1
 800259e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 0207 	bic.w	r2, r3, #7
 80025a8:	4909      	ldr	r1, [pc, #36]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40022000 	.word	0x40022000

080025d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025dc:	2300      	movs	r3, #0
 80025de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e0:	2300      	movs	r3, #0
 80025e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d041      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025f8:	d02a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025fe:	d824      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002604:	d008      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002606:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800260a:	d81e      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002614:	d010      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002616:	e018      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002618:	4b86      	ldr	r3, [pc, #536]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a85      	ldr	r2, [pc, #532]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002624:	e015      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f000 facd 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002636:	e00c      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3320      	adds	r3, #32
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fbb6 	bl	8002db0 <RCCEx_PLLSAI2_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002648:	e003      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	74fb      	strb	r3, [r7, #19]
      break;
 800264e:	e000      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002658:	4b76      	ldr	r3, [pc, #472]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002666:	4973      	ldr	r1, [pc, #460]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800266e:	e001      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d041      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002684:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002688:	d02a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800268a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800268e:	d824      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002694:	d008      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269a:	d81e      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d010      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026a6:	e018      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a8:	4b62      	ldr	r3, [pc, #392]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a61      	ldr	r2, [pc, #388]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b4:	e015      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fa85 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026c6:	e00c      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3320      	adds	r3, #32
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fb6e 	bl	8002db0 <RCCEx_PLLSAI2_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026d8:	e003      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	74fb      	strb	r3, [r7, #19]
      break;
 80026de:	e000      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026e8:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f6:	494f      	ldr	r1, [pc, #316]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026fe:	e001      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a0 	beq.w	8002852 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a40      	ldr	r2, [pc, #256]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
 8002738:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002754:	f7fe fd22 	bl	800119c <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275a:	e009      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275c:	f7fe fd1e 	bl	800119c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d902      	bls.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	74fb      	strb	r3, [r7, #19]
        break;
 800276e:	e005      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002770:	4b31      	ldr	r3, [pc, #196]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d15c      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01f      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	d019      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fcdd 	bl	800119c <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e4:	e00b      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fcd9 	bl	800119c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d902      	bls.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	74fb      	strb	r3, [r7, #19]
            break;
 80027fc:	e006      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ec      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	4904      	ldr	r1, [pc, #16]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800282a:	e009      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
 8002830:	e006      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002840:	7c7b      	ldrb	r3, [r7, #17]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4ba6      	ldr	r3, [pc, #664]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	4aa5      	ldr	r2, [pc, #660]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002850:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800285e:	4ba0      	ldr	r3, [pc, #640]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f023 0203 	bic.w	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	499c      	ldr	r1, [pc, #624]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002880:	4b97      	ldr	r3, [pc, #604]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 020c 	bic.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	4994      	ldr	r1, [pc, #592]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a2:	4b8f      	ldr	r3, [pc, #572]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	498b      	ldr	r1, [pc, #556]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c4:	4b86      	ldr	r3, [pc, #536]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4983      	ldr	r1, [pc, #524]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028e6:	4b7e      	ldr	r3, [pc, #504]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	497a      	ldr	r1, [pc, #488]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002908:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	4972      	ldr	r1, [pc, #456]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800292a:	4b6d      	ldr	r3, [pc, #436]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002938:	4969      	ldr	r1, [pc, #420]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800294c:	4b64      	ldr	r3, [pc, #400]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295a:	4961      	ldr	r1, [pc, #388]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800296e:	4b5c      	ldr	r3, [pc, #368]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297c:	4958      	ldr	r1, [pc, #352]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	4950      	ldr	r1, [pc, #320]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4947      	ldr	r1, [pc, #284]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029d4:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	493f      	ldr	r1, [pc, #252]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d028      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f6:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	4936      	ldr	r1, [pc, #216]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a16:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	4a31      	ldr	r2, [pc, #196]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a20:	60d3      	str	r3, [r2, #12]
 8002a22:	e011      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 f8c9 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d028      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	491f      	ldr	r1, [pc, #124]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a72:	d106      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a74:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a7e:	60d3      	str	r3, [r2, #12]
 8002a80:	e011      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	2101      	movs	r1, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f89a 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac0:	4907      	ldr	r1, [pc, #28]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad2:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a02      	ldr	r2, [pc, #8]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002adc:	60d3      	str	r3, [r2, #12]
 8002ade:	e013      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002ae0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 f869 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002afa:	4603      	mov	r3, r0
 8002afc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d02f      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b14:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b22:	4929      	ldr	r1, [pc, #164]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	2102      	movs	r1, #2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f846 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d014      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	74bb      	strb	r3, [r7, #18]
 8002b4e:	e011      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3320      	adds	r3, #32
 8002b5e:	2102      	movs	r1, #2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f925 	bl	8002db0 <RCCEx_PLLSAI2_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b90:	490d      	ldr	r1, [pc, #52]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb4:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000

08002bcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bda:	4b74      	ldr	r3, [pc, #464]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d018      	beq.n	8002c18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002be6:	4b71      	ldr	r3, [pc, #452]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d10d      	bne.n	8002c12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bfe:	4b6b      	ldr	r3, [pc, #428]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d047      	beq.n	8002ca2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	e044      	b.n	8002ca2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d018      	beq.n	8002c52 <RCCEx_PLLSAI1_Config+0x86>
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d825      	bhi.n	8002c70 <RCCEx_PLLSAI1_Config+0xa4>
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d002      	beq.n	8002c2e <RCCEx_PLLSAI1_Config+0x62>
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d009      	beq.n	8002c40 <RCCEx_PLLSAI1_Config+0x74>
 8002c2c:	e020      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11d      	bne.n	8002c76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3e:	e01a      	b.n	8002c76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c40:	4b5a      	ldr	r3, [pc, #360]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d116      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c50:	e013      	b.n	8002c7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c52:	4b56      	ldr	r3, [pc, #344]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c5e:	4b53      	ldr	r3, [pc, #332]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c6e:	e006      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e004      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c86:	4b49      	ldr	r3, [pc, #292]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	4943      	ldr	r1, [pc, #268]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d17c      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ca8:	4b40      	ldr	r3, [pc, #256]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3f      	ldr	r2, [pc, #252]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7fe fa72 	bl	800119c <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cba:	e009      	b.n	8002cd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cbc:	f7fe fa6e 	bl	800119c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d902      	bls.n	8002cd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8002cce:	e005      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ef      	bne.n	8002cbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d15f      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d110      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	0211      	lsls	r1, r2, #8
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68d2      	ldr	r2, [r2, #12]
 8002cfe:	06d2      	lsls	r2, r2, #27
 8002d00:	430a      	orrs	r2, r1
 8002d02:	492a      	ldr	r1, [pc, #168]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	610b      	str	r3, [r1, #16]
 8002d08:	e027      	b.n	8002d5a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d112      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d10:	4b26      	ldr	r3, [pc, #152]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6892      	ldr	r2, [r2, #8]
 8002d20:	0211      	lsls	r1, r2, #8
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6912      	ldr	r2, [r2, #16]
 8002d26:	0852      	lsrs	r2, r2, #1
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	0552      	lsls	r2, r2, #21
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	491f      	ldr	r1, [pc, #124]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	610b      	str	r3, [r1, #16]
 8002d34:	e011      	b.n	8002d5a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6892      	ldr	r2, [r2, #8]
 8002d46:	0211      	lsls	r1, r2, #8
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6952      	ldr	r2, [r2, #20]
 8002d4c:	0852      	lsrs	r2, r2, #1
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0652      	lsls	r2, r2, #25
 8002d52:	430a      	orrs	r2, r1
 8002d54:	4915      	ldr	r1, [pc, #84]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a13      	ldr	r2, [pc, #76]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7fe fa19 	bl	800119c <HAL_GetTick>
 8002d6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d6c:	e009      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d6e:	f7fe fa15 	bl	800119c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d902      	bls.n	8002d82 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d80:	e005      	b.n	8002d8e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ef      	beq.n	8002d6e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dbe:	4b69      	ldr	r3, [pc, #420]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dca:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0203 	and.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d10d      	bne.n	8002df6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002de2:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
       ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d047      	beq.n	8002e86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e044      	b.n	8002e86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d018      	beq.n	8002e36 <RCCEx_PLLSAI2_Config+0x86>
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d825      	bhi.n	8002e54 <RCCEx_PLLSAI2_Config+0xa4>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <RCCEx_PLLSAI2_Config+0x62>
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d009      	beq.n	8002e24 <RCCEx_PLLSAI2_Config+0x74>
 8002e10:	e020      	b.n	8002e54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e12:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e22:	e01a      	b.n	8002e5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e24:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e34:	e013      	b.n	8002e5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e36:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e42:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e52:	e006      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e004      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	4938      	ldr	r1, [pc, #224]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d166      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e8c:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a34      	ldr	r2, [pc, #208]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fe f980 	bl	800119c <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e9e:	e009      	b.n	8002eb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ea0:	f7fe f97c 	bl	800119c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb2:	e005      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ef      	bne.n	8002ea0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d149      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d110      	bne.n	8002eee <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ed4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	0211      	lsls	r1, r2, #8
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	06d2      	lsls	r2, r2, #27
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	491f      	ldr	r1, [pc, #124]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	614b      	str	r3, [r1, #20]
 8002eec:	e011      	b.n	8002f12 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ef6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	0211      	lsls	r1, r2, #8
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6912      	ldr	r2, [r2, #16]
 8002f04:	0852      	lsrs	r2, r2, #1
 8002f06:	3a01      	subs	r2, #1
 8002f08:	0652      	lsls	r2, r2, #25
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	4915      	ldr	r1, [pc, #84]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f93d 	bl	800119c <HAL_GetTick>
 8002f22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f24:	e009      	b.n	8002f3a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f26:	f7fe f939 	bl	800119c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d902      	bls.n	8002f3a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	73fb      	strb	r3, [r7, #15]
          break;
 8002f38:	e005      	b.n	8002f46 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ef      	beq.n	8002f26 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e038      	b.n	8002ff0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7fd ff98 	bl	8000ec8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f001 fba2 	bl	80046ec <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	f001 fc2a 	bl	800480c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6858      	ldr	r0, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	f001 fc71 	bl	80048ac <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	6892      	ldr	r2, [r2, #8]
 8002fd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	f041 0101 	orr.w	r1, r1, #1
 8002fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e040      	b.n	800308c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd fe7e 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2224      	movs	r2, #36	; 0x24
 8003024:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fc18 	bl	800386c <UART_SetConfig>
 800303c:	4603      	mov	r3, r0
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e022      	b.n	800308c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fec4 	bl	8003ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 ff4b 	bl	8003f20 <UART_CheckIdleState>
 800308a:	4603      	mov	r3, r0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	f040 8082 	bne.w	80031b2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_UART_Transmit+0x26>
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e07a      	b.n	80031b4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_UART_Transmit+0x38>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e073      	b.n	80031b4 <HAL_UART_Transmit+0x120>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2221      	movs	r2, #33	; 0x21
 80030e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e2:	f7fe f85b 	bl	800119c <HAL_GetTick>
 80030e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d108      	bne.n	8003114 <HAL_UART_Transmit+0x80>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e003      	b.n	800311c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003124:	e02d      	b.n	8003182 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 ff3e 	bl	8003fb2 <UART_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e039      	b.n	80031b4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003152:	b292      	uxth	r2, r2
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	3302      	adds	r3, #2
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	e008      	b.n	8003170 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b292      	uxth	r2, r2
 8003168:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1cb      	bne.n	8003126 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	2140      	movs	r1, #64	; 0x40
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 ff0a 	bl	8003fb2 <UART_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e005      	b.n	80031b4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d142      	bne.n	8003258 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_UART_Receive_IT+0x22>
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e03b      	b.n	800325a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_UART_Receive_IT+0x34>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e034      	b.n	800325a <HAL_UART_Receive_IT+0x9e>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a18      	ldr	r2, [pc, #96]	; (8003264 <HAL_UART_Receive_IT+0xa8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d01f      	beq.n	8003248 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	613b      	str	r3, [r7, #16]
   return(result);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	623b      	str	r3, [r7, #32]
 8003236:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	69f9      	ldr	r1, [r7, #28]
 800323a:	6a3a      	ldr	r2, [r7, #32]
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	61bb      	str	r3, [r7, #24]
   return(result);
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e6      	bne.n	8003216 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	461a      	mov	r2, r3
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 ff74 	bl	800413c <UART_Start_Receive_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	e000      	b.n	800325a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3728      	adds	r7, #40	; 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40008000 	.word	0x40008000

08003268 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b0ba      	sub	sp, #232	; 0xe8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800328e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003292:	f640 030f 	movw	r3, #2063	; 0x80f
 8003296:	4013      	ands	r3, r2
 8003298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800329c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d115      	bne.n	80032d0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00f      	beq.n	80032d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d009      	beq.n	80032d0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 82a6 	beq.w	8003812 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
      }
      return;
 80032ce:	e2a0      	b.n	8003812 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80032d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8117 	beq.w	8003508 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032ea:	4b85      	ldr	r3, [pc, #532]	; (8003500 <HAL_UART_IRQHandler+0x298>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 810a 	beq.w	8003508 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d011      	beq.n	8003324 <HAL_UART_IRQHandler+0xbc>
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2201      	movs	r2, #1
 8003312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d011      	beq.n	8003354 <HAL_UART_IRQHandler+0xec>
 8003330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2202      	movs	r2, #2
 8003342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334a:	f043 0204 	orr.w	r2, r3, #4
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d011      	beq.n	8003384 <HAL_UART_IRQHandler+0x11c>
 8003360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2204      	movs	r2, #4
 8003372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337a:	f043 0202 	orr.w	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d017      	beq.n	80033c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800339c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2208      	movs	r2, #8
 80033ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b6:	f043 0208 	orr.w	r2, r3, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d012      	beq.n	80033f2 <HAL_UART_IRQHandler+0x18a>
 80033cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00c      	beq.n	80033f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 820c 	beq.w	8003816 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800340a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d005      	beq.n	800344a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800343e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003442:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003446:	2b00      	cmp	r3, #0
 8003448:	d04f      	beq.n	80034ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 ff40 	bl	80042d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d141      	bne.n	80034e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3308      	adds	r3, #8
 8003464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003468:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3308      	adds	r3, #8
 8003486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800348a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800348e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1d9      	bne.n	800345e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d013      	beq.n	80034da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <HAL_UART_IRQHandler+0x29c>)
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd ffeb 	bl	800149a <HAL_DMA_Abort_IT>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d017      	beq.n	80034fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80034d4:	4610      	mov	r0, r2
 80034d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d8:	e00f      	b.n	80034fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f9b0 	bl	8003840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	e00b      	b.n	80034fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f9ac 	bl	8003840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e8:	e007      	b.n	80034fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f9a8 	bl	8003840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80034f8:	e18d      	b.n	8003816 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fa:	bf00      	nop
    return;
 80034fc:	e18b      	b.n	8003816 <HAL_UART_IRQHandler+0x5ae>
 80034fe:	bf00      	nop
 8003500:	04000120 	.word	0x04000120
 8003504:	08004397 	.word	0x08004397

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	2b01      	cmp	r3, #1
 800350e:	f040 8146 	bne.w	800379e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 813f 	beq.w	800379e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8138 	beq.w	800379e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2210      	movs	r2, #16
 8003534:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	f040 80b4 	bne.w	80036ae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003552:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 815f 	beq.w	800381a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003566:	429a      	cmp	r2, r3
 8003568:	f080 8157 	bcs.w	800381a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003572:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 8085 	bne.w	8003692 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800359c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1da      	bne.n	8003588 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3308      	adds	r3, #8
 80035d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e1      	bne.n	80035d2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800361e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3308      	adds	r3, #8
 800362e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003632:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003634:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003638:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e3      	bne.n	800360e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003662:	f023 0310 	bic.w	r3, r3, #16
 8003666:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003674:	65bb      	str	r3, [r7, #88]	; 0x58
 8003676:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800367a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e4      	bne.n	8003652 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fec6 	bl	800141e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8d4 	bl	8003854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036ac:	e0b5      	b.n	800381a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80a7 	beq.w	800381e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80036d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80a2 	beq.w	800381e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036fc:	647b      	str	r3, [r7, #68]	; 0x44
 80036fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800370a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e4      	bne.n	80036da <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	623b      	str	r3, [r7, #32]
   return(result);
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3308      	adds	r3, #8
 8003730:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003734:	633a      	str	r2, [r7, #48]	; 0x30
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800373a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e3      	bne.n	8003710 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	60fb      	str	r3, [r7, #12]
   return(result);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0310 	bic.w	r3, r3, #16
 800376e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	69b9      	ldr	r1, [r7, #24]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	617b      	str	r3, [r7, #20]
   return(result);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e4      	bne.n	800375a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003794:	4619      	mov	r1, r3
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f85c 	bl	8003854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800379c:	e03f      	b.n	800381e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00e      	beq.n	80037c8 <HAL_UART_IRQHandler+0x560>
 80037aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 ff88 	bl	80046d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037c6:	e02d      	b.n	8003824 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01c      	beq.n	8003822 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
    }
    return;
 80037f0:	e017      	b.n	8003822 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d012      	beq.n	8003824 <HAL_UART_IRQHandler+0x5bc>
 80037fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00c      	beq.n	8003824 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fdd9 	bl	80043c2 <UART_EndTransmit_IT>
    return;
 8003810:	e008      	b.n	8003824 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003812:	bf00      	nop
 8003814:	e006      	b.n	8003824 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003816:	bf00      	nop
 8003818:	e004      	b.n	8003824 <HAL_UART_IRQHandler+0x5bc>
      return;
 800381a:	bf00      	nop
 800381c:	e002      	b.n	8003824 <HAL_UART_IRQHandler+0x5bc>
      return;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003822:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003824:	37e8      	adds	r7, #232	; 0xe8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop

0800382c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800386c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003870:	b08a      	sub	sp, #40	; 0x28
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	431a      	orrs	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	4313      	orrs	r3, r2
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4ba4      	ldr	r3, [pc, #656]	; (8003b2c <UART_SetConfig+0x2c0>)
 800389c:	4013      	ands	r3, r2
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a99      	ldr	r2, [pc, #612]	; (8003b30 <UART_SetConfig+0x2c4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d4:	4313      	orrs	r3, r2
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a90      	ldr	r2, [pc, #576]	; (8003b34 <UART_SetConfig+0x2c8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d126      	bne.n	8003944 <UART_SetConfig+0xd8>
 80038f6:	4b90      	ldr	r3, [pc, #576]	; (8003b38 <UART_SetConfig+0x2cc>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b03      	cmp	r3, #3
 8003902:	d81b      	bhi.n	800393c <UART_SetConfig+0xd0>
 8003904:	a201      	add	r2, pc, #4	; (adr r2, 800390c <UART_SetConfig+0xa0>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	0800391d 	.word	0x0800391d
 8003910:	0800392d 	.word	0x0800392d
 8003914:	08003925 	.word	0x08003925
 8003918:	08003935 	.word	0x08003935
 800391c:	2301      	movs	r3, #1
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003922:	e116      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003924:	2302      	movs	r3, #2
 8003926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392a:	e112      	b.n	8003b52 <UART_SetConfig+0x2e6>
 800392c:	2304      	movs	r3, #4
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003932:	e10e      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003934:	2308      	movs	r3, #8
 8003936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393a:	e10a      	b.n	8003b52 <UART_SetConfig+0x2e6>
 800393c:	2310      	movs	r3, #16
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003942:	e106      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a7c      	ldr	r2, [pc, #496]	; (8003b3c <UART_SetConfig+0x2d0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d138      	bne.n	80039c0 <UART_SetConfig+0x154>
 800394e:	4b7a      	ldr	r3, [pc, #488]	; (8003b38 <UART_SetConfig+0x2cc>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	2b0c      	cmp	r3, #12
 800395a:	d82d      	bhi.n	80039b8 <UART_SetConfig+0x14c>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <UART_SetConfig+0xf8>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003999 	.word	0x08003999
 8003968:	080039b9 	.word	0x080039b9
 800396c:	080039b9 	.word	0x080039b9
 8003970:	080039b9 	.word	0x080039b9
 8003974:	080039a9 	.word	0x080039a9
 8003978:	080039b9 	.word	0x080039b9
 800397c:	080039b9 	.word	0x080039b9
 8003980:	080039b9 	.word	0x080039b9
 8003984:	080039a1 	.word	0x080039a1
 8003988:	080039b9 	.word	0x080039b9
 800398c:	080039b9 	.word	0x080039b9
 8003990:	080039b9 	.word	0x080039b9
 8003994:	080039b1 	.word	0x080039b1
 8003998:	2300      	movs	r3, #0
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e0d8      	b.n	8003b52 <UART_SetConfig+0x2e6>
 80039a0:	2302      	movs	r3, #2
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e0d4      	b.n	8003b52 <UART_SetConfig+0x2e6>
 80039a8:	2304      	movs	r3, #4
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ae:	e0d0      	b.n	8003b52 <UART_SetConfig+0x2e6>
 80039b0:	2308      	movs	r3, #8
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b6:	e0cc      	b.n	8003b52 <UART_SetConfig+0x2e6>
 80039b8:	2310      	movs	r3, #16
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039be:	e0c8      	b.n	8003b52 <UART_SetConfig+0x2e6>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a5e      	ldr	r2, [pc, #376]	; (8003b40 <UART_SetConfig+0x2d4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d125      	bne.n	8003a16 <UART_SetConfig+0x1aa>
 80039ca:	4b5b      	ldr	r3, [pc, #364]	; (8003b38 <UART_SetConfig+0x2cc>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039d4:	2b30      	cmp	r3, #48	; 0x30
 80039d6:	d016      	beq.n	8003a06 <UART_SetConfig+0x19a>
 80039d8:	2b30      	cmp	r3, #48	; 0x30
 80039da:	d818      	bhi.n	8003a0e <UART_SetConfig+0x1a2>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d00a      	beq.n	80039f6 <UART_SetConfig+0x18a>
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d814      	bhi.n	8003a0e <UART_SetConfig+0x1a2>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <UART_SetConfig+0x182>
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d008      	beq.n	80039fe <UART_SetConfig+0x192>
 80039ec:	e00f      	b.n	8003a0e <UART_SetConfig+0x1a2>
 80039ee:	2300      	movs	r3, #0
 80039f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f4:	e0ad      	b.n	8003b52 <UART_SetConfig+0x2e6>
 80039f6:	2302      	movs	r3, #2
 80039f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fc:	e0a9      	b.n	8003b52 <UART_SetConfig+0x2e6>
 80039fe:	2304      	movs	r3, #4
 8003a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a04:	e0a5      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003a06:	2308      	movs	r3, #8
 8003a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0c:	e0a1      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003a0e:	2310      	movs	r3, #16
 8003a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a14:	e09d      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a4a      	ldr	r2, [pc, #296]	; (8003b44 <UART_SetConfig+0x2d8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d125      	bne.n	8003a6c <UART_SetConfig+0x200>
 8003a20:	4b45      	ldr	r3, [pc, #276]	; (8003b38 <UART_SetConfig+0x2cc>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a2c:	d016      	beq.n	8003a5c <UART_SetConfig+0x1f0>
 8003a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a30:	d818      	bhi.n	8003a64 <UART_SetConfig+0x1f8>
 8003a32:	2b80      	cmp	r3, #128	; 0x80
 8003a34:	d00a      	beq.n	8003a4c <UART_SetConfig+0x1e0>
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d814      	bhi.n	8003a64 <UART_SetConfig+0x1f8>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <UART_SetConfig+0x1d8>
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d008      	beq.n	8003a54 <UART_SetConfig+0x1e8>
 8003a42:	e00f      	b.n	8003a64 <UART_SetConfig+0x1f8>
 8003a44:	2300      	movs	r3, #0
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4a:	e082      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a52:	e07e      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003a54:	2304      	movs	r3, #4
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5a:	e07a      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a62:	e076      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003a64:	2310      	movs	r3, #16
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6a:	e072      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a35      	ldr	r2, [pc, #212]	; (8003b48 <UART_SetConfig+0x2dc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d12a      	bne.n	8003acc <UART_SetConfig+0x260>
 8003a76:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <UART_SetConfig+0x2cc>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a84:	d01a      	beq.n	8003abc <UART_SetConfig+0x250>
 8003a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8a:	d81b      	bhi.n	8003ac4 <UART_SetConfig+0x258>
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a90:	d00c      	beq.n	8003aac <UART_SetConfig+0x240>
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a96:	d815      	bhi.n	8003ac4 <UART_SetConfig+0x258>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <UART_SetConfig+0x238>
 8003a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa0:	d008      	beq.n	8003ab4 <UART_SetConfig+0x248>
 8003aa2:	e00f      	b.n	8003ac4 <UART_SetConfig+0x258>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e052      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003aac:	2302      	movs	r3, #2
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e04e      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e04a      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003abc:	2308      	movs	r3, #8
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac2:	e046      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aca:	e042      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <UART_SetConfig+0x2c4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d13a      	bne.n	8003b4c <UART_SetConfig+0x2e0>
 8003ad6:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <UART_SetConfig+0x2cc>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ae4:	d01a      	beq.n	8003b1c <UART_SetConfig+0x2b0>
 8003ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aea:	d81b      	bhi.n	8003b24 <UART_SetConfig+0x2b8>
 8003aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af0:	d00c      	beq.n	8003b0c <UART_SetConfig+0x2a0>
 8003af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af6:	d815      	bhi.n	8003b24 <UART_SetConfig+0x2b8>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <UART_SetConfig+0x298>
 8003afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b00:	d008      	beq.n	8003b14 <UART_SetConfig+0x2a8>
 8003b02:	e00f      	b.n	8003b24 <UART_SetConfig+0x2b8>
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e022      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e01e      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003b14:	2304      	movs	r3, #4
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e01a      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e016      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003b24:	2310      	movs	r3, #16
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e012      	b.n	8003b52 <UART_SetConfig+0x2e6>
 8003b2c:	efff69f3 	.word	0xefff69f3
 8003b30:	40008000 	.word	0x40008000
 8003b34:	40013800 	.word	0x40013800
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40004400 	.word	0x40004400
 8003b40:	40004800 	.word	0x40004800
 8003b44:	40004c00 	.word	0x40004c00
 8003b48:	40005000 	.word	0x40005000
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a9f      	ldr	r2, [pc, #636]	; (8003dd4 <UART_SetConfig+0x568>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d17a      	bne.n	8003c52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d824      	bhi.n	8003bae <UART_SetConfig+0x342>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0x300>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b91 	.word	0x08003b91
 8003b70:	08003baf 	.word	0x08003baf
 8003b74:	08003b99 	.word	0x08003b99
 8003b78:	08003baf 	.word	0x08003baf
 8003b7c:	08003b9f 	.word	0x08003b9f
 8003b80:	08003baf 	.word	0x08003baf
 8003b84:	08003baf 	.word	0x08003baf
 8003b88:	08003baf 	.word	0x08003baf
 8003b8c:	08003ba7 	.word	0x08003ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b90:	f7fe fc94 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8003b94:	61f8      	str	r0, [r7, #28]
        break;
 8003b96:	e010      	b.n	8003bba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b98:	4b8f      	ldr	r3, [pc, #572]	; (8003dd8 <UART_SetConfig+0x56c>)
 8003b9a:	61fb      	str	r3, [r7, #28]
        break;
 8003b9c:	e00d      	b.n	8003bba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9e:	f7fe fbf5 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8003ba2:	61f8      	str	r0, [r7, #28]
        break;
 8003ba4:	e009      	b.n	8003bba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003baa:	61fb      	str	r3, [r7, #28]
        break;
 8003bac:	e005      	b.n	8003bba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80fb 	beq.w	8003db8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d305      	bcc.n	8003bde <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d903      	bls.n	8003be6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003be4:	e0e8      	b.n	8003db8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2200      	movs	r2, #0
 8003bea:	461c      	mov	r4, r3
 8003bec:	4615      	mov	r5, r2
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	022b      	lsls	r3, r5, #8
 8003bf8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bfc:	0222      	lsls	r2, r4, #8
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	6849      	ldr	r1, [r1, #4]
 8003c02:	0849      	lsrs	r1, r1, #1
 8003c04:	2000      	movs	r0, #0
 8003c06:	4688      	mov	r8, r1
 8003c08:	4681      	mov	r9, r0
 8003c0a:	eb12 0a08 	adds.w	sl, r2, r8
 8003c0e:	eb43 0b09 	adc.w	fp, r3, r9
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c20:	4650      	mov	r0, sl
 8003c22:	4659      	mov	r1, fp
 8003c24:	f7fc fb34 	bl	8000290 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c36:	d308      	bcc.n	8003c4a <UART_SetConfig+0x3de>
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c3e:	d204      	bcs.n	8003c4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	e0b6      	b.n	8003db8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c50:	e0b2      	b.n	8003db8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5a:	d15e      	bne.n	8003d1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d828      	bhi.n	8003cb6 <UART_SetConfig+0x44a>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <UART_SetConfig+0x400>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003c99 	.word	0x08003c99
 8003c74:	08003ca1 	.word	0x08003ca1
 8003c78:	08003cb7 	.word	0x08003cb7
 8003c7c:	08003ca7 	.word	0x08003ca7
 8003c80:	08003cb7 	.word	0x08003cb7
 8003c84:	08003cb7 	.word	0x08003cb7
 8003c88:	08003cb7 	.word	0x08003cb7
 8003c8c:	08003caf 	.word	0x08003caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c90:	f7fe fc14 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8003c94:	61f8      	str	r0, [r7, #28]
        break;
 8003c96:	e014      	b.n	8003cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c98:	f7fe fc26 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8003c9c:	61f8      	str	r0, [r7, #28]
        break;
 8003c9e:	e010      	b.n	8003cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca0:	4b4d      	ldr	r3, [pc, #308]	; (8003dd8 <UART_SetConfig+0x56c>)
 8003ca2:	61fb      	str	r3, [r7, #28]
        break;
 8003ca4:	e00d      	b.n	8003cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca6:	f7fe fb71 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8003caa:	61f8      	str	r0, [r7, #28]
        break;
 8003cac:	e009      	b.n	8003cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb2:	61fb      	str	r3, [r7, #28]
        break;
 8003cb4:	e005      	b.n	8003cc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d077      	beq.n	8003db8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	005a      	lsls	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	441a      	add	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b0f      	cmp	r3, #15
 8003ce2:	d916      	bls.n	8003d12 <UART_SetConfig+0x4a6>
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cea:	d212      	bcs.n	8003d12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f023 030f 	bic.w	r3, r3, #15
 8003cf4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	8afb      	ldrh	r3, [r7, #22]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	8afa      	ldrh	r2, [r7, #22]
 8003d0e:	60da      	str	r2, [r3, #12]
 8003d10:	e052      	b.n	8003db8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d18:	e04e      	b.n	8003db8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d827      	bhi.n	8003d72 <UART_SetConfig+0x506>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0x4bc>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fe fbb6 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8003d50:	61f8      	str	r0, [r7, #28]
        break;
 8003d52:	e014      	b.n	8003d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7fe fbc8 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8003d58:	61f8      	str	r0, [r7, #28]
        break;
 8003d5a:	e010      	b.n	8003d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <UART_SetConfig+0x56c>)
 8003d5e:	61fb      	str	r3, [r7, #28]
        break;
 8003d60:	e00d      	b.n	8003d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7fe fb13 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8003d66:	61f8      	str	r0, [r7, #28]
        break;
 8003d68:	e009      	b.n	8003d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	61fb      	str	r3, [r7, #28]
        break;
 8003d70:	e005      	b.n	8003d7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d019      	beq.n	8003db8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	085a      	lsrs	r2, r3, #1
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	441a      	add	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	d909      	bls.n	8003db2 <UART_SetConfig+0x546>
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d205      	bcs.n	8003db2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60da      	str	r2, [r3, #12]
 8003db0:	e002      	b.n	8003db8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003dc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3728      	adds	r7, #40	; 0x28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40008000 	.word	0x40008000
 8003dd8:	00f42400 	.word	0x00f42400

08003ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01a      	beq.n	8003ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eda:	d10a      	bne.n	8003ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]
  }
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f30:	f7fd f934 	bl	800119c <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d10e      	bne.n	8003f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f82d 	bl	8003fb2 <UART_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e023      	b.n	8003faa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d10e      	bne.n	8003f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f817 	bl	8003fb2 <UART_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e00d      	b.n	8003faa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b09c      	sub	sp, #112	; 0x70
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	603b      	str	r3, [r7, #0]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc2:	e0a5      	b.n	8004110 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	f000 80a1 	beq.w	8004110 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fce:	f7fd f8e5 	bl	800119c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d13e      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004004:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e6      	bne.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3308      	adds	r3, #8
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	663b      	str	r3, [r7, #96]	; 0x60
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3308      	adds	r3, #8
 8004034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004036:	64ba      	str	r2, [r7, #72]	; 0x48
 8004038:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800403c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e067      	b.n	8004132 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d04f      	beq.n	8004110 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407e:	d147      	bne.n	8004110 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004088:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800409e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
 80040aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e6      	bne.n	800408a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	613b      	str	r3, [r7, #16]
   return(result);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040dc:	623a      	str	r2, [r7, #32]
 80040de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	69f9      	ldr	r1, [r7, #28]
 80040e2:	6a3a      	ldr	r2, [r7, #32]
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e5      	bne.n	80040bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e010      	b.n	8004132 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	429a      	cmp	r2, r3
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	429a      	cmp	r2, r3
 800412c:	f43f af4a 	beq.w	8003fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3770      	adds	r7, #112	; 0x70
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800413c:	b480      	push	{r7}
 800413e:	b097      	sub	sp, #92	; 0x5c
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	d10e      	bne.n	800418e <UART_Start_Receive_IT+0x52>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <UART_Start_Receive_IT+0x48>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800417e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004182:	e02d      	b.n	80041e0 <UART_Start_Receive_IT+0xa4>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	22ff      	movs	r2, #255	; 0xff
 8004188:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800418c:	e028      	b.n	80041e0 <UART_Start_Receive_IT+0xa4>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10d      	bne.n	80041b2 <UART_Start_Receive_IT+0x76>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <UART_Start_Receive_IT+0x6c>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041a6:	e01b      	b.n	80041e0 <UART_Start_Receive_IT+0xa4>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	227f      	movs	r2, #127	; 0x7f
 80041ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041b0:	e016      	b.n	80041e0 <UART_Start_Receive_IT+0xa4>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ba:	d10d      	bne.n	80041d8 <UART_Start_Receive_IT+0x9c>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d104      	bne.n	80041ce <UART_Start_Receive_IT+0x92>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	227f      	movs	r2, #127	; 0x7f
 80041c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041cc:	e008      	b.n	80041e0 <UART_Start_Receive_IT+0xa4>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	223f      	movs	r2, #63	; 0x3f
 80041d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041d6:	e003      	b.n	80041e0 <UART_Start_Receive_IT+0xa4>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2222      	movs	r2, #34	; 0x22
 80041ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3308      	adds	r3, #8
 80041f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	657b      	str	r3, [r7, #84]	; 0x54
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800420e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800421c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e5      	bne.n	80041ee <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	d107      	bne.n	800423c <UART_Start_Receive_IT+0x100>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d103      	bne.n	800423c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a24      	ldr	r2, [pc, #144]	; (80042c8 <UART_Start_Receive_IT+0x18c>)
 8004238:	665a      	str	r2, [r3, #100]	; 0x64
 800423a:	e002      	b.n	8004242 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a23      	ldr	r2, [pc, #140]	; (80042cc <UART_Start_Receive_IT+0x190>)
 8004240:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d019      	beq.n	8004286 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
 8004272:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e6      	bne.n	8004252 <UART_Start_Receive_IT+0x116>
 8004284:	e018      	b.n	80042b8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	613b      	str	r3, [r7, #16]
   return(result);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f043 0320 	orr.w	r3, r3, #32
 800429a:	653b      	str	r3, [r7, #80]	; 0x50
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	69f9      	ldr	r1, [r7, #28]
 80042aa:	6a3a      	ldr	r2, [r7, #32]
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	375c      	adds	r7, #92	; 0x5c
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	08004577 	.word	0x08004577
 80042cc:	08004417 	.word	0x08004417

080042d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b095      	sub	sp, #84	; 0x54
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f6:	643b      	str	r3, [r7, #64]	; 0x40
 80042f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e6      	bne.n	80042d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3308      	adds	r3, #8
 8004310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	61fb      	str	r3, [r7, #28]
   return(result);
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	64bb      	str	r3, [r7, #72]	; 0x48
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3308      	adds	r3, #8
 8004328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800432a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e5      	bne.n	800430a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004342:	2b01      	cmp	r3, #1
 8004344:	d118      	bne.n	8004378 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	60bb      	str	r3, [r7, #8]
   return(result);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f023 0310 	bic.w	r3, r3, #16
 800435a:	647b      	str	r3, [r7, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6979      	ldr	r1, [r7, #20]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	613b      	str	r3, [r7, #16]
   return(result);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e6      	bne.n	8004346 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	665a      	str	r2, [r3, #100]	; 0x64
}
 800438a:	bf00      	nop
 800438c:	3754      	adds	r7, #84	; 0x54
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff fa43 	bl	8003840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b088      	sub	sp, #32
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6979      	ldr	r1, [r7, #20]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	613b      	str	r3, [r7, #16]
   return(result);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e6      	bne.n	80043ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff fa0f 	bl	800382c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800440e:	bf00      	nop
 8004410:	3720      	adds	r7, #32
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b096      	sub	sp, #88	; 0x58
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004424:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442c:	2b22      	cmp	r3, #34	; 0x22
 800442e:	f040 8094 	bne.w	800455a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004438:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800443c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004440:	b2d9      	uxtb	r1, r3
 8004442:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004446:	b2da      	uxtb	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	400a      	ands	r2, r1
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d179      	bne.n	800456e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800448e:	653b      	str	r3, [r7, #80]	; 0x50
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004498:	647b      	str	r3, [r7, #68]	; 0x44
 800449a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800449e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e6      	bne.n	800447a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3308      	adds	r3, #8
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	623b      	str	r3, [r7, #32]
   return(result);
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044cc:	633a      	str	r2, [r7, #48]	; 0x30
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d12e      	bne.n	8004552 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	60fb      	str	r3, [r7, #12]
   return(result);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0310 	bic.w	r3, r3, #16
 800450e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	69b9      	ldr	r1, [r7, #24]
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	617b      	str	r3, [r7, #20]
   return(result);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b10      	cmp	r3, #16
 8004538:	d103      	bne.n	8004542 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2210      	movs	r2, #16
 8004540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff f982 	bl	8003854 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004550:	e00d      	b.n	800456e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc f83e 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8004558:	e009      	b.n	800456e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	8b1b      	ldrh	r3, [r3, #24]
 8004560:	b29a      	uxth	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0208 	orr.w	r2, r2, #8
 800456a:	b292      	uxth	r2, r2
 800456c:	831a      	strh	r2, [r3, #24]
}
 800456e:	bf00      	nop
 8004570:	3758      	adds	r7, #88	; 0x58
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b096      	sub	sp, #88	; 0x58
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004584:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800458c:	2b22      	cmp	r3, #34	; 0x22
 800458e:	f040 8094 	bne.w	80046ba <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004598:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80045a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80045a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80045aa:	4013      	ands	r3, r2
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	1c9a      	adds	r2, r3, #2
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d179      	bne.n	80046ce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f8:	643b      	str	r3, [r7, #64]	; 0x40
 80045fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e6      	bne.n	80045da <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	61fb      	str	r3, [r7, #28]
   return(result);
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	64bb      	str	r3, [r7, #72]	; 0x48
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800462c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e5      	bne.n	800460c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004650:	2b01      	cmp	r3, #1
 8004652:	d12e      	bne.n	80046b2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	60bb      	str	r3, [r7, #8]
   return(result);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f023 0310 	bic.w	r3, r3, #16
 800466e:	647b      	str	r3, [r7, #68]	; 0x44
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6979      	ldr	r1, [r7, #20]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	613b      	str	r3, [r7, #16]
   return(result);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e6      	bne.n	800465a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b10      	cmp	r3, #16
 8004698:	d103      	bne.n	80046a2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2210      	movs	r2, #16
 80046a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff f8d2 	bl	8003854 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046b0:	e00d      	b.n	80046ce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fb ff8e 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 80046b8:	e009      	b.n	80046ce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	8b1b      	ldrh	r3, [r3, #24]
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0208 	orr.w	r2, r2, #8
 80046ca:	b292      	uxth	r2, r2
 80046cc:	831a      	strh	r2, [r3, #24]
}
 80046ce:	bf00      	nop
 80046d0:	3758      	adds	r7, #88	; 0x58
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	f023 0101 	bic.w	r1, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b08      	cmp	r3, #8
 8004714:	d102      	bne.n	800471c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004716:	2340      	movs	r3, #64	; 0x40
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e001      	b.n	8004720 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800472c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004732:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004738:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800473e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8004744:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800474a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8004750:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8004756:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800475c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8004784:	4b20      	ldr	r3, [pc, #128]	; (8004808 <FMC_NORSRAM_Init+0x11c>)
 8004786:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800478e:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004796:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800479e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	ea02 0103 	and.w	r1, r2, r3
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4319      	orrs	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c8:	d10c      	bne.n	80047e4 <FMC_NORSRAM_Init+0xf8>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d006      	beq.n	80047fa <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	0008fb7f 	.word	0x0008fb7f

0800480c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004822:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	431a      	orrs	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	431a      	orrs	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	3b01      	subs	r3, #1
 8004848:	051b      	lsls	r3, r3, #20
 800484a:	431a      	orrs	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	3b02      	subs	r3, #2
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	431a      	orrs	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	4313      	orrs	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	3201      	adds	r2, #1
 8004860:	4319      	orrs	r1, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004874:	d113      	bne.n	800489e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800487e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	3b01      	subs	r3, #1
 8004886:	051b      	lsls	r3, r3, #20
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	431a      	orrs	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c0:	d11d      	bne.n	80048fe <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	6811      	ldr	r1, [r2, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	6852      	ldr	r2, [r2, #4]
 80048d6:	0112      	lsls	r2, r2, #4
 80048d8:	4311      	orrs	r1, r2
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	6892      	ldr	r2, [r2, #8]
 80048de:	0212      	lsls	r2, r2, #8
 80048e0:	4311      	orrs	r1, r2
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	69d2      	ldr	r2, [r2, #28]
 80048e6:	4311      	orrs	r1, r2
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	6912      	ldr	r2, [r2, #16]
 80048ec:	0412      	lsls	r2, r2, #16
 80048ee:	430a      	orrs	r2, r1
 80048f0:	ea43 0102 	orr.w	r1, r3, r2
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80048fc:	e005      	b.n	800490a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	cff00000 	.word	0xcff00000

0800491c <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint32_t ChipAddr, uint8_t sn, uint8_t* buf, uint16_t port)
{
 800491c:	b5b0      	push	{r4, r5, r7, lr}
 800491e:	b08c      	sub	sp, #48	; 0x30
 8004920:	af04      	add	r7, sp, #16
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	461a      	mov	r2, r3
 8004928:	460b      	mov	r3, r1
 800492a:	72fb      	strb	r3, [r7, #11]
 800492c:	4613      	mov	r3, r2
 800492e:	813b      	strh	r3, [r7, #8]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8004930:	2300      	movs	r3, #0
 8004932:	83fb      	strh	r3, [r7, #30]
 8004934:	2300      	movs	r3, #0
 8004936:	83bb      	strh	r3, [r7, #28]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(ChipAddr, sn))
 8004938:	7afb      	ldrb	r3, [r7, #11]
 800493a:	3308      	adds	r3, #8
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	3308      	adds	r3, #8
 8004940:	4619      	mov	r1, r3
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f958 	bl	8004bf8 <WIZCHIP_READ>
 8004948:	4603      	mov	r3, r0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b1c      	cmp	r3, #28
 800494e:	f200 8128 	bhi.w	8004ba2 <loopback_tcps+0x286>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <loopback_tcps+0x3c>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004b83 	.word	0x08004b83
 800495c:	08004ba3 	.word	0x08004ba3
 8004960:	08004ba3 	.word	0x08004ba3
 8004964:	08004ba3 	.word	0x08004ba3
 8004968:	08004ba3 	.word	0x08004ba3
 800496c:	08004ba3 	.word	0x08004ba3
 8004970:	08004ba3 	.word	0x08004ba3
 8004974:	08004ba3 	.word	0x08004ba3
 8004978:	08004ba3 	.word	0x08004ba3
 800497c:	08004ba3 	.word	0x08004ba3
 8004980:	08004ba3 	.word	0x08004ba3
 8004984:	08004ba3 	.word	0x08004ba3
 8004988:	08004ba3 	.word	0x08004ba3
 800498c:	08004ba3 	.word	0x08004ba3
 8004990:	08004ba3 	.word	0x08004ba3
 8004994:	08004ba3 	.word	0x08004ba3
 8004998:	08004ba3 	.word	0x08004ba3
 800499c:	08004ba3 	.word	0x08004ba3
 80049a0:	08004ba3 	.word	0x08004ba3
 80049a4:	08004b5f 	.word	0x08004b5f
 80049a8:	08004ba3 	.word	0x08004ba3
 80049ac:	08004ba3 	.word	0x08004ba3
 80049b0:	08004ba3 	.word	0x08004ba3
 80049b4:	080049cd 	.word	0x080049cd
 80049b8:	08004ba3 	.word	0x08004ba3
 80049bc:	08004ba3 	.word	0x08004ba3
 80049c0:	08004ba3 	.word	0x08004ba3
 80049c4:	08004ba3 	.word	0x08004ba3
 80049c8:	08004b31 	.word	0x08004b31
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(ChipAddr, sn) & Sn_IR_CON)
 80049cc:	7afb      	ldrb	r3, [r7, #11]
 80049ce:	3308      	adds	r3, #8
 80049d0:	019b      	lsls	r3, r3, #6
 80049d2:	3306      	adds	r3, #6
 80049d4:	4619      	mov	r1, r3
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f90e 	bl	8004bf8 <WIZCHIP_READ>
 80049dc:	4603      	mov	r3, r0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d055      	beq.n	8004a94 <loopback_tcps+0x178>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(ChipAddr, sn, destip);
 80049e8:	7afb      	ldrb	r3, [r7, #11]
 80049ea:	3308      	adds	r3, #8
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	3314      	adds	r3, #20
 80049f0:	4619      	mov	r1, r3
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f900 	bl	8004bf8 <WIZCHIP_READ>
 80049f8:	4603      	mov	r3, r0
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	743b      	strb	r3, [r7, #16]
 8004a02:	7afb      	ldrb	r3, [r7, #11]
 8004a04:	3308      	adds	r3, #8
 8004a06:	019b      	lsls	r3, r3, #6
 8004a08:	3314      	adds	r3, #20
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f8f3 	bl	8004bf8 <WIZCHIP_READ>
 8004a12:	4603      	mov	r3, r0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	747b      	strb	r3, [r7, #17]
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	019b      	lsls	r3, r3, #6
 8004a1e:	3316      	adds	r3, #22
 8004a20:	4619      	mov	r1, r3
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f8e8 	bl	8004bf8 <WIZCHIP_READ>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	74bb      	strb	r3, [r7, #18]
 8004a32:	7afb      	ldrb	r3, [r7, #11]
 8004a34:	3308      	adds	r3, #8
 8004a36:	019b      	lsls	r3, r3, #6
 8004a38:	3316      	adds	r3, #22
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f8db 	bl	8004bf8 <WIZCHIP_READ>
 8004a42:	4603      	mov	r3, r0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	74fb      	strb	r3, [r7, #19]
			destport = getSn_DPORT(ChipAddr, sn);
 8004a48:	7afb      	ldrb	r3, [r7, #11]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	019b      	lsls	r3, r3, #6
 8004a4e:	3312      	adds	r3, #18
 8004a50:	4619      	mov	r1, r3
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f8d0 	bl	8004bf8 <WIZCHIP_READ>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	82fb      	strh	r3, [r7, #22]

			printf("%x -> %d:Connected - %d.%d.%d.%d : %d\r\n", ChipAddr ,sn, destip[0], destip[1], destip[2], destip[3], destport);
 8004a5c:	7afa      	ldrb	r2, [r7, #11]
 8004a5e:	7c3b      	ldrb	r3, [r7, #16]
 8004a60:	461d      	mov	r5, r3
 8004a62:	7c7b      	ldrb	r3, [r7, #17]
 8004a64:	4619      	mov	r1, r3
 8004a66:	7cbb      	ldrb	r3, [r7, #18]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	461c      	mov	r4, r3
 8004a6e:	8afb      	ldrh	r3, [r7, #22]
 8004a70:	9303      	str	r3, [sp, #12]
 8004a72:	9402      	str	r4, [sp, #8]
 8004a74:	9001      	str	r0, [sp, #4]
 8004a76:	9100      	str	r1, [sp, #0]
 8004a78:	462b      	mov	r3, r5
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	484f      	ldr	r0, [pc, #316]	; (8004bbc <loopback_tcps+0x2a0>)
 8004a7e:	f001 fe79 	bl	8006774 <iprintf>
#endif
			setSn_IR(ChipAddr, sn,Sn_IR_CON);
 8004a82:	7afb      	ldrb	r3, [r7, #11]
 8004a84:	3308      	adds	r3, #8
 8004a86:	019b      	lsls	r3, r3, #6
 8004a88:	3306      	adds	r3, #6
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f89e 	bl	8004bd0 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(ChipAddr, sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8004a94:	7afb      	ldrb	r3, [r7, #11]
 8004a96:	4619      	mov	r1, r3
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f937 	bl	8004d0c <getSn_RX_RSR>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	83fb      	strh	r3, [r7, #30]
 8004aa2:	8bfb      	ldrh	r3, [r7, #30]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d07e      	beq.n	8004ba6 <loopback_tcps+0x28a>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8004aa8:	8bfb      	ldrh	r3, [r7, #30]
 8004aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aae:	d902      	bls.n	8004ab6 <loopback_tcps+0x19a>
 8004ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ab4:	83fb      	strh	r3, [r7, #30]
			ret = recv(ChipAddr, sn, buf, size);
 8004ab6:	8bfb      	ldrh	r3, [r7, #30]
 8004ab8:	7af9      	ldrb	r1, [r7, #11]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fda1 	bl	8005604 <recv>
 8004ac2:	61b8      	str	r0, [r7, #24]
			printf("%x -> %d:recv[%d][%d][%s]\r\n", ChipAddr ,sn, size, ret, buf);
 8004ac4:	7afa      	ldrb	r2, [r7, #11]
 8004ac6:	8bf9      	ldrh	r1, [r7, #30]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	483a      	ldr	r0, [pc, #232]	; (8004bc0 <loopback_tcps+0x2a4>)
 8004ad6:	f001 fe4d 	bl	8006774 <iprintf>
			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	dc01      	bgt.n	8004ae4 <loopback_tcps+0x1c8>
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	e066      	b.n	8004bb2 <loopback_tcps+0x296>
			size = (uint16_t) ret;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	83fb      	strh	r3, [r7, #30]
			sentsize = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	83bb      	strh	r3, [r7, #28]

			while(size != sentsize)
 8004aec:	e01b      	b.n	8004b26 <loopback_tcps+0x20a>
			{
				ret = send(ChipAddr, sn, buf+sentsize, size-sentsize);
 8004aee:	8bbb      	ldrh	r3, [r7, #28]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	18d0      	adds	r0, r2, r3
 8004af4:	8bfa      	ldrh	r2, [r7, #30]
 8004af6:	8bbb      	ldrh	r3, [r7, #28]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	7af9      	ldrb	r1, [r7, #11]
 8004afe:	4602      	mov	r2, r0
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fc75 	bl	80053f0 <send>
 8004b06:	61b8      	str	r0, [r7, #24]
				if(ret < 0)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da06      	bge.n	8004b1c <loopback_tcps+0x200>
				{
					close(ChipAddr, sn);
 8004b0e:	7afb      	ldrb	r3, [r7, #11]
 8004b10:	4619      	mov	r1, r3
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 face 	bl	80050b4 <close>
					return ret;
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	e04a      	b.n	8004bb2 <loopback_tcps+0x296>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	8bbb      	ldrh	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	83bb      	strh	r3, [r7, #28]
			while(size != sentsize)
 8004b26:	8bfa      	ldrh	r2, [r7, #30]
 8004b28:	8bbb      	ldrh	r3, [r7, #28]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d1df      	bne.n	8004aee <loopback_tcps+0x1d2>
			}
         }
         break;
 8004b2e:	e03a      	b.n	8004ba6 <loopback_tcps+0x28a>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         printf("%d:CloseWait\r\n",sn);
 8004b30:	7afb      	ldrb	r3, [r7, #11]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4823      	ldr	r0, [pc, #140]	; (8004bc4 <loopback_tcps+0x2a8>)
 8004b36:	f001 fe1d 	bl	8006774 <iprintf>
#endif
         if((ret = disconnect(ChipAddr, sn)) != SOCK_OK) return ret;
 8004b3a:	7afb      	ldrb	r3, [r7, #11]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fbde 	bl	8005300 <disconnect>
 8004b44:	4603      	mov	r3, r0
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <loopback_tcps+0x236>
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	e02f      	b.n	8004bb2 <loopback_tcps+0x296>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 8004b52:	7afb      	ldrb	r3, [r7, #11]
 8004b54:	4619      	mov	r1, r3
 8004b56:	481c      	ldr	r0, [pc, #112]	; (8004bc8 <loopback_tcps+0x2ac>)
 8004b58:	f001 fe0c 	bl	8006774 <iprintf>
#endif
         break;
 8004b5c:	e028      	b.n	8004bb0 <loopback_tcps+0x294>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 8004b5e:	7afb      	ldrb	r3, [r7, #11]
 8004b60:	893a      	ldrh	r2, [r7, #8]
 8004b62:	4619      	mov	r1, r3
 8004b64:	4819      	ldr	r0, [pc, #100]	; (8004bcc <loopback_tcps+0x2b0>)
 8004b66:	f001 fe05 	bl	8006774 <iprintf>
#endif
         if( (ret = listen(ChipAddr, sn)) != SOCK_OK) return ret;
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fb6c 	bl	800524c <listen>
 8004b74:	4603      	mov	r3, r0
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d015      	beq.n	8004baa <loopback_tcps+0x28e>
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	e017      	b.n	8004bb2 <loopback_tcps+0x296>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(ChipAddr, sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8004b82:	893b      	ldrh	r3, [r7, #8]
 8004b84:	7af9      	ldrb	r1, [r7, #11]
 8004b86:	2200      	movs	r2, #0
 8004b88:	9200      	str	r2, [sp, #0]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f96d 	bl	8004e6c <socket>
 8004b92:	4603      	mov	r3, r0
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	7afb      	ldrb	r3, [r7, #11]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d007      	beq.n	8004bae <loopback_tcps+0x292>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	e007      	b.n	8004bb2 <loopback_tcps+0x296>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8004ba2:	bf00      	nop
 8004ba4:	e004      	b.n	8004bb0 <loopback_tcps+0x294>
         break;
 8004ba6:	bf00      	nop
 8004ba8:	e002      	b.n	8004bb0 <loopback_tcps+0x294>
         break;
 8004baa:	bf00      	nop
 8004bac:	e000      	b.n	8004bb0 <loopback_tcps+0x294>
         break;
 8004bae:	bf00      	nop
   }
   return 1;
 8004bb0:	2301      	movs	r3, #1
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	08007894 	.word	0x08007894
 8004bc0:	080078bc 	.word	0x080078bc
 8004bc4:	080078d8 	.word	0x080078d8
 8004bc8:	080078e8 	.word	0x080078e8
 8004bcc:	080078fc 	.word	0x080078fc

08004bd0 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t ChipAddr, uint32_t AddrSel, uint16_t wb )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
#if _USE_W5300_OPTIMIZE
	_W5300_DATA(ChipAddr, AddrSel) = wb;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	005a      	lsls	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	461a      	mov	r2, r3
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	8013      	strh	r3, [r2, #0]
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
#endif
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t ChipAddr, uint32_t AddrSel)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
   uint16_t ret;
#if _USE_W5300_OPTIMIZE
   ret = _W5300_DATA(ChipAddr, AddrSel);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	005a      	lsls	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	81fb      	strh	r3, [r7, #14]
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
   #endif
   return ret;
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <getTMSR>:
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
   WIZCHIP_WRITE(ChipAddr, WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
}
   
uint8_t getTMSR(uint32_t ChipAddr, uint8_t sn)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
   if(sn & 0x01)
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <getTMSR+0x2c>
      return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c38:	3320      	adds	r3, #32
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ffdb 	bl	8004bf8 <WIZCHIP_READ>
 8004c42:	4603      	mov	r3, r0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e00b      	b.n	8004c60 <getTMSR+0x44>
   return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c4e:	3320      	adds	r3, #32
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ffd0 	bl	8004bf8 <WIZCHIP_READ>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	0a1b      	lsrs	r3, r3, #8
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <getRMSR>:
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
   WIZCHIP_WRITE(ChipAddr, WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
}
   
uint8_t getRMSR(uint32_t ChipAddr, uint8_t sn)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
   if(sn & 0x01)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <getRMSR+0x2c>
      return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c84:	3328      	adds	r3, #40	; 0x28
 8004c86:	4619      	mov	r1, r3
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ffb5 	bl	8004bf8 <WIZCHIP_READ>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e00b      	b.n	8004cac <getRMSR+0x44>
   return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c9a:	3328      	adds	r3, #40	; 0x28
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ffaa 	bl	8004bf8 <WIZCHIP_READ>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint32_t ChipAddr, uint8_t sn)
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	70fb      	strb	r3, [r7, #3]
   uint32_t free_tx_size=0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_TX_FSR(sn))) << 16) | 
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	019b      	lsls	r3, r3, #6
 8004cce:	3324      	adds	r3, #36	; 0x24
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ff90 	bl	8004bf8 <WIZCHIP_READ>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	3308      	adds	r3, #8
 8004ce0:	019b      	lsls	r3, r3, #6
 8004ce2:	3326      	adds	r3, #38	; 0x26
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ff86 	bl	8004bf8 <WIZCHIP_READ>
 8004cec:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_TX_FSR(sn))) << 16) | 
 8004cee:	4323      	orrs	r3, r4
 8004cf0:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d002      	beq.n	8004d00 <getSn_TX_FSR+0x4c>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_TX_FSR(sn))) << 16) | 
 8004cfe:	e7e3      	b.n	8004cc8 <getSn_TX_FSR+0x14>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8004d00:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8004d02:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd90      	pop	{r4, r7, pc}

08004d0c <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint32_t ChipAddr, uint8_t sn)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
   uint32_t received_rx_size=0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_RX_RSR(sn))) << 16) | 
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	3308      	adds	r3, #8
 8004d24:	019b      	lsls	r3, r3, #6
 8004d26:	3328      	adds	r3, #40	; 0x28
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ff64 	bl	8004bf8 <WIZCHIP_READ>
 8004d30:	4603      	mov	r3, r0
 8004d32:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	3308      	adds	r3, #8
 8004d38:	019b      	lsls	r3, r3, #6
 8004d3a:	332a      	adds	r3, #42	; 0x2a
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff ff5a 	bl	8004bf8 <WIZCHIP_READ>
 8004d44:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_RX_RSR(sn))) << 16) | 
 8004d46:	4323      	orrs	r3, r4
 8004d48:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d002      	beq.n	8004d58 <getSn_RX_RSR+0x4c>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_RX_RSR(sn))) << 16) | 
 8004d56:	e7e3      	b.n	8004d20 <getSn_RX_RSR+0x14>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8004d58:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	4a05      	ldr	r2, [pc, #20]	; (8004d74 <getSn_RX_RSR+0x68>)
 8004d5e:	5cd3      	ldrb	r3, [r2, r3]
 8004d60:	105b      	asrs	r3, r3, #1
 8004d62:	f003 0201 	and.w	r2, r3, #1
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4413      	add	r3, r2
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd90      	pop	{r4, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20001240 	.word	0x20001240

08004d78 <wiz_send_data>:


void wiz_send_data(uint32_t ChipAddr, uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	460b      	mov	r3, r1
 8004d86:	72fb      	strb	r3, [r7, #11]
   uint32_t i = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d023      	beq.n	8004dda <wiz_send_data+0x62>
   
   for(i = 0; i < len ; i += 2)
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e01b      	b.n	8004dd0 <wiz_send_data+0x58>
      setSn_TX_FIFOR(ChipAddr, sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8004d98:	7afb      	ldrb	r3, [r7, #11]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	019b      	lsls	r3, r3, #6
 8004d9e:	332e      	adds	r3, #46	; 0x2e
 8004da0:	4618      	mov	r0, r3
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4413      	add	r3, r2
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	b21a      	sxth	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	3301      	adds	r3, #1
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	440b      	add	r3, r1
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b21b      	sxth	r3, r3
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	b21b      	sxth	r3, r3
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7ff ff03 	bl	8004bd0 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	3302      	adds	r3, #2
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d3df      	bcc.n	8004d98 <wiz_send_data+0x20>
 8004dd8:	e000      	b.n	8004ddc <wiz_send_data+0x64>
   if(len == 0)  return;
 8004dda:	bf00      	nop
}
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <wiz_recv_data>:

void wiz_recv_data(uint32_t ChipAddr, uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	460b      	mov	r3, r1
 8004df2:	72fb      	strb	r3, [r7, #11]
   uint16_t rd = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d02d      	beq.n	8004e5e <wiz_recv_data+0x7a>
      
   for(i = 0; i < len; i++)
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	e020      	b.n	8004e4a <wiz_recv_data+0x66>
   {
      if((i & 0x01)==0)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d112      	bne.n	8004e38 <wiz_recv_data+0x54>
      {
         rd = getSn_RX_FIFOR(ChipAddr, sn);
 8004e12:	7afb      	ldrb	r3, [r7, #11]
 8004e14:	3308      	adds	r3, #8
 8004e16:	019b      	lsls	r3, r3, #6
 8004e18:	3330      	adds	r3, #48	; 0x30
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff feeb 	bl	8004bf8 <WIZCHIP_READ>
 8004e22:	4603      	mov	r3, r0
 8004e24:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8004e26:	8afb      	ldrh	r3, [r7, #22]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	b299      	uxth	r1, r3
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4413      	add	r3, r2
 8004e32:	b2ca      	uxtb	r2, r1
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e005      	b.n	8004e44 <wiz_recv_data+0x60>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	8afa      	ldrh	r2, [r7, #22]
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3301      	adds	r3, #1
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d3da      	bcc.n	8004e08 <wiz_recv_data+0x24>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8004e52:	7afb      	ldrb	r3, [r7, #11]
 8004e54:	8afa      	ldrh	r2, [r7, #22]
 8004e56:	b2d1      	uxtb	r1, r2
 8004e58:	4a03      	ldr	r2, [pc, #12]	; (8004e68 <wiz_recv_data+0x84>)
 8004e5a:	54d1      	strb	r1, [r2, r3]
 8004e5c:	e000      	b.n	8004e60 <wiz_recv_data+0x7c>
   if(len == 0) return;
 8004e5e:	bf00      	nop
}
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20001248 	.word	0x20001248

08004e6c <socket>:
   }while(0);              \



int8_t socket(uint32_t ChipAddr, uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	4608      	mov	r0, r1
 8004e76:	4611      	mov	r1, r2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	70fb      	strb	r3, [r7, #3]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	70bb      	strb	r3, [r7, #2]
 8004e82:	4613      	mov	r3, r2
 8004e84:	803b      	strh	r3, [r7, #0]
	CHECK_SOCKNUM();
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d902      	bls.n	8004e92 <socket+0x26>
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	e101      	b.n	8005096 <socket+0x22a>
	switch(protocol)
 8004e92:	78bb      	ldrb	r3, [r7, #2]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d005      	beq.n	8004ea4 <socket+0x38>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	dd36      	ble.n	8004f0a <socket+0x9e>
 8004e9c:	3b02      	subs	r3, #2
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d833      	bhi.n	8004f0a <socket+0x9e>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004ea2:	e036      	b.n	8004f12 <socket+0xa6>
            getSIPR(ChipAddr, (uint8_t*)&taddr);
 8004ea4:	2118      	movs	r1, #24
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fea6 	bl	8004bf8 <WIZCHIP_READ>
 8004eac:	4603      	mov	r3, r0
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	f107 030c 	add.w	r3, r7, #12
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	2118      	movs	r1, #24
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff fe9b 	bl	8004bf8 <WIZCHIP_READ>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f107 030c 	add.w	r3, r7, #12
 8004eca:	3301      	adds	r3, #1
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	211a      	movs	r1, #26
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fe90 	bl	8004bf8 <WIZCHIP_READ>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	f107 030c 	add.w	r3, r7, #12
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	211a      	movs	r1, #26
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fe84 	bl	8004bf8 <WIZCHIP_READ>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	3303      	adds	r3, #3
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <socket+0xa4>
 8004f04:	f06f 0302 	mvn.w	r3, #2
 8004f08:	e0c5      	b.n	8005096 <socket+0x22a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004f0a:	f06f 0304 	mvn.w	r3, #4
 8004f0e:	e0c2      	b.n	8005096 <socket+0x22a>
	    break;
 8004f10:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004f12:	7e3b      	ldrb	r3, [r7, #24]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <socket+0xb6>
 8004f1c:	f06f 0305 	mvn.w	r3, #5
 8004f20:	e0b9      	b.n	8005096 <socket+0x22a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004f22:	7e3b      	ldrb	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d019      	beq.n	8004f5c <socket+0xf0>
	{
   	switch(protocol)
 8004f28:	78bb      	ldrb	r3, [r7, #2]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d002      	beq.n	8004f34 <socket+0xc8>
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d008      	beq.n	8004f44 <socket+0xd8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004f32:	e018      	b.n	8004f66 <socket+0xfa>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8004f34:	7e3b      	ldrb	r3, [r7, #24]
 8004f36:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d110      	bne.n	8004f60 <socket+0xf4>
 8004f3e:	f06f 0305 	mvn.w	r3, #5
 8004f42:	e0a8      	b.n	8005096 <socket+0x22a>
   	      if(flag & SF_IGMP_VER2)
 8004f44:	7e3b      	ldrb	r3, [r7, #24]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <socket+0xf8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004f4e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	db06      	blt.n	8004f64 <socket+0xf8>
 8004f56:	f06f 0305 	mvn.w	r3, #5
 8004f5a:	e09c      	b.n	8005096 <socket+0x22a>
   	}
   }
 8004f5c:	bf00      	nop
 8004f5e:	e002      	b.n	8004f66 <socket+0xfa>
   	      break;
 8004f60:	bf00      	nop
 8004f62:	e000      	b.n	8004f66 <socket+0xfa>
   	      break;
 8004f64:	bf00      	nop
	close(ChipAddr,sn);
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8a2 	bl	80050b4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(ChipAddr, sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	3308      	adds	r3, #8
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	4619      	mov	r1, r3
 8004f78:	78bb      	ldrb	r3, [r7, #2]
 8004f7a:	b21a      	sxth	r2, r3
 8004f7c:	7e3b      	ldrb	r3, [r7, #24]
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	4313      	orrs	r3, r2
 8004f88:	b21a      	sxth	r2, r3
 8004f8a:	7e3b      	ldrb	r3, [r7, #24]
 8004f8c:	01db      	lsls	r3, r3, #7
 8004f8e:	b21b      	sxth	r3, r3
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	b21b      	sxth	r3, r3
 8004f96:	4313      	orrs	r3, r2
 8004f98:	b21b      	sxth	r3, r3
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff fe16 	bl	8004bd0 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8004fa4:	883b      	ldrh	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d110      	bne.n	8004fcc <socket+0x160>
	{
	   port = sock_any_port++;
 8004faa:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <socket+0x234>)
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	b291      	uxth	r1, r2
 8004fb2:	4a3b      	ldr	r2, [pc, #236]	; (80050a0 <socket+0x234>)
 8004fb4:	8011      	strh	r1, [r2, #0]
 8004fb6:	803b      	strh	r3, [r7, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004fb8:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <socket+0x234>)
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d103      	bne.n	8004fcc <socket+0x160>
 8004fc4:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <socket+0x234>)
 8004fc6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004fca:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(ChipAddr, sn,port);	
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	019b      	lsls	r3, r3, #6
 8004fd2:	330a      	adds	r3, #10
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	883b      	ldrh	r3, [r7, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fdf8 	bl	8004bd0 <WIZCHIP_WRITE>
   setSn_CR(ChipAddr, sn,Sn_CR_OPEN);
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	019b      	lsls	r3, r3, #6
 8004fe6:	3302      	adds	r3, #2
 8004fe8:	2201      	movs	r2, #1
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fdef 	bl	8004bd0 <WIZCHIP_WRITE>
   while(getSn_CR(ChipAddr, sn));
 8004ff2:	bf00      	nop
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	019b      	lsls	r3, r3, #6
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fdfa 	bl	8004bf8 <WIZCHIP_READ>
 8005004:	4603      	mov	r3, r0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f3      	bne.n	8004ff4 <socket+0x188>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	2201      	movs	r2, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	b21b      	sxth	r3, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	b21a      	sxth	r2, r3
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <socket+0x238>)
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b21b      	sxth	r3, r3
 8005020:	4013      	ands	r3, r2
 8005022:	b21b      	sxth	r3, r3
 8005024:	b29a      	uxth	r2, r3
 8005026:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <socket+0x238>)
 8005028:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800502a:	7e3b      	ldrb	r3, [r7, #24]
 800502c:	f003 0201 	and.w	r2, r3, #1
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	b21a      	sxth	r2, r3
 8005038:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <socket+0x238>)
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b21b      	sxth	r3, r3
 800503e:	4313      	orrs	r3, r2
 8005040:	b21b      	sxth	r3, r3
 8005042:	b29a      	uxth	r2, r3
 8005044:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <socket+0x238>)
 8005046:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	2201      	movs	r2, #1
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	b21b      	sxth	r3, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	b21a      	sxth	r2, r3
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <socket+0x23c>)
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b21b      	sxth	r3, r3
 800505c:	4013      	ands	r3, r2
 800505e:	b21b      	sxth	r3, r3
 8005060:	b29a      	uxth	r2, r3
 8005062:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <socket+0x23c>)
 8005064:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	4a10      	ldr	r2, [pc, #64]	; (80050ac <socket+0x240>)
 800506a:	2100      	movs	r1, #0
 800506c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	4a0f      	ldr	r2, [pc, #60]	; (80050b0 <socket+0x244>)
 8005074:	2100      	movs	r1, #0
 8005076:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(ChipAddr, sn) == SOCK_CLOSED);
 8005078:	bf00      	nop
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	3308      	adds	r3, #8
 800507e:	019b      	lsls	r3, r3, #6
 8005080:	3308      	adds	r3, #8
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff fdb7 	bl	8004bf8 <WIZCHIP_READ>
 800508a:	4603      	mov	r3, r0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f3      	beq.n	800507a <socket+0x20e>
   return (int8_t)sn;
 8005092:	f997 3003 	ldrsb.w	r3, [r7, #3]
}	   
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	2000004a 	.word	0x2000004a
 80050a4:	2000122c 	.word	0x2000122c
 80050a8:	2000122e 	.word	0x2000122e
 80050ac:	20001230 	.word	0x20001230
 80050b0:	20001240 	.word	0x20001240

080050b4 <close>:

int8_t close(uint32_t ChipAddr, uint8_t sn)
{
 80050b4:	b590      	push	{r4, r7, lr}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d902      	bls.n	80050cc <close+0x18>
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	e0b3      	b.n	8005234 <close+0x180>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(ChipAddr, sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(ChipAddr, sn) != getSn_TxMAX(ChipAddr, sn)) )
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	3308      	adds	r3, #8
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff fd8f 	bl	8004bf8 <WIZCHIP_READ>
 80050da:	4603      	mov	r3, r0
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d153      	bne.n	800518c <close+0xd8>
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fde3 	bl	8004cb4 <getSn_TX_FSR>
 80050ee:	4604      	mov	r4, r0
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff fd91 	bl	8004c1c <getTMSR>
 80050fa:	4603      	mov	r3, r0
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	429c      	cmp	r4, r3
 8005100:	d044      	beq.n	800518c <close+0xd8>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8005102:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005106:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(ChipAddr, sn, Sn_MR_UDP);
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	3308      	adds	r3, #8
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	2202      	movs	r2, #2
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fd5c 	bl	8004bd0 <WIZCHIP_WRITE>
      setSn_PORTR(ChipAddr, sn, 0x3000);
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	3308      	adds	r3, #8
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	330a      	adds	r3, #10
 8005120:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fd52 	bl	8004bd0 <WIZCHIP_WRITE>
      setSn_CR(ChipAddr,sn, Sn_CR_OPEN);
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	3308      	adds	r3, #8
 8005130:	019b      	lsls	r3, r3, #6
 8005132:	3302      	adds	r3, #2
 8005134:	2201      	movs	r2, #1
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff fd49 	bl	8004bd0 <WIZCHIP_WRITE>
      while(getSn_CR(ChipAddr, sn) != 0);
 800513e:	bf00      	nop
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	3308      	adds	r3, #8
 8005144:	019b      	lsls	r3, r3, #6
 8005146:	3302      	adds	r3, #2
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fd54 	bl	8004bf8 <WIZCHIP_READ>
 8005150:	4603      	mov	r3, r0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f3      	bne.n	8005140 <close+0x8c>
      while(getSn_SR(ChipAddr, sn) != SOCK_UDP);
 8005158:	bf00      	nop
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	3308      	adds	r3, #8
 800515e:	019b      	lsls	r3, r3, #6
 8005160:	3308      	adds	r3, #8
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff fd47 	bl	8004bf8 <WIZCHIP_READ>
 800516a:	4603      	mov	r3, r0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b22      	cmp	r3, #34	; 0x22
 8005170:	d1f3      	bne.n	800515a <close+0xa6>
      sendto(ChipAddr, sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8005172:	f107 020c 	add.w	r2, r7, #12
 8005176:	78f9      	ldrb	r1, [r7, #3]
 8005178:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	f107 030c 	add.w	r3, r7, #12
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	2301      	movs	r3, #1
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fbb0 	bl	80058ec <sendto>
   };   
#endif 
	setSn_CR(ChipAddr, sn,Sn_CR_CLOSE);
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	3308      	adds	r3, #8
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	3302      	adds	r3, #2
 8005194:	2210      	movs	r2, #16
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff fd19 	bl	8004bd0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(ChipAddr, sn) );
 800519e:	bf00      	nop
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	3308      	adds	r3, #8
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	3302      	adds	r3, #2
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff fd24 	bl	8004bf8 <WIZCHIP_READ>
 80051b0:	4603      	mov	r3, r0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f3      	bne.n	80051a0 <close+0xec>
	/* clear all interrupt of the socket. */
	setSn_IR(ChipAddr, sn, 0xFF);
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	3308      	adds	r3, #8
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	3306      	adds	r3, #6
 80051c0:	22ff      	movs	r2, #255	; 0xff
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fd03 	bl	8004bd0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	2201      	movs	r2, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	b21b      	sxth	r3, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	b21a      	sxth	r2, r3
 80051d8:	4b18      	ldr	r3, [pc, #96]	; (800523c <close+0x188>)
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b21b      	sxth	r3, r3
 80051de:	4013      	ands	r3, r2
 80051e0:	b21b      	sxth	r3, r3
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	4b15      	ldr	r3, [pc, #84]	; (800523c <close+0x188>)
 80051e6:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	2201      	movs	r2, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	b21b      	sxth	r3, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	b21a      	sxth	r2, r3
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <close+0x18c>)
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	b21b      	sxth	r3, r3
 80051fc:	4013      	ands	r3, r2
 80051fe:	b21b      	sxth	r3, r3
 8005200:	b29a      	uxth	r2, r3
 8005202:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <close+0x18c>)
 8005204:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <close+0x190>)
 800520a:	2100      	movs	r1, #0
 800520c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	4a0d      	ldr	r2, [pc, #52]	; (8005248 <close+0x194>)
 8005214:	2100      	movs	r1, #0
 8005216:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(ChipAddr, sn) != SOCK_CLOSED);
 8005218:	bf00      	nop
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	3308      	adds	r3, #8
 800521e:	019b      	lsls	r3, r3, #6
 8005220:	3308      	adds	r3, #8
 8005222:	4619      	mov	r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fce7 	bl	8004bf8 <WIZCHIP_READ>
 800522a:	4603      	mov	r3, r0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f3      	bne.n	800521a <close+0x166>
	return SOCK_OK;
 8005232:	2301      	movs	r3, #1
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	bd90      	pop	{r4, r7, pc}
 800523c:	2000122c 	.word	0x2000122c
 8005240:	2000122e 	.word	0x2000122e
 8005244:	20001230 	.word	0x20001230
 8005248:	20001240 	.word	0x20001240

0800524c <listen>:

int8_t listen(uint32_t ChipAddr, uint8_t sn)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	2b08      	cmp	r3, #8
 800525c:	d902      	bls.n	8005264 <listen+0x18>
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	e049      	b.n	80052f8 <listen+0xac>
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	3308      	adds	r3, #8
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff fcc3 	bl	8004bf8 <WIZCHIP_READ>
 8005272:	4603      	mov	r3, r0
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	2b01      	cmp	r3, #1
 800527a:	d002      	beq.n	8005282 <listen+0x36>
 800527c:	f06f 0304 	mvn.w	r3, #4
 8005280:	e03a      	b.n	80052f8 <listen+0xac>
	CHECK_SOCKINIT(ChipAddr);
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	3308      	adds	r3, #8
 8005286:	019b      	lsls	r3, r3, #6
 8005288:	3308      	adds	r3, #8
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fcb3 	bl	8004bf8 <WIZCHIP_READ>
 8005292:	4603      	mov	r3, r0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b13      	cmp	r3, #19
 8005298:	d002      	beq.n	80052a0 <listen+0x54>
 800529a:	f06f 0302 	mvn.w	r3, #2
 800529e:	e02b      	b.n	80052f8 <listen+0xac>
	setSn_CR(ChipAddr, sn,Sn_CR_LISTEN);
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	3308      	adds	r3, #8
 80052a4:	019b      	lsls	r3, r3, #6
 80052a6:	3302      	adds	r3, #2
 80052a8:	2202      	movs	r2, #2
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff fc8f 	bl	8004bd0 <WIZCHIP_WRITE>
	while(getSn_CR(ChipAddr, sn));
 80052b2:	bf00      	nop
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	3308      	adds	r3, #8
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	3302      	adds	r3, #2
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fc9a 	bl	8004bf8 <WIZCHIP_READ>
 80052c4:	4603      	mov	r3, r0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f3      	bne.n	80052b4 <listen+0x68>
   while(getSn_SR(ChipAddr, sn) != SOCK_LISTEN)
 80052cc:	e007      	b.n	80052de <listen+0x92>
   {
         close(ChipAddr, sn);
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff feee 	bl	80050b4 <close>
         return SOCKERR_SOCKCLOSED;
 80052d8:	f06f 0303 	mvn.w	r3, #3
 80052dc:	e00c      	b.n	80052f8 <listen+0xac>
   while(getSn_SR(ChipAddr, sn) != SOCK_LISTEN)
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	3308      	adds	r3, #8
 80052e2:	019b      	lsls	r3, r3, #6
 80052e4:	3308      	adds	r3, #8
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff fc85 	bl	8004bf8 <WIZCHIP_READ>
 80052ee:	4603      	mov	r3, r0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b14      	cmp	r3, #20
 80052f4:	d1eb      	bne.n	80052ce <listen+0x82>
   }
   return SOCK_OK;
 80052f6:	2301      	movs	r3, #1
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint32_t ChipAddr, uint8_t sn)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
   CHECK_SOCKNUM();
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	2b08      	cmp	r3, #8
 8005310:	d902      	bls.n	8005318 <disconnect+0x18>
 8005312:	f04f 33ff 	mov.w	r3, #4294967295
 8005316:	e062      	b.n	80053de <disconnect+0xde>
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	3308      	adds	r3, #8
 800531c:	019b      	lsls	r3, r3, #6
 800531e:	4619      	mov	r1, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff fc69 	bl	8004bf8 <WIZCHIP_READ>
 8005326:	4603      	mov	r3, r0
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	2b01      	cmp	r3, #1
 800532e:	d002      	beq.n	8005336 <disconnect+0x36>
 8005330:	f06f 0304 	mvn.w	r3, #4
 8005334:	e053      	b.n	80053de <disconnect+0xde>
	setSn_CR(ChipAddr, sn,Sn_CR_DISCON);
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	3308      	adds	r3, #8
 800533a:	019b      	lsls	r3, r3, #6
 800533c:	3302      	adds	r3, #2
 800533e:	2208      	movs	r2, #8
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff fc44 	bl	8004bd0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(ChipAddr, sn));
 8005348:	bf00      	nop
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	3308      	adds	r3, #8
 800534e:	019b      	lsls	r3, r3, #6
 8005350:	3302      	adds	r3, #2
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fc4f 	bl	8004bf8 <WIZCHIP_READ>
 800535a:	4603      	mov	r3, r0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f3      	bne.n	800534a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	2201      	movs	r2, #1
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	b21b      	sxth	r3, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	b21a      	sxth	r2, r3
 8005370:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <disconnect+0xe8>)
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b21b      	sxth	r3, r3
 8005376:	4013      	ands	r3, r2
 8005378:	b21b      	sxth	r3, r3
 800537a:	b29a      	uxth	r2, r3
 800537c:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <disconnect+0xe8>)
 800537e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <disconnect+0xec>)
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	fa42 f303 	asr.w	r3, r2, r3
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d017      	beq.n	80053c4 <disconnect+0xc4>
 8005394:	2300      	movs	r3, #0
 8005396:	e022      	b.n	80053de <disconnect+0xde>
	while(getSn_SR(ChipAddr, sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(ChipAddr, sn) & Sn_IR_TIMEOUT)
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	3308      	adds	r3, #8
 800539c:	019b      	lsls	r3, r3, #6
 800539e:	3306      	adds	r3, #6
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fc28 	bl	8004bf8 <WIZCHIP_READ>
 80053a8:	4603      	mov	r3, r0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <disconnect+0xc4>
	   {
	      close(ChipAddr, sn);
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fe7b 	bl	80050b4 <close>
	      return SOCKERR_TIMEOUT;
 80053be:	f06f 030c 	mvn.w	r3, #12
 80053c2:	e00c      	b.n	80053de <disconnect+0xde>
	while(getSn_SR(ChipAddr, sn) != SOCK_CLOSED)
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	3308      	adds	r3, #8
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	3308      	adds	r3, #8
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fc12 	bl	8004bf8 <WIZCHIP_READ>
 80053d4:	4603      	mov	r3, r0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1dd      	bne.n	8005398 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80053dc:	2301      	movs	r3, #1
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2000122e 	.word	0x2000122e
 80053ec:	2000122c 	.word	0x2000122c

080053f0 <send>:

int32_t send(uint32_t ChipAddr, uint8_t sn, uint8_t * buf, uint16_t len)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	461a      	mov	r2, r3
 80053fc:	460b      	mov	r3, r1
 80053fe:	72fb      	strb	r3, [r7, #11]
 8005400:	4613      	mov	r3, r2
 8005402:	813b      	strh	r3, [r7, #8]
   uint8_t tmp=0;
 8005404:	2300      	movs	r3, #0
 8005406:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize=0;
 8005408:	2300      	movs	r3, #0
 800540a:	82bb      	strh	r3, [r7, #20]
   
   CHECK_SOCKNUM();
 800540c:	7afb      	ldrb	r3, [r7, #11]
 800540e:	2b08      	cmp	r3, #8
 8005410:	d902      	bls.n	8005418 <send+0x28>
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	e0ec      	b.n	80055f2 <send+0x202>
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 8005418:	7afb      	ldrb	r3, [r7, #11]
 800541a:	3308      	adds	r3, #8
 800541c:	019b      	lsls	r3, r3, #6
 800541e:	4619      	mov	r1, r3
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff fbe9 	bl	8004bf8 <WIZCHIP_READ>
 8005426:	4603      	mov	r3, r0
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	2b01      	cmp	r3, #1
 800542e:	d002      	beq.n	8005436 <send+0x46>
 8005430:	f06f 0304 	mvn.w	r3, #4
 8005434:	e0dd      	b.n	80055f2 <send+0x202>
   CHECK_SOCKDATA();
 8005436:	893b      	ldrh	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d102      	bne.n	8005442 <send+0x52>
 800543c:	f06f 030d 	mvn.w	r3, #13
 8005440:	e0d7      	b.n	80055f2 <send+0x202>
   tmp = getSn_SR(ChipAddr, sn);
 8005442:	7afb      	ldrb	r3, [r7, #11]
 8005444:	3308      	adds	r3, #8
 8005446:	019b      	lsls	r3, r3, #6
 8005448:	3308      	adds	r3, #8
 800544a:	4619      	mov	r1, r3
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff fbd3 	bl	8004bf8 <WIZCHIP_READ>
 8005452:	4603      	mov	r3, r0
 8005454:	75fb      	strb	r3, [r7, #23]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005456:	7dfb      	ldrb	r3, [r7, #23]
 8005458:	2b17      	cmp	r3, #23
 800545a:	d005      	beq.n	8005468 <send+0x78>
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b1c      	cmp	r3, #28
 8005460:	d002      	beq.n	8005468 <send+0x78>
 8005462:	f06f 0306 	mvn.w	r3, #6
 8005466:	e0c4      	b.n	80055f2 <send+0x202>
   if( sock_is_sending & (1<<sn) )
 8005468:	4b64      	ldr	r3, [pc, #400]	; (80055fc <send+0x20c>)
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	7afb      	ldrb	r3, [r7, #11]
 8005470:	fa42 f303 	asr.w	r3, r2, r3
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d036      	beq.n	80054ea <send+0xfa>
   {
      tmp = getSn_IR(ChipAddr, sn);
 800547c:	7afb      	ldrb	r3, [r7, #11]
 800547e:	3308      	adds	r3, #8
 8005480:	019b      	lsls	r3, r3, #6
 8005482:	3306      	adds	r3, #6
 8005484:	4619      	mov	r1, r3
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff fbb6 	bl	8004bf8 <WIZCHIP_READ>
 800548c:	4603      	mov	r3, r0
 800548e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b00      	cmp	r3, #0
 8005498:	d018      	beq.n	80054cc <send+0xdc>
      {
         setSn_IR(ChipAddr, sn, Sn_IR_SENDOK);
 800549a:	7afb      	ldrb	r3, [r7, #11]
 800549c:	3308      	adds	r3, #8
 800549e:	019b      	lsls	r3, r3, #6
 80054a0:	3306      	adds	r3, #6
 80054a2:	2210      	movs	r2, #16
 80054a4:	4619      	mov	r1, r3
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff fb92 	bl	8004bd0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80054ac:	7afb      	ldrb	r3, [r7, #11]
 80054ae:	2201      	movs	r2, #1
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	b21b      	sxth	r3, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	b21a      	sxth	r2, r3
 80054ba:	4b50      	ldr	r3, [pc, #320]	; (80055fc <send+0x20c>)
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b21b      	sxth	r3, r3
 80054c0:	4013      	ands	r3, r2
 80054c2:	b21b      	sxth	r3, r3
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	4b4d      	ldr	r3, [pc, #308]	; (80055fc <send+0x20c>)
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	e00e      	b.n	80054ea <send+0xfa>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <send+0xf6>
      {
         close(ChipAddr, sn);
 80054d6:	7afb      	ldrb	r3, [r7, #11]
 80054d8:	4619      	mov	r1, r3
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f7ff fdea 	bl	80050b4 <close>
         return SOCKERR_TIMEOUT;
 80054e0:	f06f 030c 	mvn.w	r3, #12
 80054e4:	e085      	b.n	80055f2 <send+0x202>
      }
      else return SOCK_BUSY;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e083      	b.n	80055f2 <send+0x202>
   }
   freesize = getSn_TxMAX(ChipAddr, sn);
 80054ea:	7afb      	ldrb	r3, [r7, #11]
 80054ec:	4619      	mov	r1, r3
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff fb94 	bl	8004c1c <getTMSR>
 80054f4:	4603      	mov	r3, r0
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	029b      	lsls	r3, r3, #10
 80054fa:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80054fc:	893a      	ldrh	r2, [r7, #8]
 80054fe:	8abb      	ldrh	r3, [r7, #20]
 8005500:	429a      	cmp	r2, r3
 8005502:	d901      	bls.n	8005508 <send+0x118>
 8005504:	8abb      	ldrh	r3, [r7, #20]
 8005506:	813b      	strh	r3, [r7, #8]
   while(1)
   {
      freesize = getSn_TX_FSR(ChipAddr, sn);
 8005508:	7afb      	ldrb	r3, [r7, #11]
 800550a:	4619      	mov	r1, r3
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff fbd1 	bl	8004cb4 <getSn_TX_FSR>
 8005512:	4603      	mov	r3, r0
 8005514:	82bb      	strh	r3, [r7, #20]
      tmp = getSn_SR(ChipAddr, sn);
 8005516:	7afb      	ldrb	r3, [r7, #11]
 8005518:	3308      	adds	r3, #8
 800551a:	019b      	lsls	r3, r3, #6
 800551c:	3308      	adds	r3, #8
 800551e:	4619      	mov	r1, r3
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff fb69 	bl	8004bf8 <WIZCHIP_READ>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800552a:	7dfb      	ldrb	r3, [r7, #23]
 800552c:	2b17      	cmp	r3, #23
 800552e:	d00a      	beq.n	8005546 <send+0x156>
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	2b1c      	cmp	r3, #28
 8005534:	d007      	beq.n	8005546 <send+0x156>
      {
         close(ChipAddr, sn);
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	4619      	mov	r1, r3
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff fdba 	bl	80050b4 <close>
         return SOCKERR_SOCKSTATUS;
 8005540:	f06f 0306 	mvn.w	r3, #6
 8005544:	e055      	b.n	80055f2 <send+0x202>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005546:	4b2e      	ldr	r3, [pc, #184]	; (8005600 <send+0x210>)
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	7afb      	ldrb	r3, [r7, #11]
 800554e:	fa42 f303 	asr.w	r3, r2, r3
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <send+0x176>
 800555a:	893a      	ldrh	r2, [r7, #8]
 800555c:	8abb      	ldrh	r3, [r7, #20]
 800555e:	429a      	cmp	r2, r3
 8005560:	d901      	bls.n	8005566 <send+0x176>
 8005562:	2300      	movs	r3, #0
 8005564:	e045      	b.n	80055f2 <send+0x202>
      if(len <= freesize) break;
 8005566:	893a      	ldrh	r2, [r7, #8]
 8005568:	8abb      	ldrh	r3, [r7, #20]
 800556a:	429a      	cmp	r2, r3
 800556c:	d900      	bls.n	8005570 <send+0x180>
      freesize = getSn_TX_FSR(ChipAddr, sn);
 800556e:	e7cb      	b.n	8005508 <send+0x118>
      if(len <= freesize) break;
 8005570:	bf00      	nop
   }
   wiz_send_data(ChipAddr, sn, buf, len);
 8005572:	893b      	ldrh	r3, [r7, #8]
 8005574:	7af9      	ldrb	r1, [r7, #11]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff fbfd 	bl	8004d78 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(ChipAddr, sn,len);
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	3308      	adds	r3, #8
 8005582:	019b      	lsls	r3, r3, #6
 8005584:	3320      	adds	r3, #32
 8005586:	4619      	mov	r1, r3
 8005588:	893b      	ldrh	r3, [r7, #8]
 800558a:	0c1b      	lsrs	r3, r3, #16
 800558c:	b29b      	uxth	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff fb1d 	bl	8004bd0 <WIZCHIP_WRITE>
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	3308      	adds	r3, #8
 800559a:	019b      	lsls	r3, r3, #6
 800559c:	3322      	adds	r3, #34	; 0x22
 800559e:	4619      	mov	r1, r3
 80055a0:	893b      	ldrh	r3, [r7, #8]
 80055a2:	461a      	mov	r2, r3
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff fb13 	bl	8004bd0 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(ChipAddr, sn,Sn_CR_SEND);
 80055aa:	7afb      	ldrb	r3, [r7, #11]
 80055ac:	3308      	adds	r3, #8
 80055ae:	019b      	lsls	r3, r3, #6
 80055b0:	3302      	adds	r3, #2
 80055b2:	2220      	movs	r2, #32
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fb0a 	bl	8004bd0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(ChipAddr, sn));
 80055bc:	bf00      	nop
 80055be:	7afb      	ldrb	r3, [r7, #11]
 80055c0:	3308      	adds	r3, #8
 80055c2:	019b      	lsls	r3, r3, #6
 80055c4:	3302      	adds	r3, #2
 80055c6:	4619      	mov	r1, r3
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff fb15 	bl	8004bf8 <WIZCHIP_READ>
 80055ce:	4603      	mov	r3, r0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f3      	bne.n	80055be <send+0x1ce>
   sock_is_sending |= (1 << sn);
 80055d6:	7afb      	ldrb	r3, [r7, #11]
 80055d8:	2201      	movs	r2, #1
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	b21a      	sxth	r2, r3
 80055e0:	4b06      	ldr	r3, [pc, #24]	; (80055fc <send+0x20c>)
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b21b      	sxth	r3, r3
 80055e6:	4313      	orrs	r3, r2
 80055e8:	b21b      	sxth	r3, r3
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	4b03      	ldr	r3, [pc, #12]	; (80055fc <send+0x20c>)
 80055ee:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80055f0:	893b      	ldrh	r3, [r7, #8]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	2000122e 	.word	0x2000122e
 8005600:	2000122c 	.word	0x2000122c

08005604 <recv>:


int32_t recv(uint32_t ChipAddr, uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	607a      	str	r2, [r7, #4]
 800560e:	461a      	mov	r2, r3
 8005610:	460b      	mov	r3, r1
 8005612:	72fb      	strb	r3, [r7, #11]
 8005614:	4613      	mov	r3, r2
 8005616:	813b      	strh	r3, [r7, #8]
   uint8_t  tmp = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	757b      	strb	r3, [r7, #21]
   uint16_t recvsize = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	82fb      	strh	r3, [r7, #22]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005620:	7afb      	ldrb	r3, [r7, #11]
 8005622:	2b08      	cmp	r3, #8
 8005624:	d902      	bls.n	800562c <recv+0x28>
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	e153      	b.n	80058d4 <recv+0x2d0>
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 800562c:	7afb      	ldrb	r3, [r7, #11]
 800562e:	3308      	adds	r3, #8
 8005630:	019b      	lsls	r3, r3, #6
 8005632:	4619      	mov	r1, r3
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff fadf 	bl	8004bf8 <WIZCHIP_READ>
 800563a:	4603      	mov	r3, r0
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	2b01      	cmp	r3, #1
 8005642:	d002      	beq.n	800564a <recv+0x46>
 8005644:	f06f 0304 	mvn.w	r3, #4
 8005648:	e144      	b.n	80058d4 <recv+0x2d0>
   CHECK_SOCKDATA();
 800564a:	893b      	ldrh	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <recv+0x52>
 8005650:	f06f 030d 	mvn.w	r3, #13
 8005654:	e13e      	b.n	80058d4 <recv+0x2d0>
   
   recvsize = getSn_RxMAX(ChipAddr, sn);
 8005656:	7afb      	ldrb	r3, [r7, #11]
 8005658:	4619      	mov	r1, r3
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fb04 	bl	8004c68 <getRMSR>
 8005660:	4603      	mov	r3, r0
 8005662:	b29b      	uxth	r3, r3
 8005664:	029b      	lsls	r3, r3, #10
 8005666:	82fb      	strh	r3, [r7, #22]
   if(recvsize < len) len = recvsize;
 8005668:	8afa      	ldrh	r2, [r7, #22]
 800566a:	893b      	ldrh	r3, [r7, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	d201      	bcs.n	8005674 <recv+0x70>
 8005670:	8afb      	ldrh	r3, [r7, #22]
 8005672:	813b      	strh	r3, [r7, #8]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 8005674:	7afb      	ldrb	r3, [r7, #11]
 8005676:	4a99      	ldr	r2, [pc, #612]	; (80058dc <recv+0x2d8>)
 8005678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d14e      	bne.n	800571e <recv+0x11a>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(ChipAddr, sn);
 8005680:	7afb      	ldrb	r3, [r7, #11]
 8005682:	4619      	mov	r1, r3
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fb41 	bl	8004d0c <getSn_RX_RSR>
 800568a:	4603      	mov	r3, r0
 800568c:	82fb      	strh	r3, [r7, #22]
         tmp = getSn_SR(ChipAddr, sn);
 800568e:	7afb      	ldrb	r3, [r7, #11]
 8005690:	3308      	adds	r3, #8
 8005692:	019b      	lsls	r3, r3, #6
 8005694:	3308      	adds	r3, #8
 8005696:	4619      	mov	r1, r3
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff faad 	bl	8004bf8 <WIZCHIP_READ>
 800569e:	4603      	mov	r3, r0
 80056a0:	757b      	strb	r3, [r7, #21]
         if (tmp != SOCK_ESTABLISHED)
 80056a2:	7d7b      	ldrb	r3, [r7, #21]
 80056a4:	2b17      	cmp	r3, #23
 80056a6:	d024      	beq.n	80056f2 <recv+0xee>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80056a8:	7d7b      	ldrb	r3, [r7, #21]
 80056aa:	2b1c      	cmp	r3, #28
 80056ac:	d119      	bne.n	80056e2 <recv+0xde>
            {
               if(recvsize != 0) break;
 80056ae:	8afb      	ldrh	r3, [r7, #22]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d131      	bne.n	8005718 <recv+0x114>
               else if(getSn_TX_FSR(ChipAddr, sn) == getSn_TxMAX(ChipAddr, sn))
 80056b4:	7afb      	ldrb	r3, [r7, #11]
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff fafb 	bl	8004cb4 <getSn_TX_FSR>
 80056be:	4604      	mov	r4, r0
 80056c0:	7afb      	ldrb	r3, [r7, #11]
 80056c2:	4619      	mov	r1, r3
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff faa9 	bl	8004c1c <getTMSR>
 80056ca:	4603      	mov	r3, r0
 80056cc:	029b      	lsls	r3, r3, #10
 80056ce:	429c      	cmp	r4, r3
 80056d0:	d10f      	bne.n	80056f2 <recv+0xee>
               {
                  close(ChipAddr, sn);
 80056d2:	7afb      	ldrb	r3, [r7, #11]
 80056d4:	4619      	mov	r1, r3
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff fcec 	bl	80050b4 <close>
                  return SOCKERR_SOCKSTATUS;
 80056dc:	f06f 0306 	mvn.w	r3, #6
 80056e0:	e0f8      	b.n	80058d4 <recv+0x2d0>
               }
            }
            else
            {
               close(ChipAddr, sn);
 80056e2:	7afb      	ldrb	r3, [r7, #11]
 80056e4:	4619      	mov	r1, r3
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff fce4 	bl	80050b4 <close>
               return SOCKERR_SOCKSTATUS;
 80056ec:	f06f 0306 	mvn.w	r3, #6
 80056f0:	e0f0      	b.n	80058d4 <recv+0x2d0>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80056f2:	4b7b      	ldr	r3, [pc, #492]	; (80058e0 <recv+0x2dc>)
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	fa42 f303 	asr.w	r3, r2, r3
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <recv+0x10c>
 8005706:	8afb      	ldrh	r3, [r7, #22]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <recv+0x10c>
 800570c:	2300      	movs	r3, #0
 800570e:	e0e1      	b.n	80058d4 <recv+0x2d0>
         if(recvsize != 0) break;
 8005710:	8afb      	ldrh	r3, [r7, #22]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <recv+0x118>
         recvsize = getSn_RX_RSR(ChipAddr, sn);
 8005716:	e7b3      	b.n	8005680 <recv+0x7c>
               if(recvsize != 0) break;
 8005718:	bf00      	nop
 800571a:	e000      	b.n	800571e <recv+0x11a>
         if(recvsize != 0) break;
 800571c:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(ChipAddr, sn) & Sn_MR_ALIGN))
 800571e:	7afb      	ldrb	r3, [r7, #11]
 8005720:	4a6e      	ldr	r2, [pc, #440]	; (80058dc <recv+0x2d8>)
 8005722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <recv+0x13e>
 800572a:	7afb      	ldrb	r3, [r7, #11]
 800572c:	3308      	adds	r3, #8
 800572e:	019b      	lsls	r3, r3, #6
 8005730:	4619      	mov	r1, r3
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7ff fa60 	bl	8004bf8 <WIZCHIP_READ>
 8005738:	4603      	mov	r3, r0
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d037      	beq.n	80057b2 <recv+0x1ae>
   {
      mr = getMR(ChipAddr);
 8005742:	2100      	movs	r1, #0
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff fa57 	bl	8004bf8 <WIZCHIP_READ>
 800574a:	4603      	mov	r3, r0
 800574c:	827b      	strh	r3, [r7, #18]
      if((getSn_MR(ChipAddr, sn) & Sn_MR_ALIGN)==0)
 800574e:	7afb      	ldrb	r3, [r7, #11]
 8005750:	3308      	adds	r3, #8
 8005752:	019b      	lsls	r3, r3, #6
 8005754:	4619      	mov	r1, r3
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff fa4e 	bl	8004bf8 <WIZCHIP_READ>
 800575c:	4603      	mov	r3, r0
 800575e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d120      	bne.n	80057a8 <recv+0x1a4>
      {
         wiz_recv_data(ChipAddr, sn,head,2);
 8005766:	f107 0210 	add.w	r2, r7, #16
 800576a:	7af9      	ldrb	r1, [r7, #11]
 800576c:	2302      	movs	r3, #2
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff fb38 	bl	8004de4 <wiz_recv_data>
         if(mr & MR_FS)
 8005774:	8a7b      	ldrh	r3, [r7, #18]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <recv+0x18c>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 800577e:	7c7b      	ldrb	r3, [r7, #17]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	b21a      	sxth	r2, r3
 8005784:	7c3b      	ldrb	r3, [r7, #16]
 8005786:	b21b      	sxth	r3, r3
 8005788:	4313      	orrs	r3, r2
 800578a:	b21b      	sxth	r3, r3
 800578c:	82fb      	strh	r3, [r7, #22]
 800578e:	e007      	b.n	80057a0 <recv+0x19c>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 8005790:	7c3b      	ldrb	r3, [r7, #16]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	b21a      	sxth	r2, r3
 8005796:	7c7b      	ldrb	r3, [r7, #17]
 8005798:	b21b      	sxth	r3, r3
 800579a:	4313      	orrs	r3, r2
 800579c:	b21b      	sxth	r3, r3
 800579e:	82fb      	strh	r3, [r7, #22]
         sock_pack_info[sn] = PACK_FIRST;
 80057a0:	7afb      	ldrb	r3, [r7, #11]
 80057a2:	4a50      	ldr	r2, [pc, #320]	; (80058e4 <recv+0x2e0>)
 80057a4:	2180      	movs	r1, #128	; 0x80
 80057a6:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 80057a8:	7afb      	ldrb	r3, [r7, #11]
 80057aa:	494c      	ldr	r1, [pc, #304]	; (80058dc <recv+0x2d8>)
 80057ac:	8afa      	ldrh	r2, [r7, #22]
 80057ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 80057b2:	7afb      	ldrb	r3, [r7, #11]
 80057b4:	4a49      	ldr	r2, [pc, #292]	; (80058dc <recv+0x2d8>)
 80057b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ba:	893a      	ldrh	r2, [r7, #8]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d904      	bls.n	80057ca <recv+0x1c6>
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	4a46      	ldr	r2, [pc, #280]	; (80058dc <recv+0x2d8>)
 80057c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c8:	813b      	strh	r3, [r7, #8]
   recvsize = len;   
 80057ca:	893b      	ldrh	r3, [r7, #8]
 80057cc:	82fb      	strh	r3, [r7, #22]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80057ce:	7afb      	ldrb	r3, [r7, #11]
 80057d0:	4a44      	ldr	r2, [pc, #272]	; (80058e4 <recv+0x2e0>)
 80057d2:	5cd3      	ldrb	r3, [r2, r3]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01d      	beq.n	8005818 <recv+0x214>
   {
      *buf = sock_remained_byte[sn];
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	4a42      	ldr	r2, [pc, #264]	; (80058e8 <recv+0x2e4>)
 80057e0:	5cd2      	ldrb	r2, [r2, r3]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	701a      	strb	r2, [r3, #0]
      buf++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3301      	adds	r3, #1
 80057ea:	607b      	str	r3, [r7, #4]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 80057ec:	7afb      	ldrb	r3, [r7, #11]
 80057ee:	4a3d      	ldr	r2, [pc, #244]	; (80058e4 <recv+0x2e0>)
 80057f0:	5cd2      	ldrb	r2, [r2, r3]
 80057f2:	7afb      	ldrb	r3, [r7, #11]
 80057f4:	f022 0202 	bic.w	r2, r2, #2
 80057f8:	b2d1      	uxtb	r1, r2
 80057fa:	4a3a      	ldr	r2, [pc, #232]	; (80058e4 <recv+0x2e0>)
 80057fc:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 80057fe:	8afb      	ldrh	r3, [r7, #22]
 8005800:	3b01      	subs	r3, #1
 8005802:	82fb      	strh	r3, [r7, #22]
      sock_remained_size[sn] -= 1;
 8005804:	7afb      	ldrb	r3, [r7, #11]
 8005806:	4a35      	ldr	r2, [pc, #212]	; (80058dc <recv+0x2d8>)
 8005808:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	3a01      	subs	r2, #1
 8005810:	b291      	uxth	r1, r2
 8005812:	4a32      	ldr	r2, [pc, #200]	; (80058dc <recv+0x2d8>)
 8005814:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 8005818:	8afb      	ldrh	r3, [r7, #22]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01b      	beq.n	8005856 <recv+0x252>
   {
      wiz_recv_data(ChipAddr, sn, buf, recvsize);
 800581e:	8afb      	ldrh	r3, [r7, #22]
 8005820:	7af9      	ldrb	r1, [r7, #11]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7ff fadd 	bl	8004de4 <wiz_recv_data>
      setSn_CR(ChipAddr, sn,Sn_CR_RECV);
 800582a:	7afb      	ldrb	r3, [r7, #11]
 800582c:	3308      	adds	r3, #8
 800582e:	019b      	lsls	r3, r3, #6
 8005830:	3302      	adds	r3, #2
 8005832:	2240      	movs	r2, #64	; 0x40
 8005834:	4619      	mov	r1, r3
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff f9ca 	bl	8004bd0 <WIZCHIP_WRITE>
      while(getSn_CR(ChipAddr, sn));
 800583c:	bf00      	nop
 800583e:	7afb      	ldrb	r3, [r7, #11]
 8005840:	3308      	adds	r3, #8
 8005842:	019b      	lsls	r3, r3, #6
 8005844:	3302      	adds	r3, #2
 8005846:	4619      	mov	r1, r3
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff f9d5 	bl	8004bf8 <WIZCHIP_READ>
 800584e:	4603      	mov	r3, r0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f3      	bne.n	800583e <recv+0x23a>
   }
   sock_remained_size[sn] -= recvsize;
 8005856:	7afb      	ldrb	r3, [r7, #11]
 8005858:	4a20      	ldr	r2, [pc, #128]	; (80058dc <recv+0x2d8>)
 800585a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800585e:	7afb      	ldrb	r3, [r7, #11]
 8005860:	8afa      	ldrh	r2, [r7, #22]
 8005862:	1a8a      	subs	r2, r1, r2
 8005864:	b291      	uxth	r1, r2
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <recv+0x2d8>)
 8005868:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 800586c:	7afb      	ldrb	r3, [r7, #11]
 800586e:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <recv+0x2d8>)
 8005870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d017      	beq.n	80058a8 <recv+0x2a4>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 8005878:	7afb      	ldrb	r3, [r7, #11]
 800587a:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <recv+0x2e0>)
 800587c:	5cd2      	ldrb	r2, [r2, r3]
 800587e:	7afb      	ldrb	r3, [r7, #11]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	b2d1      	uxtb	r1, r2
 8005886:	4a17      	ldr	r2, [pc, #92]	; (80058e4 <recv+0x2e0>)
 8005888:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 800588a:	8afb      	ldrh	r3, [r7, #22]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00d      	beq.n	80058b0 <recv+0x2ac>
 8005894:	7afb      	ldrb	r3, [r7, #11]
 8005896:	4a13      	ldr	r2, [pc, #76]	; (80058e4 <recv+0x2e0>)
 8005898:	5cd2      	ldrb	r2, [r2, r3]
 800589a:	7afb      	ldrb	r3, [r7, #11]
 800589c:	f042 0202 	orr.w	r2, r2, #2
 80058a0:	b2d1      	uxtb	r1, r2
 80058a2:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <recv+0x2e0>)
 80058a4:	54d1      	strb	r1, [r2, r3]
 80058a6:	e003      	b.n	80058b0 <recv+0x2ac>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 80058a8:	7afb      	ldrb	r3, [r7, #11]
 80058aa:	4a0e      	ldr	r2, [pc, #56]	; (80058e4 <recv+0x2e0>)
 80058ac:	2100      	movs	r1, #0
 80058ae:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(ChipAddr, sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 80058b0:	7afb      	ldrb	r3, [r7, #11]
 80058b2:	3308      	adds	r3, #8
 80058b4:	019b      	lsls	r3, r3, #6
 80058b6:	4619      	mov	r1, r3
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff f99d 	bl	8004bf8 <WIZCHIP_READ>
 80058be:	4603      	mov	r3, r0
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <recv+0x2ce>
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	4a04      	ldr	r2, [pc, #16]	; (80058dc <recv+0x2d8>)
 80058cc:	2100      	movs	r1, #0
 80058ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80058d2:	893b      	ldrh	r3, [r7, #8]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd90      	pop	{r4, r7, pc}
 80058dc:	20001230 	.word	0x20001230
 80058e0:	2000122c 	.word	0x2000122c
 80058e4:	20001240 	.word	0x20001240
 80058e8:	20001248 	.word	0x20001248

080058ec <sendto>:

int32_t sendto(uint32_t ChipAddr, uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	461a      	mov	r2, r3
 80058f8:	460b      	mov	r3, r1
 80058fa:	72fb      	strb	r3, [r7, #11]
 80058fc:	4613      	mov	r3, r2
 80058fe:	813b      	strh	r3, [r7, #8]
   uint8_t tmp = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005908:	7afb      	ldrb	r3, [r7, #11]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d902      	bls.n	8005914 <sendto+0x28>
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
 8005912:	e202      	b.n	8005d1a <sendto+0x42e>
   switch(getSn_MR(ChipAddr, sn) & 0x0F)
 8005914:	7afb      	ldrb	r3, [r7, #11]
 8005916:	3308      	adds	r3, #8
 8005918:	019b      	lsls	r3, r3, #6
 800591a:	4619      	mov	r1, r3
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff f96b 	bl	8004bf8 <WIZCHIP_READ>
 8005922:	4603      	mov	r3, r0
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	3b02      	subs	r3, #2
 800592a:	2b02      	cmp	r3, #2
 800592c:	d902      	bls.n	8005934 <sendto+0x48>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800592e:	f06f 0304 	mvn.w	r3, #4
 8005932:	e1f2      	b.n	8005d1a <sendto+0x42e>
         break;
 8005934:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005936:	893b      	ldrh	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <sendto+0x56>
 800593c:	f06f 030d 	mvn.w	r3, #13
 8005940:	e1eb      	b.n	8005d1a <sendto+0x42e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	6a3a      	ldr	r2, [r7, #32]
 800594e:	3201      	adds	r2, #1
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	4413      	add	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	6a3a      	ldr	r2, [r7, #32]
 800595c:	3202      	adds	r2, #2
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	4413      	add	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	6a3a      	ldr	r2, [r7, #32]
 800596a:	3203      	adds	r2, #3
 800596c:	7812      	ldrb	r2, [r2, #0]
 800596e:	4413      	add	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(ChipAddr, sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10e      	bne.n	8005996 <sendto+0xaa>
 8005978:	7afb      	ldrb	r3, [r7, #11]
 800597a:	3308      	adds	r3, #8
 800597c:	019b      	lsls	r3, r3, #6
 800597e:	4619      	mov	r1, r3
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f7ff f939 	bl	8004bf8 <WIZCHIP_READ>
 8005986:	4603      	mov	r3, r0
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b04      	cmp	r3, #4
 800598e:	d002      	beq.n	8005996 <sendto+0xaa>
 8005990:	f06f 030b 	mvn.w	r3, #11
 8005994:	e1c1      	b.n	8005d1a <sendto+0x42e>
   if((port  == 0) && ((getSn_MR(ChipAddr, sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10e      	bne.n	80059ba <sendto+0xce>
 800599c:	7afb      	ldrb	r3, [r7, #11]
 800599e:	3308      	adds	r3, #8
 80059a0:	019b      	lsls	r3, r3, #6
 80059a2:	4619      	mov	r1, r3
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f7ff f927 	bl	8004bf8 <WIZCHIP_READ>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d002      	beq.n	80059ba <sendto+0xce>
 80059b4:	f06f 030a 	mvn.w	r3, #10
 80059b8:	e1af      	b.n	8005d1a <sendto+0x42e>
   tmp = getSn_SR(ChipAddr, sn);
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	3308      	adds	r3, #8
 80059be:	019b      	lsls	r3, r3, #6
 80059c0:	3308      	adds	r3, #8
 80059c2:	4619      	mov	r1, r3
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff f917 	bl	8004bf8 <WIZCHIP_READ>
 80059ca:	4603      	mov	r3, r0
 80059cc:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	2b42      	cmp	r3, #66	; 0x42
 80059d2:	d008      	beq.n	80059e6 <sendto+0xfa>
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	2b22      	cmp	r3, #34	; 0x22
 80059d8:	d005      	beq.n	80059e6 <sendto+0xfa>
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	2b32      	cmp	r3, #50	; 0x32
 80059de:	d002      	beq.n	80059e6 <sendto+0xfa>
 80059e0:	f06f 0306 	mvn.w	r3, #6
 80059e4:	e199      	b.n	8005d1a <sendto+0x42e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(ChipAddr, sn,addr);
 80059e6:	7afb      	ldrb	r3, [r7, #11]
 80059e8:	3308      	adds	r3, #8
 80059ea:	019b      	lsls	r3, r3, #6
 80059ec:	3314      	adds	r3, #20
 80059ee:	4619      	mov	r1, r3
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	3301      	adds	r3, #1
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4413      	add	r3, r2
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff f8e1 	bl	8004bd0 <WIZCHIP_WRITE>
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	3308      	adds	r3, #8
 8005a12:	019b      	lsls	r3, r3, #6
 8005a14:	3316      	adds	r3, #22
 8005a16:	4619      	mov	r1, r3
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	3303      	adds	r3, #3
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7ff f8cc 	bl	8004bd0 <WIZCHIP_WRITE>
   setSn_DPORT(ChipAddr, sn,port);      
 8005a38:	7afb      	ldrb	r3, [r7, #11]
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	3312      	adds	r3, #18
 8005a40:	4619      	mov	r1, r3
 8005a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a44:	461a      	mov	r2, r3
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff f8c2 	bl	8004bd0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(ChipAddr, sn);
 8005a4c:	7afb      	ldrb	r3, [r7, #11]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff f8e3 	bl	8004c1c <getTMSR>
 8005a56:	4603      	mov	r3, r0
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005a5e:	893a      	ldrh	r2, [r7, #8]
 8005a60:	8abb      	ldrh	r3, [r7, #20]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d901      	bls.n	8005a6a <sendto+0x17e>
 8005a66:	8abb      	ldrh	r3, [r7, #20]
 8005a68:	813b      	strh	r3, [r7, #8]
   while(1)
   {
      freesize = getSn_TX_FSR(ChipAddr, sn);
 8005a6a:	7afb      	ldrb	r3, [r7, #11]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff f920 	bl	8004cb4 <getSn_TX_FSR>
 8005a74:	4603      	mov	r3, r0
 8005a76:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(ChipAddr, sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005a78:	7afb      	ldrb	r3, [r7, #11]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	019b      	lsls	r3, r3, #6
 8005a7e:	3308      	adds	r3, #8
 8005a80:	4619      	mov	r1, r3
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff f8b8 	bl	8004bf8 <WIZCHIP_READ>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <sendto+0x1aa>
 8005a90:	f06f 0303 	mvn.w	r3, #3
 8005a94:	e141      	b.n	8005d1a <sendto+0x42e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005a96:	4ba3      	ldr	r3, [pc, #652]	; (8005d24 <sendto+0x438>)
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	7afb      	ldrb	r3, [r7, #11]
 8005a9e:	fa42 f303 	asr.w	r3, r2, r3
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <sendto+0x1ca>
 8005aaa:	893a      	ldrh	r2, [r7, #8]
 8005aac:	8abb      	ldrh	r3, [r7, #20]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d901      	bls.n	8005ab6 <sendto+0x1ca>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e131      	b.n	8005d1a <sendto+0x42e>
      if(len <= freesize) break;
 8005ab6:	893a      	ldrh	r2, [r7, #8]
 8005ab8:	8abb      	ldrh	r3, [r7, #20]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d900      	bls.n	8005ac0 <sendto+0x1d4>
      freesize = getSn_TX_FSR(ChipAddr, sn);
 8005abe:	e7d4      	b.n	8005a6a <sendto+0x17e>
      if(len <= freesize) break;
 8005ac0:	bf00      	nop
   };
	wiz_send_data(ChipAddr, sn, buf, len);
 8005ac2:	893b      	ldrh	r3, [r7, #8]
 8005ac4:	7af9      	ldrb	r1, [r7, #11]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff f955 	bl	8004d78 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR(ChipAddr, (uint8_t*)&taddr);
 8005ace:	2118      	movs	r1, #24
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff f891 	bl	8004bf8 <WIZCHIP_READ>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	0a1b      	lsrs	r3, r3, #8
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	f107 0310 	add.w	r3, r7, #16
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	2118      	movs	r1, #24
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff f886 	bl	8004bf8 <WIZCHIP_READ>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	f107 0310 	add.w	r3, r7, #16
 8005af4:	3301      	adds	r3, #1
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	211a      	movs	r1, #26
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff f87b 	bl	8004bf8 <WIZCHIP_READ>
 8005b02:	4603      	mov	r3, r0
 8005b04:	0a1b      	lsrs	r3, r3, #8
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	f107 0310 	add.w	r3, r7, #16
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	211a      	movs	r1, #26
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7ff f86f 	bl	8004bf8 <WIZCHIP_READ>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f107 0310 	add.w	r3, r7, #16
 8005b22:	3303      	adds	r3, #3
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d14b      	bne.n	8005bc6 <sendto+0x2da>
      {
         getSUBR(ChipAddr, (uint8_t*)&taddr);
 8005b2e:	2114      	movs	r1, #20
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff f861 	bl	8004bf8 <WIZCHIP_READ>
 8005b36:	4603      	mov	r3, r0
 8005b38:	0a1b      	lsrs	r3, r3, #8
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	f107 0310 	add.w	r3, r7, #16
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	2114      	movs	r1, #20
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff f856 	bl	8004bf8 <WIZCHIP_READ>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f107 0310 	add.w	r3, r7, #16
 8005b54:	3301      	adds	r3, #1
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	2116      	movs	r1, #22
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff f84b 	bl	8004bf8 <WIZCHIP_READ>
 8005b62:	4603      	mov	r3, r0
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	f107 0310 	add.w	r3, r7, #16
 8005b6c:	3302      	adds	r3, #2
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	2116      	movs	r1, #22
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f7ff f83f 	bl	8004bf8 <WIZCHIP_READ>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f107 0310 	add.w	r3, r7, #16
 8005b82:	3303      	adds	r3, #3
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]
         setSUBR(ChipAddr, (uint8_t*)"\x00\x00\x00\x00");
 8005b88:	4b67      	ldr	r3, [pc, #412]	; (8005d28 <sendto+0x43c>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	4b66      	ldr	r3, [pc, #408]	; (8005d2c <sendto+0x440>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	2114      	movs	r1, #20
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff f815 	bl	8004bd0 <WIZCHIP_WRITE>
 8005ba6:	4b62      	ldr	r3, [pc, #392]	; (8005d30 <sendto+0x444>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	4b60      	ldr	r3, [pc, #384]	; (8005d34 <sendto+0x448>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	2116      	movs	r1, #22
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff f806 	bl	8004bd0 <WIZCHIP_WRITE>
 8005bc4:	e001      	b.n	8005bca <sendto+0x2de>
      }
      else taddr = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(ChipAddr, sn, len);
 8005bca:	7afb      	ldrb	r3, [r7, #11]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	019b      	lsls	r3, r3, #6
 8005bd0:	3320      	adds	r3, #32
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	893b      	ldrh	r3, [r7, #8]
 8005bd6:	0c1b      	lsrs	r3, r3, #16
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f7fe fff7 	bl	8004bd0 <WIZCHIP_WRITE>
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	3308      	adds	r3, #8
 8005be6:	019b      	lsls	r3, r3, #6
 8005be8:	3322      	adds	r3, #34	; 0x22
 8005bea:	4619      	mov	r1, r3
 8005bec:	893b      	ldrh	r3, [r7, #8]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7fe ffed 	bl	8004bd0 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(ChipAddr, sn,Sn_CR_SEND);
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	019b      	lsls	r3, r3, #6
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	2220      	movs	r2, #32
 8005c00:	4619      	mov	r1, r3
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7fe ffe4 	bl	8004bd0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(ChipAddr, sn));
 8005c08:	bf00      	nop
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	019b      	lsls	r3, r3, #6
 8005c10:	3302      	adds	r3, #2
 8005c12:	4619      	mov	r1, r3
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7fe ffef 	bl	8004bf8 <WIZCHIP_READ>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f3      	bne.n	8005c0a <sendto+0x31e>
   while(1)
   {
      tmp = getSn_IR(ChipAddr, sn);
 8005c22:	7afb      	ldrb	r3, [r7, #11]
 8005c24:	3308      	adds	r3, #8
 8005c26:	019b      	lsls	r3, r3, #6
 8005c28:	3306      	adds	r3, #6
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7fe ffe3 	bl	8004bf8 <WIZCHIP_READ>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00d      	beq.n	8005c5c <sendto+0x370>
      {
         setSn_IR(ChipAddr, sn, Sn_IR_SENDOK);
 8005c40:	7afb      	ldrb	r3, [r7, #11]
 8005c42:	3308      	adds	r3, #8
 8005c44:	019b      	lsls	r3, r3, #6
 8005c46:	3306      	adds	r3, #6
 8005c48:	2210      	movs	r2, #16
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7fe ffbf 	bl	8004bd0 <WIZCHIP_WRITE>
         break;
 8005c52:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR(ChipAddr, (uint8_t*)&taddr);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d05e      	beq.n	8005d18 <sendto+0x42c>
 8005c5a:	e038      	b.n	8005cce <sendto+0x3e2>
      else if(tmp & Sn_IR_TIMEOUT)
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0dd      	beq.n	8005c22 <sendto+0x336>
         setSn_IR(ChipAddr, sn, Sn_IR_TIMEOUT);
 8005c66:	7afb      	ldrb	r3, [r7, #11]
 8005c68:	3308      	adds	r3, #8
 8005c6a:	019b      	lsls	r3, r3, #6
 8005c6c:	3306      	adds	r3, #6
 8005c6e:	2208      	movs	r2, #8
 8005c70:	4619      	mov	r1, r3
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7fe ffac 	bl	8004bd0 <WIZCHIP_WRITE>
            if(taddr) setSUBR(ChipAddr, (uint8_t*)&taddr);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d024      	beq.n	8005cc8 <sendto+0x3dc>
 8005c7e:	f107 0310 	add.w	r3, r7, #16
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f107 0310 	add.w	r3, r7, #16
 8005c8e:	3301      	adds	r3, #1
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	4413      	add	r3, r2
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2114      	movs	r1, #20
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7fe ff97 	bl	8004bd0 <WIZCHIP_WRITE>
 8005ca2:	f107 0310 	add.w	r3, r7, #16
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	f107 0310 	add.w	r3, r7, #16
 8005cb4:	3303      	adds	r3, #3
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	2116      	movs	r1, #22
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f7fe ff84 	bl	8004bd0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8005cc8:	f06f 030c 	mvn.w	r3, #12
 8005ccc:	e025      	b.n	8005d1a <sendto+0x42e>
      if(taddr) setSUBR(ChipAddr, (uint8_t*)&taddr);
 8005cce:	f107 0310 	add.w	r3, r7, #16
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	f107 0310 	add.w	r3, r7, #16
 8005cde:	3301      	adds	r3, #1
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2114      	movs	r1, #20
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7fe ff6f 	bl	8004bd0 <WIZCHIP_WRITE>
 8005cf2:	f107 0310 	add.w	r3, r7, #16
 8005cf6:	3302      	adds	r3, #2
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f107 0310 	add.w	r3, r7, #16
 8005d04:	3303      	adds	r3, #3
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2116      	movs	r1, #22
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7fe ff5c 	bl	8004bd0 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005d18:	893b      	ldrh	r3, [r7, #8]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	2000122c 	.word	0x2000122c
 8005d28:	080079d8 	.word	0x080079d8
 8005d2c:	080079d9 	.word	0x080079d9
 8005d30:	080079da 	.word	0x080079da
 8005d34:	080079db 	.word	0x080079db

08005d38 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005d46:	b480      	push	{r7}
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	bf00      	nop
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005d62:	b480      	push	{r7}
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	bf00      	nop
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	807b      	strh	r3, [r7, #2]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	887a      	ldrh	r2, [r7, #2]
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(uint32_t ChipAddr, ctlwizchip_type cwtype, void* arg)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	460b      	mov	r3, r1
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	72fb      	strb	r3, [r7, #11]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
   switch(cwtype)
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d864      	bhi.n	8005e8e <ctlwizchip+0xe6>
 8005dc4:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <ctlwizchip+0x24>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005e27 	.word	0x08005e27
 8005dd8:	08005e19 	.word	0x08005e19
 8005ddc:	08005e37 	.word	0x08005e37
 8005de0:	08005e45 	.word	0x08005e45
 8005de4:	08005e8f 	.word	0x08005e8f
 8005de8:	08005e8f 	.word	0x08005e8f
 8005dec:	08005e55 	.word	0x08005e55
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset(ChipAddr);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f89d 	bl	8005f30 <wizchip_sw_reset>
         break;
 8005df6:	e04d      	b.n	8005e94 <ctlwizchip+0xec>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <ctlwizchip+0x60>
         {
            ptmp[0] = (uint8_t*)arg;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	613b      	str	r3, [r7, #16]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3308      	adds	r3, #8
 8005e06:	617b      	str	r3, [r7, #20]
         }
         return wizchip_init(ChipAddr, ptmp[0], ptmp[1]);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f9a4 	bl	800615c <wizchip_init>
 8005e14:	4603      	mov	r3, r0
 8005e16:	e03e      	b.n	8005e96 <ctlwizchip+0xee>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(ChipAddr, *((intr_kind*)arg));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fa08 	bl	8006234 <wizchip_clrinterrupt>
         break;
 8005e24:	e036      	b.n	8005e94 <ctlwizchip+0xec>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt(ChipAddr);
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fa28 	bl	800627c <wizchip_getinterrupt>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	801a      	strh	r2, [r3, #0]
         break;
 8005e34:	e02e      	b.n	8005e94 <ctlwizchip+0xec>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(ChipAddr, *((intr_kind*)arg));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fa43 	bl	80062c8 <wizchip_setinterruptmask>
         break;         
 8005e42:	e027      	b.n	8005e94 <ctlwizchip+0xec>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask(ChipAddr);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 fa63 	bl	8006310 <wizchip_getinterruptmask>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	801a      	strh	r2, [r3, #0]
         break;
 8005e52:	e01f      	b.n	8005e94 <ctlwizchip+0xec>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <ctlwizchip+0xf8>)
 8005e56:	789a      	ldrb	r2, [r3, #2]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	4a0f      	ldr	r2, [pc, #60]	; (8005ea0 <ctlwizchip+0xf8>)
 8005e62:	78d2      	ldrb	r2, [r2, #3]
 8005e64:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3302      	adds	r3, #2
 8005e6a:	4a0d      	ldr	r2, [pc, #52]	; (8005ea0 <ctlwizchip+0xf8>)
 8005e6c:	7912      	ldrb	r2, [r2, #4]
 8005e6e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3303      	adds	r3, #3
 8005e74:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <ctlwizchip+0xf8>)
 8005e76:	7952      	ldrb	r2, [r2, #5]
 8005e78:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <ctlwizchip+0xf8>)
 8005e80:	7992      	ldrb	r2, [r2, #6]
 8005e82:	701a      	strb	r2, [r3, #0]
         //((uint8_t*)arg)[5] = WIZCHIP.id[5];
         ((uint8_t*)arg)[5] = 0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3305      	adds	r3, #5
 8005e88:	2200      	movs	r2, #0
 8005e8a:	701a      	strb	r2, [r3, #0]
         break;
 8005e8c:	e002      	b.n	8005e94 <ctlwizchip+0xec>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e92:	e000      	b.n	8005e96 <ctlwizchip+0xee>
   }
   return 0;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	2000004c 	.word	0x2000004c

08005ea4 <ctlnetwork>:


int8_t ctlnetwork(uint32_t ChipAddr, ctlnetwork_type cntype, void* arg)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	460b      	mov	r3, r1
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	72fb      	strb	r3, [r7, #11]
   
   switch(cntype)
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	d833      	bhi.n	8005f20 <ctlnetwork+0x7c>
 8005eb8:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <ctlnetwork+0x1c>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ed9 	.word	0x08005ed9
 8005ec4:	08005ee3 	.word	0x08005ee3
 8005ec8:	08005eed 	.word	0x08005eed
 8005ecc:	08005efd 	.word	0x08005efd
 8005ed0:	08005f0d 	.word	0x08005f0d
 8005ed4:	08005f17 	.word	0x08005f17
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo(ChipAddr, (wiz_NetInfo*)arg);
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fa42 	bl	8006364 <wizchip_setnetinfo>
         break;
 8005ee0:	e021      	b.n	8005f26 <ctlnetwork+0x82>
      case CN_GET_NETINFO:
         wizchip_getnetinfo(ChipAddr, (wiz_NetInfo*)arg);
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fae9 	bl	80064bc <wizchip_getnetinfo>
         break;
 8005eea:	e01c      	b.n	8005f26 <ctlnetwork+0x82>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(ChipAddr, *(netmode_type*)arg);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fba6 	bl	8006644 <wizchip_setnetmode>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	e015      	b.n	8005f28 <ctlnetwork+0x84>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode(ChipAddr);
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fbc7 	bl	8006690 <wizchip_getnetmode>
 8005f02:	4603      	mov	r3, r0
 8005f04:	461a      	mov	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	701a      	strb	r2, [r3, #0]
         break;
 8005f0a:	e00c      	b.n	8005f26 <ctlnetwork+0x82>
      case CN_SET_TIMEOUT:
         wizchip_settimeout(ChipAddr, (wiz_NetTimeout*)arg);
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fbcc 	bl	80066ac <wizchip_settimeout>
         break;
 8005f14:	e007      	b.n	8005f26 <ctlnetwork+0x82>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout(ChipAddr, (wiz_NetTimeout*)arg);
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fbdf 	bl	80066dc <wizchip_gettimeout>
         break;
 8005f1e:	e002      	b.n	8005f26 <ctlnetwork+0x82>
      default:
         return -1;
 8005f20:	f04f 33ff 	mov.w	r3, #4294967295
 8005f24:	e000      	b.n	8005f28 <ctlnetwork+0x84>
   }
   return 0;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <wizchip_sw_reset>:

void wizchip_sw_reset(uint32_t ChipAddr)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(ChipAddr, mac);
 8005f38:	2108      	movs	r1, #8
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fe fe5c 	bl	8004bf8 <WIZCHIP_READ>
 8005f40:	4603      	mov	r3, r0
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	733b      	strb	r3, [r7, #12]
 8005f4a:	2108      	movs	r1, #8
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7fe fe53 	bl	8004bf8 <WIZCHIP_READ>
 8005f52:	4603      	mov	r3, r0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	737b      	strb	r3, [r7, #13]
 8005f58:	210a      	movs	r1, #10
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fe fe4c 	bl	8004bf8 <WIZCHIP_READ>
 8005f60:	4603      	mov	r3, r0
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	73bb      	strb	r3, [r7, #14]
 8005f6a:	210a      	movs	r1, #10
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7fe fe43 	bl	8004bf8 <WIZCHIP_READ>
 8005f72:	4603      	mov	r3, r0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	73fb      	strb	r3, [r7, #15]
 8005f78:	210c      	movs	r1, #12
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fe fe3c 	bl	8004bf8 <WIZCHIP_READ>
 8005f80:	4603      	mov	r3, r0
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	743b      	strb	r3, [r7, #16]
 8005f8a:	210c      	movs	r1, #12
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7fe fe33 	bl	8004bf8 <WIZCHIP_READ>
 8005f92:	4603      	mov	r3, r0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	747b      	strb	r3, [r7, #17]
   getGAR(ChipAddr, gw);  getSUBR(ChipAddr, sn);  getSIPR(ChipAddr, sip);
 8005f98:	2110      	movs	r1, #16
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fe fe2c 	bl	8004bf8 <WIZCHIP_READ>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	0a1b      	lsrs	r3, r3, #8
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	773b      	strb	r3, [r7, #28]
 8005faa:	2110      	movs	r1, #16
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7fe fe23 	bl	8004bf8 <WIZCHIP_READ>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	777b      	strb	r3, [r7, #29]
 8005fb8:	2112      	movs	r1, #18
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fe fe1c 	bl	8004bf8 <WIZCHIP_READ>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	77bb      	strb	r3, [r7, #30]
 8005fca:	2112      	movs	r1, #18
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fe fe13 	bl	8004bf8 <WIZCHIP_READ>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	2114      	movs	r1, #20
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fe fe0c 	bl	8004bf8 <WIZCHIP_READ>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	763b      	strb	r3, [r7, #24]
 8005fea:	2114      	movs	r1, #20
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7fe fe03 	bl	8004bf8 <WIZCHIP_READ>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	767b      	strb	r3, [r7, #25]
 8005ff8:	2116      	movs	r1, #22
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fe fdfc 	bl	8004bf8 <WIZCHIP_READ>
 8006000:	4603      	mov	r3, r0
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	b29b      	uxth	r3, r3
 8006006:	b2db      	uxtb	r3, r3
 8006008:	76bb      	strb	r3, [r7, #26]
 800600a:	2116      	movs	r1, #22
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fe fdf3 	bl	8004bf8 <WIZCHIP_READ>
 8006012:	4603      	mov	r3, r0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	76fb      	strb	r3, [r7, #27]
 8006018:	2118      	movs	r1, #24
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fe fdec 	bl	8004bf8 <WIZCHIP_READ>
 8006020:	4603      	mov	r3, r0
 8006022:	0a1b      	lsrs	r3, r3, #8
 8006024:	b29b      	uxth	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	753b      	strb	r3, [r7, #20]
 800602a:	2118      	movs	r1, #24
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7fe fde3 	bl	8004bf8 <WIZCHIP_READ>
 8006032:	4603      	mov	r3, r0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	757b      	strb	r3, [r7, #21]
 8006038:	211a      	movs	r1, #26
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fe fddc 	bl	8004bf8 <WIZCHIP_READ>
 8006040:	4603      	mov	r3, r0
 8006042:	0a1b      	lsrs	r3, r3, #8
 8006044:	b29b      	uxth	r3, r3
 8006046:	b2db      	uxtb	r3, r3
 8006048:	75bb      	strb	r3, [r7, #22]
 800604a:	211a      	movs	r1, #26
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7fe fdd3 	bl	8004bf8 <WIZCHIP_READ>
 8006052:	4603      	mov	r3, r0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	75fb      	strb	r3, [r7, #23]
   setMR(ChipAddr, MR_RST);
 8006058:	2280      	movs	r2, #128	; 0x80
 800605a:	2100      	movs	r1, #0
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fe fdb7 	bl	8004bd0 <WIZCHIP_WRITE>
   getMR(ChipAddr); // for delay
 8006062:	2100      	movs	r1, #0
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fe fdc7 	bl	8004bf8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(ChipAddr, mac);
 800606a:	7b3b      	ldrb	r3, [r7, #12]
 800606c:	b29b      	uxth	r3, r3
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	b29a      	uxth	r2, r3
 8006072:	7b7b      	ldrb	r3, [r7, #13]
 8006074:	b29b      	uxth	r3, r3
 8006076:	4413      	add	r3, r2
 8006078:	b29b      	uxth	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	2108      	movs	r1, #8
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fe fda6 	bl	8004bd0 <WIZCHIP_WRITE>
 8006084:	7bbb      	ldrb	r3, [r7, #14]
 8006086:	b29b      	uxth	r3, r3
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	b29a      	uxth	r2, r3
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	b29b      	uxth	r3, r3
 8006090:	4413      	add	r3, r2
 8006092:	b29b      	uxth	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	210a      	movs	r1, #10
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fe fd99 	bl	8004bd0 <WIZCHIP_WRITE>
 800609e:	7c3b      	ldrb	r3, [r7, #16]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	7c7b      	ldrb	r3, [r7, #17]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	4413      	add	r3, r2
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	210c      	movs	r1, #12
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fe fd8c 	bl	8004bd0 <WIZCHIP_WRITE>
   setGAR(ChipAddr, gw);
 80060b8:	7f3b      	ldrb	r3, [r7, #28]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	b29a      	uxth	r2, r3
 80060c0:	7f7b      	ldrb	r3, [r7, #29]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	4413      	add	r3, r2
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	2110      	movs	r1, #16
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7fe fd7f 	bl	8004bd0 <WIZCHIP_WRITE>
 80060d2:	7fbb      	ldrb	r3, [r7, #30]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	b29a      	uxth	r2, r3
 80060da:	7ffb      	ldrb	r3, [r7, #31]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	4413      	add	r3, r2
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	2112      	movs	r1, #18
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fe fd72 	bl	8004bd0 <WIZCHIP_WRITE>
   setSUBR(ChipAddr, sn);
 80060ec:	7e3b      	ldrb	r3, [r7, #24]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	7e7b      	ldrb	r3, [r7, #25]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	4413      	add	r3, r2
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	2114      	movs	r1, #20
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7fe fd65 	bl	8004bd0 <WIZCHIP_WRITE>
 8006106:	7ebb      	ldrb	r3, [r7, #26]
 8006108:	b29b      	uxth	r3, r3
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	b29a      	uxth	r2, r3
 800610e:	7efb      	ldrb	r3, [r7, #27]
 8006110:	b29b      	uxth	r3, r3
 8006112:	4413      	add	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	2116      	movs	r1, #22
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fe fd58 	bl	8004bd0 <WIZCHIP_WRITE>
   setSIPR(ChipAddr, sip);
 8006120:	7d3b      	ldrb	r3, [r7, #20]
 8006122:	b29b      	uxth	r3, r3
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	b29a      	uxth	r2, r3
 8006128:	7d7b      	ldrb	r3, [r7, #21]
 800612a:	b29b      	uxth	r3, r3
 800612c:	4413      	add	r3, r2
 800612e:	b29b      	uxth	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	2118      	movs	r1, #24
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7fe fd4b 	bl	8004bd0 <WIZCHIP_WRITE>
 800613a:	7dbb      	ldrb	r3, [r7, #22]
 800613c:	b29b      	uxth	r3, r3
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	b29a      	uxth	r2, r3
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	b29b      	uxth	r3, r3
 8006146:	4413      	add	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	211a      	movs	r1, #26
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fe fd3e 	bl	8004bd0 <WIZCHIP_WRITE>
}
 8006154:	bf00      	nop
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <wizchip_init>:

int8_t wizchip_init(uint32_t ChipAddr, uint8_t* txsize, uint8_t* rxsize)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	75bb      	strb	r3, [r7, #22]
   wizchip_sw_reset(ChipAddr);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff fedf 	bl	8005f30 <wizchip_sw_reset>
   if(txsize)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d02a      	beq.n	80061ce <wizchip_init+0x72>
   {
      tmp = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	75bb      	strb	r3, [r7, #22]
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800617c:	2300      	movs	r3, #0
 800617e:	75fb      	strb	r3, [r7, #23]
 8006180:	e018      	b.n	80061b4 <wizchip_init+0x58>
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8006182:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4413      	add	r3, r2
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b3f      	cmp	r3, #63	; 0x3f
 800618e:	d902      	bls.n	8006196 <wizchip_init+0x3a>
 8006190:	f04f 33ff 	mov.w	r3, #4294967295
 8006194:	e04a      	b.n	800622c <wizchip_init+0xd0>
			tmp += txsize[i];
 8006196:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4413      	add	r3, r2
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	7dbb      	ldrb	r3, [r7, #22]
 80061a2:	4413      	add	r3, r2
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	75bb      	strb	r3, [r7, #22]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80061a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	3301      	adds	r3, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	75fb      	strb	r3, [r7, #23]
 80061b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061b8:	2b07      	cmp	r3, #7
 80061ba:	dde2      	ble.n	8006182 <wizchip_init+0x26>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 80061bc:	7dbb      	ldrb	r3, [r7, #22]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <wizchip_init+0x72>
 80061c8:	f04f 33ff 	mov.w	r3, #4294967295
 80061cc:	e02e      	b.n	800622c <wizchip_init+0xd0>
		}

	#endif
   }

   if(rxsize)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d02a      	beq.n	800622a <wizchip_init+0xce>
   {
      tmp = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	75bb      	strb	r3, [r7, #22]
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80061d8:	2300      	movs	r3, #0
 80061da:	75fb      	strb	r3, [r7, #23]
 80061dc:	e018      	b.n	8006210 <wizchip_init+0xb4>
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80061de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4413      	add	r3, r2
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b3f      	cmp	r3, #63	; 0x3f
 80061ea:	d902      	bls.n	80061f2 <wizchip_init+0x96>
 80061ec:	f04f 33ff 	mov.w	r3, #4294967295
 80061f0:	e01c      	b.n	800622c <wizchip_init+0xd0>
			tmp += rxsize[i];
 80061f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4413      	add	r3, r2
 80061fa:	781a      	ldrb	r2, [r3, #0]
 80061fc:	7dbb      	ldrb	r3, [r7, #22]
 80061fe:	4413      	add	r3, r2
 8006200:	b2db      	uxtb	r3, r3
 8006202:	75bb      	strb	r3, [r7, #22]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006204:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	3301      	adds	r3, #1
 800620c:	b2db      	uxtb	r3, r3
 800620e:	75fb      	strb	r3, [r7, #23]
 8006210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006214:	2b07      	cmp	r3, #7
 8006216:	dde2      	ble.n	80061de <wizchip_init+0x82>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8006218:	7dbb      	ldrb	r3, [r7, #22]
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <wizchip_init+0xce>
 8006224:	f04f 33ff 	mov.w	r3, #4294967295
 8006228:	e000      	b.n	800622c <wizchip_init+0xd0>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(uint32_t ChipAddr, intr_kind intr)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	807b      	strh	r3, [r7, #2]
   uint8_t ir  = (uint8_t)intr;
 8006240:	887b      	ldrh	r3, [r7, #2]
 8006242:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8006244:	887b      	ldrh	r3, [r7, #2]
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	b29b      	uxth	r3, r3
 800624a:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	f043 0310 	orr.w	r3, r3, #16
 8006252:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR(ChipAddr, ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	b21a      	sxth	r2, r3
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	b21b      	sxth	r3, r3
 800625e:	4313      	orrs	r3, r2
 8006260:	b21b      	sxth	r3, r3
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	2102      	movs	r1, #2
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fe fcae 	bl	8004bd0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8006274:	bf00      	nop
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(uint32_t ChipAddr)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
   uint8_t ir  = 0;
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	73bb      	strb	r3, [r7, #14]
   uint16_t ret = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	81bb      	strh	r3, [r7, #12]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR(ChipAddr);
 8006290:	2102      	movs	r1, #2
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fe fcb0 	bl	8004bf8 <WIZCHIP_READ>
 8006298:	4603      	mov	r3, r0
 800629a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800629e:	81bb      	strh	r3, [r7, #12]
   ir = (uint8_t)(ret >> 8);
 80062a0:	89bb      	ldrh	r3, [r7, #12]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	73fb      	strb	r3, [r7, #15]
   sir = (uint8_t)ret;
 80062a8:	89bb      	ldrh	r3, [r7, #12]
 80062aa:	73bb      	strb	r3, [r7, #14]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	81bb      	strh	r3, [r7, #12]
  ret = (ret << 8) + ir;
 80062b0:	89bb      	ldrh	r3, [r7, #12]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	81bb      	strh	r3, [r7, #12]
  return (intr_kind)ret;
 80062be:	89bb      	ldrh	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(uint32_t ChipAddr, intr_kind intr)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	807b      	strh	r3, [r7, #2]
   uint8_t imr  = (uint8_t)intr;
 80062d4:	887b      	ldrh	r3, [r7, #2]
 80062d6:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80062d8:	887b      	ldrh	r3, [r7, #2]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	b29b      	uxth	r3, r3
 80062de:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	f023 0310 	bic.w	r3, r3, #16
 80062e6:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ChipAddr, ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	b21a      	sxth	r2, r3
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	b21b      	sxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b21b      	sxth	r3, r3
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	2104      	movs	r1, #4
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fe fc64 	bl	8004bd0 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(uint32_t ChipAddr)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
   uint8_t imr  = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	73bb      	strb	r3, [r7, #14]
   uint16_t ret = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	81bb      	strh	r3, [r7, #12]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR(ChipAddr);
 8006324:	2104      	movs	r1, #4
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fe fc66 	bl	8004bf8 <WIZCHIP_READ>
 800632c:	4603      	mov	r3, r0
 800632e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006332:	81bb      	strh	r3, [r7, #12]
   imr = (uint8_t)(ret >> 8);
 8006334:	89bb      	ldrh	r3, [r7, #12]
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	b29b      	uxth	r3, r3
 800633a:	73fb      	strb	r3, [r7, #15]
   simr = (uint8_t)ret;
 800633c:	89bb      	ldrh	r3, [r7, #12]
 800633e:	73bb      	strb	r3, [r7, #14]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	f023 0310 	bic.w	r3, r3, #16
 8006346:	73fb      	strb	r3, [r7, #15]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	81bb      	strh	r3, [r7, #12]
  ret = (ret << 8) + imr;
 800634c:	89bb      	ldrh	r3, [r7, #12]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	b29a      	uxth	r2, r3
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	b29b      	uxth	r3, r3
 8006356:	4413      	add	r3, r2
 8006358:	81bb      	strh	r3, [r7, #12]
  return (intr_kind)ret;
 800635a:	89bb      	ldrh	r3, [r7, #12]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(uint32_t ChipAddr, wiz_NetInfo* pnetinfo)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
   uint8_t mac[6]={0,0};
 800636e:	2300      	movs	r3, #0
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	2300      	movs	r3, #0
 8006374:	81bb      	strh	r3, [r7, #12]
   setSHAR(ChipAddr, pnetinfo->mac);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	b29a      	uxth	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	b29b      	uxth	r3, r3
 8006386:	4413      	add	r3, r2
 8006388:	b29b      	uxth	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	2108      	movs	r1, #8
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fe fc1e 	bl	8004bd0 <WIZCHIP_WRITE>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	789b      	ldrb	r3, [r3, #2]
 8006398:	b29b      	uxth	r3, r3
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	b29a      	uxth	r2, r3
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	78db      	ldrb	r3, [r3, #3]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	210a      	movs	r1, #10
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fe fc0f 	bl	8004bd0 <WIZCHIP_WRITE>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	791b      	ldrb	r3, [r3, #4]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	795b      	ldrb	r3, [r3, #5]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	210c      	movs	r1, #12
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fe fc00 	bl	8004bd0 <WIZCHIP_WRITE>
   setGAR(ChipAddr, pnetinfo->gw);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	7b9b      	ldrb	r3, [r3, #14]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	b29a      	uxth	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	7bdb      	ldrb	r3, [r3, #15]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	4413      	add	r3, r2
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	2110      	movs	r1, #16
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7fe fbf1 	bl	8004bd0 <WIZCHIP_WRITE>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	7c1b      	ldrb	r3, [r3, #16]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	7c5b      	ldrb	r3, [r3, #17]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	4413      	add	r3, r2
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	2112      	movs	r1, #18
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fe fbe2 	bl	8004bd0 <WIZCHIP_WRITE>
   setSUBR(ChipAddr, pnetinfo->sn);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	7a9b      	ldrb	r3, [r3, #10]
 8006410:	b29b      	uxth	r3, r3
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	b29a      	uxth	r2, r3
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	7adb      	ldrb	r3, [r3, #11]
 800641a:	b29b      	uxth	r3, r3
 800641c:	4413      	add	r3, r2
 800641e:	b29b      	uxth	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	2114      	movs	r1, #20
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fe fbd3 	bl	8004bd0 <WIZCHIP_WRITE>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	7b1b      	ldrb	r3, [r3, #12]
 800642e:	b29b      	uxth	r3, r3
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	b29a      	uxth	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	7b5b      	ldrb	r3, [r3, #13]
 8006438:	b29b      	uxth	r3, r3
 800643a:	4413      	add	r3, r2
 800643c:	b29b      	uxth	r3, r3
 800643e:	461a      	mov	r2, r3
 8006440:	2116      	movs	r1, #22
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fe fbc4 	bl	8004bd0 <WIZCHIP_WRITE>
   setSIPR(ChipAddr, pnetinfo->ip);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	799b      	ldrb	r3, [r3, #6]
 800644c:	b29b      	uxth	r3, r3
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	b29a      	uxth	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	79db      	ldrb	r3, [r3, #7]
 8006456:	b29b      	uxth	r3, r3
 8006458:	4413      	add	r3, r2
 800645a:	b29b      	uxth	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	2118      	movs	r1, #24
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7fe fbb5 	bl	8004bd0 <WIZCHIP_WRITE>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	7a1b      	ldrb	r3, [r3, #8]
 800646a:	b29b      	uxth	r3, r3
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	b29a      	uxth	r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	7a5b      	ldrb	r3, [r3, #9]
 8006474:	b29b      	uxth	r3, r3
 8006476:	4413      	add	r3, r2
 8006478:	b29b      	uxth	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	211a      	movs	r1, #26
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fe fba6 	bl	8004bd0 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	7c9a      	ldrb	r2, [r3, #18]
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <wizchip_setnetinfo+0x150>)
 800648a:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	7cda      	ldrb	r2, [r3, #19]
 8006490:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <wizchip_setnetinfo+0x150>)
 8006492:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	7d1a      	ldrb	r2, [r3, #20]
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <wizchip_setnetinfo+0x150>)
 800649a:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	7d5a      	ldrb	r2, [r3, #21]
 80064a0:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <wizchip_setnetinfo+0x150>)
 80064a2:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	7d9a      	ldrb	r2, [r3, #22]
 80064a8:	4b03      	ldr	r3, [pc, #12]	; (80064b8 <wizchip_setnetinfo+0x154>)
 80064aa:	701a      	strb	r2, [r3, #0]
}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20001250 	.word	0x20001250
 80064b8:	20001254 	.word	0x20001254

080064bc <wizchip_getnetinfo>:

void wizchip_getnetinfo(uint32_t ChipAddr, wiz_NetInfo* pnetinfo)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
   getSHAR(ChipAddr, pnetinfo->mac);
 80064c6:	2108      	movs	r1, #8
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7fe fb95 	bl	8004bf8 <WIZCHIP_READ>
 80064ce:	4603      	mov	r3, r0
 80064d0:	0a1b      	lsrs	r3, r3, #8
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	2108      	movs	r1, #8
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fe fb8b 	bl	8004bf8 <WIZCHIP_READ>
 80064e2:	4603      	mov	r3, r0
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	705a      	strb	r2, [r3, #1]
 80064ea:	210a      	movs	r1, #10
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fe fb83 	bl	8004bf8 <WIZCHIP_READ>
 80064f2:	4603      	mov	r3, r0
 80064f4:	0a1b      	lsrs	r3, r3, #8
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	709a      	strb	r2, [r3, #2]
 80064fe:	210a      	movs	r1, #10
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fe fb79 	bl	8004bf8 <WIZCHIP_READ>
 8006506:	4603      	mov	r3, r0
 8006508:	b2da      	uxtb	r2, r3
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	70da      	strb	r2, [r3, #3]
 800650e:	210c      	movs	r1, #12
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7fe fb71 	bl	8004bf8 <WIZCHIP_READ>
 8006516:	4603      	mov	r3, r0
 8006518:	0a1b      	lsrs	r3, r3, #8
 800651a:	b29b      	uxth	r3, r3
 800651c:	b2da      	uxtb	r2, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	711a      	strb	r2, [r3, #4]
 8006522:	210c      	movs	r1, #12
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fe fb67 	bl	8004bf8 <WIZCHIP_READ>
 800652a:	4603      	mov	r3, r0
 800652c:	b2da      	uxtb	r2, r3
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	715a      	strb	r2, [r3, #5]
   getGAR(ChipAddr, pnetinfo->gw);
 8006532:	2110      	movs	r1, #16
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fe fb5f 	bl	8004bf8 <WIZCHIP_READ>
 800653a:	4603      	mov	r3, r0
 800653c:	0a1b      	lsrs	r3, r3, #8
 800653e:	b29b      	uxth	r3, r3
 8006540:	b2da      	uxtb	r2, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	739a      	strb	r2, [r3, #14]
 8006546:	2110      	movs	r1, #16
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7fe fb55 	bl	8004bf8 <WIZCHIP_READ>
 800654e:	4603      	mov	r3, r0
 8006550:	b2da      	uxtb	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	73da      	strb	r2, [r3, #15]
 8006556:	2112      	movs	r1, #18
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7fe fb4d 	bl	8004bf8 <WIZCHIP_READ>
 800655e:	4603      	mov	r3, r0
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	b29b      	uxth	r3, r3
 8006564:	b2da      	uxtb	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	741a      	strb	r2, [r3, #16]
 800656a:	2112      	movs	r1, #18
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fe fb43 	bl	8004bf8 <WIZCHIP_READ>
 8006572:	4603      	mov	r3, r0
 8006574:	b2da      	uxtb	r2, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	745a      	strb	r2, [r3, #17]
   getSUBR(ChipAddr, pnetinfo->sn);
 800657a:	2114      	movs	r1, #20
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fe fb3b 	bl	8004bf8 <WIZCHIP_READ>
 8006582:	4603      	mov	r3, r0
 8006584:	0a1b      	lsrs	r3, r3, #8
 8006586:	b29b      	uxth	r3, r3
 8006588:	b2da      	uxtb	r2, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	729a      	strb	r2, [r3, #10]
 800658e:	2114      	movs	r1, #20
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fe fb31 	bl	8004bf8 <WIZCHIP_READ>
 8006596:	4603      	mov	r3, r0
 8006598:	b2da      	uxtb	r2, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	72da      	strb	r2, [r3, #11]
 800659e:	2116      	movs	r1, #22
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7fe fb29 	bl	8004bf8 <WIZCHIP_READ>
 80065a6:	4603      	mov	r3, r0
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	731a      	strb	r2, [r3, #12]
 80065b2:	2116      	movs	r1, #22
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7fe fb1f 	bl	8004bf8 <WIZCHIP_READ>
 80065ba:	4603      	mov	r3, r0
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	735a      	strb	r2, [r3, #13]
   getSIPR(ChipAddr, pnetinfo->ip);
 80065c2:	2118      	movs	r1, #24
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fe fb17 	bl	8004bf8 <WIZCHIP_READ>
 80065ca:	4603      	mov	r3, r0
 80065cc:	0a1b      	lsrs	r3, r3, #8
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	719a      	strb	r2, [r3, #6]
 80065d6:	2118      	movs	r1, #24
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7fe fb0d 	bl	8004bf8 <WIZCHIP_READ>
 80065de:	4603      	mov	r3, r0
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	71da      	strb	r2, [r3, #7]
 80065e6:	211a      	movs	r1, #26
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fe fb05 	bl	8004bf8 <WIZCHIP_READ>
 80065ee:	4603      	mov	r3, r0
 80065f0:	0a1b      	lsrs	r3, r3, #8
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	721a      	strb	r2, [r3, #8]
 80065fa:	211a      	movs	r1, #26
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fe fafb 	bl	8004bf8 <WIZCHIP_READ>
 8006602:	4603      	mov	r3, r0
 8006604:	b2da      	uxtb	r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 800660a:	4b0c      	ldr	r3, [pc, #48]	; (800663c <wizchip_getnetinfo+0x180>)
 800660c:	781a      	ldrb	r2, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <wizchip_getnetinfo+0x180>)
 8006614:	785a      	ldrb	r2, [r3, #1]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <wizchip_getnetinfo+0x180>)
 800661c:	789a      	ldrb	r2, [r3, #2]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8006622:	4b06      	ldr	r3, [pc, #24]	; (800663c <wizchip_getnetinfo+0x180>)
 8006624:	78da      	ldrb	r2, [r3, #3]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800662a:	4b05      	ldr	r3, [pc, #20]	; (8006640 <wizchip_getnetinfo+0x184>)
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	759a      	strb	r2, [r3, #22]
}
 8006632:	bf00      	nop
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20001250 	.word	0x20001250
 8006640:	20001254 	.word	0x20001254

08006644 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(uint32_t ChipAddr, netmode_type netmode)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
   uint8_t tmp = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <wizchip_setnetmode+0x20>
 800665e:	f04f 33ff 	mov.w	r3, #4294967295
 8006662:	e011      	b.n	8006688 <wizchip_setnetmode+0x44>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR(ChipAddr);
 8006664:	2100      	movs	r1, #0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fe fac6 	bl	8004bf8 <WIZCHIP_READ>
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8006670:	7bfa      	ldrb	r2, [r7, #15]
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	4313      	orrs	r3, r2
 8006676:	73fb      	strb	r3, [r7, #15]
   setMR(ChipAddr, tmp);
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	b29b      	uxth	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	2100      	movs	r1, #0
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fe faa5 	bl	8004bd0 <WIZCHIP_WRITE>
   return 0;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(uint32_t ChipAddr)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
   return (netmode_type) getMR(ChipAddr);
 8006698:	2100      	movs	r1, #0
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fe faac 	bl	8004bf8 <WIZCHIP_READ>
 80066a0:	4603      	mov	r3, r0
 80066a2:	b2db      	uxtb	r3, r3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <wizchip_settimeout>:

void wizchip_settimeout(uint32_t ChipAddr, wiz_NetTimeout* nettime)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
   setRCR(ChipAddr, nettime->retry_cnt);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	211e      	movs	r1, #30
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fe fa85 	bl	8004bd0 <WIZCHIP_WRITE>
   setRTR(ChipAddr, nettime->time_100us);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	885b      	ldrh	r3, [r3, #2]
 80066ca:	461a      	mov	r2, r3
 80066cc:	211c      	movs	r1, #28
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fe fa7e 	bl	8004bd0 <WIZCHIP_WRITE>
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <wizchip_gettimeout>:

void wizchip_gettimeout(uint32_t ChipAddr, wiz_NetTimeout* nettime)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
   nettime->retry_cnt = getRCR(ChipAddr);
 80066e6:	211e      	movs	r1, #30
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7fe fa85 	bl	8004bf8 <WIZCHIP_READ>
 80066ee:	4603      	mov	r3, r0
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR(ChipAddr);
 80066f6:	211c      	movs	r1, #28
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7fe fa7d 	bl	8004bf8 <WIZCHIP_READ>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	805a      	strh	r2, [r3, #2]
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <__errno>:
 8006710:	4b01      	ldr	r3, [pc, #4]	; (8006718 <__errno+0x8>)
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000078 	.word	0x20000078

0800671c <__libc_init_array>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	4d0d      	ldr	r5, [pc, #52]	; (8006754 <__libc_init_array+0x38>)
 8006720:	4c0d      	ldr	r4, [pc, #52]	; (8006758 <__libc_init_array+0x3c>)
 8006722:	1b64      	subs	r4, r4, r5
 8006724:	10a4      	asrs	r4, r4, #2
 8006726:	2600      	movs	r6, #0
 8006728:	42a6      	cmp	r6, r4
 800672a:	d109      	bne.n	8006740 <__libc_init_array+0x24>
 800672c:	4d0b      	ldr	r5, [pc, #44]	; (800675c <__libc_init_array+0x40>)
 800672e:	4c0c      	ldr	r4, [pc, #48]	; (8006760 <__libc_init_array+0x44>)
 8006730:	f001 f824 	bl	800777c <_init>
 8006734:	1b64      	subs	r4, r4, r5
 8006736:	10a4      	asrs	r4, r4, #2
 8006738:	2600      	movs	r6, #0
 800673a:	42a6      	cmp	r6, r4
 800673c:	d105      	bne.n	800674a <__libc_init_array+0x2e>
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	f855 3b04 	ldr.w	r3, [r5], #4
 8006744:	4798      	blx	r3
 8006746:	3601      	adds	r6, #1
 8006748:	e7ee      	b.n	8006728 <__libc_init_array+0xc>
 800674a:	f855 3b04 	ldr.w	r3, [r5], #4
 800674e:	4798      	blx	r3
 8006750:	3601      	adds	r6, #1
 8006752:	e7f2      	b.n	800673a <__libc_init_array+0x1e>
 8006754:	08007ac8 	.word	0x08007ac8
 8006758:	08007ac8 	.word	0x08007ac8
 800675c:	08007ac8 	.word	0x08007ac8
 8006760:	08007acc 	.word	0x08007acc

08006764 <memset>:
 8006764:	4402      	add	r2, r0
 8006766:	4603      	mov	r3, r0
 8006768:	4293      	cmp	r3, r2
 800676a:	d100      	bne.n	800676e <memset+0xa>
 800676c:	4770      	bx	lr
 800676e:	f803 1b01 	strb.w	r1, [r3], #1
 8006772:	e7f9      	b.n	8006768 <memset+0x4>

08006774 <iprintf>:
 8006774:	b40f      	push	{r0, r1, r2, r3}
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <iprintf+0x2c>)
 8006778:	b513      	push	{r0, r1, r4, lr}
 800677a:	681c      	ldr	r4, [r3, #0]
 800677c:	b124      	cbz	r4, 8006788 <iprintf+0x14>
 800677e:	69a3      	ldr	r3, [r4, #24]
 8006780:	b913      	cbnz	r3, 8006788 <iprintf+0x14>
 8006782:	4620      	mov	r0, r4
 8006784:	f000 fa5e 	bl	8006c44 <__sinit>
 8006788:	ab05      	add	r3, sp, #20
 800678a:	9a04      	ldr	r2, [sp, #16]
 800678c:	68a1      	ldr	r1, [r4, #8]
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fc67 	bl	8007064 <_vfiprintf_r>
 8006796:	b002      	add	sp, #8
 8006798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800679c:	b004      	add	sp, #16
 800679e:	4770      	bx	lr
 80067a0:	20000078 	.word	0x20000078

080067a4 <_puts_r>:
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	460e      	mov	r6, r1
 80067a8:	4605      	mov	r5, r0
 80067aa:	b118      	cbz	r0, 80067b4 <_puts_r+0x10>
 80067ac:	6983      	ldr	r3, [r0, #24]
 80067ae:	b90b      	cbnz	r3, 80067b4 <_puts_r+0x10>
 80067b0:	f000 fa48 	bl	8006c44 <__sinit>
 80067b4:	69ab      	ldr	r3, [r5, #24]
 80067b6:	68ac      	ldr	r4, [r5, #8]
 80067b8:	b913      	cbnz	r3, 80067c0 <_puts_r+0x1c>
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 fa42 	bl	8006c44 <__sinit>
 80067c0:	4b2c      	ldr	r3, [pc, #176]	; (8006874 <_puts_r+0xd0>)
 80067c2:	429c      	cmp	r4, r3
 80067c4:	d120      	bne.n	8006808 <_puts_r+0x64>
 80067c6:	686c      	ldr	r4, [r5, #4]
 80067c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ca:	07db      	lsls	r3, r3, #31
 80067cc:	d405      	bmi.n	80067da <_puts_r+0x36>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	0598      	lsls	r0, r3, #22
 80067d2:	d402      	bmi.n	80067da <_puts_r+0x36>
 80067d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d6:	f000 fad3 	bl	8006d80 <__retarget_lock_acquire_recursive>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	0719      	lsls	r1, r3, #28
 80067de:	d51d      	bpl.n	800681c <_puts_r+0x78>
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	b1db      	cbz	r3, 800681c <_puts_r+0x78>
 80067e4:	3e01      	subs	r6, #1
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067ec:	3b01      	subs	r3, #1
 80067ee:	60a3      	str	r3, [r4, #8]
 80067f0:	bb39      	cbnz	r1, 8006842 <_puts_r+0x9e>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da38      	bge.n	8006868 <_puts_r+0xc4>
 80067f6:	4622      	mov	r2, r4
 80067f8:	210a      	movs	r1, #10
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 f848 	bl	8006890 <__swbuf_r>
 8006800:	3001      	adds	r0, #1
 8006802:	d011      	beq.n	8006828 <_puts_r+0x84>
 8006804:	250a      	movs	r5, #10
 8006806:	e011      	b.n	800682c <_puts_r+0x88>
 8006808:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <_puts_r+0xd4>)
 800680a:	429c      	cmp	r4, r3
 800680c:	d101      	bne.n	8006812 <_puts_r+0x6e>
 800680e:	68ac      	ldr	r4, [r5, #8]
 8006810:	e7da      	b.n	80067c8 <_puts_r+0x24>
 8006812:	4b1a      	ldr	r3, [pc, #104]	; (800687c <_puts_r+0xd8>)
 8006814:	429c      	cmp	r4, r3
 8006816:	bf08      	it	eq
 8006818:	68ec      	ldreq	r4, [r5, #12]
 800681a:	e7d5      	b.n	80067c8 <_puts_r+0x24>
 800681c:	4621      	mov	r1, r4
 800681e:	4628      	mov	r0, r5
 8006820:	f000 f888 	bl	8006934 <__swsetup_r>
 8006824:	2800      	cmp	r0, #0
 8006826:	d0dd      	beq.n	80067e4 <_puts_r+0x40>
 8006828:	f04f 35ff 	mov.w	r5, #4294967295
 800682c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800682e:	07da      	lsls	r2, r3, #31
 8006830:	d405      	bmi.n	800683e <_puts_r+0x9a>
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	059b      	lsls	r3, r3, #22
 8006836:	d402      	bmi.n	800683e <_puts_r+0x9a>
 8006838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683a:	f000 faa2 	bl	8006d82 <__retarget_lock_release_recursive>
 800683e:	4628      	mov	r0, r5
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	2b00      	cmp	r3, #0
 8006844:	da04      	bge.n	8006850 <_puts_r+0xac>
 8006846:	69a2      	ldr	r2, [r4, #24]
 8006848:	429a      	cmp	r2, r3
 800684a:	dc06      	bgt.n	800685a <_puts_r+0xb6>
 800684c:	290a      	cmp	r1, #10
 800684e:	d004      	beq.n	800685a <_puts_r+0xb6>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	6022      	str	r2, [r4, #0]
 8006856:	7019      	strb	r1, [r3, #0]
 8006858:	e7c5      	b.n	80067e6 <_puts_r+0x42>
 800685a:	4622      	mov	r2, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 f817 	bl	8006890 <__swbuf_r>
 8006862:	3001      	adds	r0, #1
 8006864:	d1bf      	bne.n	80067e6 <_puts_r+0x42>
 8006866:	e7df      	b.n	8006828 <_puts_r+0x84>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	250a      	movs	r5, #10
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	701d      	strb	r5, [r3, #0]
 8006872:	e7db      	b.n	800682c <_puts_r+0x88>
 8006874:	08007a4c 	.word	0x08007a4c
 8006878:	08007a6c 	.word	0x08007a6c
 800687c:	08007a2c 	.word	0x08007a2c

08006880 <puts>:
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <puts+0xc>)
 8006882:	4601      	mov	r1, r0
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	f7ff bf8d 	b.w	80067a4 <_puts_r>
 800688a:	bf00      	nop
 800688c:	20000078 	.word	0x20000078

08006890 <__swbuf_r>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	460e      	mov	r6, r1
 8006894:	4614      	mov	r4, r2
 8006896:	4605      	mov	r5, r0
 8006898:	b118      	cbz	r0, 80068a2 <__swbuf_r+0x12>
 800689a:	6983      	ldr	r3, [r0, #24]
 800689c:	b90b      	cbnz	r3, 80068a2 <__swbuf_r+0x12>
 800689e:	f000 f9d1 	bl	8006c44 <__sinit>
 80068a2:	4b21      	ldr	r3, [pc, #132]	; (8006928 <__swbuf_r+0x98>)
 80068a4:	429c      	cmp	r4, r3
 80068a6:	d12b      	bne.n	8006900 <__swbuf_r+0x70>
 80068a8:	686c      	ldr	r4, [r5, #4]
 80068aa:	69a3      	ldr	r3, [r4, #24]
 80068ac:	60a3      	str	r3, [r4, #8]
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	071a      	lsls	r2, r3, #28
 80068b2:	d52f      	bpl.n	8006914 <__swbuf_r+0x84>
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	b36b      	cbz	r3, 8006914 <__swbuf_r+0x84>
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	1ac0      	subs	r0, r0, r3
 80068be:	6963      	ldr	r3, [r4, #20]
 80068c0:	b2f6      	uxtb	r6, r6
 80068c2:	4283      	cmp	r3, r0
 80068c4:	4637      	mov	r7, r6
 80068c6:	dc04      	bgt.n	80068d2 <__swbuf_r+0x42>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 f926 	bl	8006b1c <_fflush_r>
 80068d0:	bb30      	cbnz	r0, 8006920 <__swbuf_r+0x90>
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	60a3      	str	r3, [r4, #8]
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	6022      	str	r2, [r4, #0]
 80068de:	701e      	strb	r6, [r3, #0]
 80068e0:	6963      	ldr	r3, [r4, #20]
 80068e2:	3001      	adds	r0, #1
 80068e4:	4283      	cmp	r3, r0
 80068e6:	d004      	beq.n	80068f2 <__swbuf_r+0x62>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	07db      	lsls	r3, r3, #31
 80068ec:	d506      	bpl.n	80068fc <__swbuf_r+0x6c>
 80068ee:	2e0a      	cmp	r6, #10
 80068f0:	d104      	bne.n	80068fc <__swbuf_r+0x6c>
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 f911 	bl	8006b1c <_fflush_r>
 80068fa:	b988      	cbnz	r0, 8006920 <__swbuf_r+0x90>
 80068fc:	4638      	mov	r0, r7
 80068fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <__swbuf_r+0x9c>)
 8006902:	429c      	cmp	r4, r3
 8006904:	d101      	bne.n	800690a <__swbuf_r+0x7a>
 8006906:	68ac      	ldr	r4, [r5, #8]
 8006908:	e7cf      	b.n	80068aa <__swbuf_r+0x1a>
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <__swbuf_r+0xa0>)
 800690c:	429c      	cmp	r4, r3
 800690e:	bf08      	it	eq
 8006910:	68ec      	ldreq	r4, [r5, #12]
 8006912:	e7ca      	b.n	80068aa <__swbuf_r+0x1a>
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f80c 	bl	8006934 <__swsetup_r>
 800691c:	2800      	cmp	r0, #0
 800691e:	d0cb      	beq.n	80068b8 <__swbuf_r+0x28>
 8006920:	f04f 37ff 	mov.w	r7, #4294967295
 8006924:	e7ea      	b.n	80068fc <__swbuf_r+0x6c>
 8006926:	bf00      	nop
 8006928:	08007a4c 	.word	0x08007a4c
 800692c:	08007a6c 	.word	0x08007a6c
 8006930:	08007a2c 	.word	0x08007a2c

08006934 <__swsetup_r>:
 8006934:	4b32      	ldr	r3, [pc, #200]	; (8006a00 <__swsetup_r+0xcc>)
 8006936:	b570      	push	{r4, r5, r6, lr}
 8006938:	681d      	ldr	r5, [r3, #0]
 800693a:	4606      	mov	r6, r0
 800693c:	460c      	mov	r4, r1
 800693e:	b125      	cbz	r5, 800694a <__swsetup_r+0x16>
 8006940:	69ab      	ldr	r3, [r5, #24]
 8006942:	b913      	cbnz	r3, 800694a <__swsetup_r+0x16>
 8006944:	4628      	mov	r0, r5
 8006946:	f000 f97d 	bl	8006c44 <__sinit>
 800694a:	4b2e      	ldr	r3, [pc, #184]	; (8006a04 <__swsetup_r+0xd0>)
 800694c:	429c      	cmp	r4, r3
 800694e:	d10f      	bne.n	8006970 <__swsetup_r+0x3c>
 8006950:	686c      	ldr	r4, [r5, #4]
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006958:	0719      	lsls	r1, r3, #28
 800695a:	d42c      	bmi.n	80069b6 <__swsetup_r+0x82>
 800695c:	06dd      	lsls	r5, r3, #27
 800695e:	d411      	bmi.n	8006984 <__swsetup_r+0x50>
 8006960:	2309      	movs	r3, #9
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	e03e      	b.n	80069ee <__swsetup_r+0xba>
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <__swsetup_r+0xd4>)
 8006972:	429c      	cmp	r4, r3
 8006974:	d101      	bne.n	800697a <__swsetup_r+0x46>
 8006976:	68ac      	ldr	r4, [r5, #8]
 8006978:	e7eb      	b.n	8006952 <__swsetup_r+0x1e>
 800697a:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <__swsetup_r+0xd8>)
 800697c:	429c      	cmp	r4, r3
 800697e:	bf08      	it	eq
 8006980:	68ec      	ldreq	r4, [r5, #12]
 8006982:	e7e6      	b.n	8006952 <__swsetup_r+0x1e>
 8006984:	0758      	lsls	r0, r3, #29
 8006986:	d512      	bpl.n	80069ae <__swsetup_r+0x7a>
 8006988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800698a:	b141      	cbz	r1, 800699e <__swsetup_r+0x6a>
 800698c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006990:	4299      	cmp	r1, r3
 8006992:	d002      	beq.n	800699a <__swsetup_r+0x66>
 8006994:	4630      	mov	r0, r6
 8006996:	f000 fa5b 	bl	8006e50 <_free_r>
 800699a:	2300      	movs	r3, #0
 800699c:	6363      	str	r3, [r4, #52]	; 0x34
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	2300      	movs	r3, #0
 80069a8:	6063      	str	r3, [r4, #4]
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f043 0308 	orr.w	r3, r3, #8
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	b94b      	cbnz	r3, 80069ce <__swsetup_r+0x9a>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c4:	d003      	beq.n	80069ce <__swsetup_r+0x9a>
 80069c6:	4621      	mov	r1, r4
 80069c8:	4630      	mov	r0, r6
 80069ca:	f000 fa01 	bl	8006dd0 <__smakebuf_r>
 80069ce:	89a0      	ldrh	r0, [r4, #12]
 80069d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069d4:	f010 0301 	ands.w	r3, r0, #1
 80069d8:	d00a      	beq.n	80069f0 <__swsetup_r+0xbc>
 80069da:	2300      	movs	r3, #0
 80069dc:	60a3      	str	r3, [r4, #8]
 80069de:	6963      	ldr	r3, [r4, #20]
 80069e0:	425b      	negs	r3, r3
 80069e2:	61a3      	str	r3, [r4, #24]
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	b943      	cbnz	r3, 80069fa <__swsetup_r+0xc6>
 80069e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069ec:	d1ba      	bne.n	8006964 <__swsetup_r+0x30>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	0781      	lsls	r1, r0, #30
 80069f2:	bf58      	it	pl
 80069f4:	6963      	ldrpl	r3, [r4, #20]
 80069f6:	60a3      	str	r3, [r4, #8]
 80069f8:	e7f4      	b.n	80069e4 <__swsetup_r+0xb0>
 80069fa:	2000      	movs	r0, #0
 80069fc:	e7f7      	b.n	80069ee <__swsetup_r+0xba>
 80069fe:	bf00      	nop
 8006a00:	20000078 	.word	0x20000078
 8006a04:	08007a4c 	.word	0x08007a4c
 8006a08:	08007a6c 	.word	0x08007a6c
 8006a0c:	08007a2c 	.word	0x08007a2c

08006a10 <__sflush_r>:
 8006a10:	898a      	ldrh	r2, [r1, #12]
 8006a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a16:	4605      	mov	r5, r0
 8006a18:	0710      	lsls	r0, r2, #28
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	d458      	bmi.n	8006ad0 <__sflush_r+0xc0>
 8006a1e:	684b      	ldr	r3, [r1, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc05      	bgt.n	8006a30 <__sflush_r+0x20>
 8006a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	dc02      	bgt.n	8006a30 <__sflush_r+0x20>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a32:	2e00      	cmp	r6, #0
 8006a34:	d0f9      	beq.n	8006a2a <__sflush_r+0x1a>
 8006a36:	2300      	movs	r3, #0
 8006a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a3c:	682f      	ldr	r7, [r5, #0]
 8006a3e:	602b      	str	r3, [r5, #0]
 8006a40:	d032      	beq.n	8006aa8 <__sflush_r+0x98>
 8006a42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	075a      	lsls	r2, r3, #29
 8006a48:	d505      	bpl.n	8006a56 <__sflush_r+0x46>
 8006a4a:	6863      	ldr	r3, [r4, #4]
 8006a4c:	1ac0      	subs	r0, r0, r3
 8006a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a50:	b10b      	cbz	r3, 8006a56 <__sflush_r+0x46>
 8006a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a54:	1ac0      	subs	r0, r0, r3
 8006a56:	2300      	movs	r3, #0
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a5c:	6a21      	ldr	r1, [r4, #32]
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47b0      	blx	r6
 8006a62:	1c43      	adds	r3, r0, #1
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	d106      	bne.n	8006a76 <__sflush_r+0x66>
 8006a68:	6829      	ldr	r1, [r5, #0]
 8006a6a:	291d      	cmp	r1, #29
 8006a6c:	d82c      	bhi.n	8006ac8 <__sflush_r+0xb8>
 8006a6e:	4a2a      	ldr	r2, [pc, #168]	; (8006b18 <__sflush_r+0x108>)
 8006a70:	40ca      	lsrs	r2, r1
 8006a72:	07d6      	lsls	r6, r2, #31
 8006a74:	d528      	bpl.n	8006ac8 <__sflush_r+0xb8>
 8006a76:	2200      	movs	r2, #0
 8006a78:	6062      	str	r2, [r4, #4]
 8006a7a:	04d9      	lsls	r1, r3, #19
 8006a7c:	6922      	ldr	r2, [r4, #16]
 8006a7e:	6022      	str	r2, [r4, #0]
 8006a80:	d504      	bpl.n	8006a8c <__sflush_r+0x7c>
 8006a82:	1c42      	adds	r2, r0, #1
 8006a84:	d101      	bne.n	8006a8a <__sflush_r+0x7a>
 8006a86:	682b      	ldr	r3, [r5, #0]
 8006a88:	b903      	cbnz	r3, 8006a8c <__sflush_r+0x7c>
 8006a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8006a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a8e:	602f      	str	r7, [r5, #0]
 8006a90:	2900      	cmp	r1, #0
 8006a92:	d0ca      	beq.n	8006a2a <__sflush_r+0x1a>
 8006a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a98:	4299      	cmp	r1, r3
 8006a9a:	d002      	beq.n	8006aa2 <__sflush_r+0x92>
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f000 f9d7 	bl	8006e50 <_free_r>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8006aa6:	e7c1      	b.n	8006a2c <__sflush_r+0x1c>
 8006aa8:	6a21      	ldr	r1, [r4, #32]
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b0      	blx	r6
 8006ab0:	1c41      	adds	r1, r0, #1
 8006ab2:	d1c7      	bne.n	8006a44 <__sflush_r+0x34>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0c4      	beq.n	8006a44 <__sflush_r+0x34>
 8006aba:	2b1d      	cmp	r3, #29
 8006abc:	d001      	beq.n	8006ac2 <__sflush_r+0xb2>
 8006abe:	2b16      	cmp	r3, #22
 8006ac0:	d101      	bne.n	8006ac6 <__sflush_r+0xb6>
 8006ac2:	602f      	str	r7, [r5, #0]
 8006ac4:	e7b1      	b.n	8006a2a <__sflush_r+0x1a>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006acc:	81a3      	strh	r3, [r4, #12]
 8006ace:	e7ad      	b.n	8006a2c <__sflush_r+0x1c>
 8006ad0:	690f      	ldr	r7, [r1, #16]
 8006ad2:	2f00      	cmp	r7, #0
 8006ad4:	d0a9      	beq.n	8006a2a <__sflush_r+0x1a>
 8006ad6:	0793      	lsls	r3, r2, #30
 8006ad8:	680e      	ldr	r6, [r1, #0]
 8006ada:	bf08      	it	eq
 8006adc:	694b      	ldreq	r3, [r1, #20]
 8006ade:	600f      	str	r7, [r1, #0]
 8006ae0:	bf18      	it	ne
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	eba6 0807 	sub.w	r8, r6, r7
 8006ae8:	608b      	str	r3, [r1, #8]
 8006aea:	f1b8 0f00 	cmp.w	r8, #0
 8006aee:	dd9c      	ble.n	8006a2a <__sflush_r+0x1a>
 8006af0:	6a21      	ldr	r1, [r4, #32]
 8006af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006af4:	4643      	mov	r3, r8
 8006af6:	463a      	mov	r2, r7
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b0      	blx	r6
 8006afc:	2800      	cmp	r0, #0
 8006afe:	dc06      	bgt.n	8006b0e <__sflush_r+0xfe>
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	e78e      	b.n	8006a2c <__sflush_r+0x1c>
 8006b0e:	4407      	add	r7, r0
 8006b10:	eba8 0800 	sub.w	r8, r8, r0
 8006b14:	e7e9      	b.n	8006aea <__sflush_r+0xda>
 8006b16:	bf00      	nop
 8006b18:	20400001 	.word	0x20400001

08006b1c <_fflush_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	4605      	mov	r5, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	b913      	cbnz	r3, 8006b2c <_fflush_r+0x10>
 8006b26:	2500      	movs	r5, #0
 8006b28:	4628      	mov	r0, r5
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	b118      	cbz	r0, 8006b36 <_fflush_r+0x1a>
 8006b2e:	6983      	ldr	r3, [r0, #24]
 8006b30:	b90b      	cbnz	r3, 8006b36 <_fflush_r+0x1a>
 8006b32:	f000 f887 	bl	8006c44 <__sinit>
 8006b36:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <_fflush_r+0x6c>)
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	d11b      	bne.n	8006b74 <_fflush_r+0x58>
 8006b3c:	686c      	ldr	r4, [r5, #4]
 8006b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0ef      	beq.n	8006b26 <_fflush_r+0xa>
 8006b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b48:	07d0      	lsls	r0, r2, #31
 8006b4a:	d404      	bmi.n	8006b56 <_fflush_r+0x3a>
 8006b4c:	0599      	lsls	r1, r3, #22
 8006b4e:	d402      	bmi.n	8006b56 <_fflush_r+0x3a>
 8006b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b52:	f000 f915 	bl	8006d80 <__retarget_lock_acquire_recursive>
 8006b56:	4628      	mov	r0, r5
 8006b58:	4621      	mov	r1, r4
 8006b5a:	f7ff ff59 	bl	8006a10 <__sflush_r>
 8006b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b60:	07da      	lsls	r2, r3, #31
 8006b62:	4605      	mov	r5, r0
 8006b64:	d4e0      	bmi.n	8006b28 <_fflush_r+0xc>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	059b      	lsls	r3, r3, #22
 8006b6a:	d4dd      	bmi.n	8006b28 <_fflush_r+0xc>
 8006b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b6e:	f000 f908 	bl	8006d82 <__retarget_lock_release_recursive>
 8006b72:	e7d9      	b.n	8006b28 <_fflush_r+0xc>
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <_fflush_r+0x70>)
 8006b76:	429c      	cmp	r4, r3
 8006b78:	d101      	bne.n	8006b7e <_fflush_r+0x62>
 8006b7a:	68ac      	ldr	r4, [r5, #8]
 8006b7c:	e7df      	b.n	8006b3e <_fflush_r+0x22>
 8006b7e:	4b04      	ldr	r3, [pc, #16]	; (8006b90 <_fflush_r+0x74>)
 8006b80:	429c      	cmp	r4, r3
 8006b82:	bf08      	it	eq
 8006b84:	68ec      	ldreq	r4, [r5, #12]
 8006b86:	e7da      	b.n	8006b3e <_fflush_r+0x22>
 8006b88:	08007a4c 	.word	0x08007a4c
 8006b8c:	08007a6c 	.word	0x08007a6c
 8006b90:	08007a2c 	.word	0x08007a2c

08006b94 <std>:
 8006b94:	2300      	movs	r3, #0
 8006b96:	b510      	push	{r4, lr}
 8006b98:	4604      	mov	r4, r0
 8006b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ba2:	6083      	str	r3, [r0, #8]
 8006ba4:	8181      	strh	r1, [r0, #12]
 8006ba6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ba8:	81c2      	strh	r2, [r0, #14]
 8006baa:	6183      	str	r3, [r0, #24]
 8006bac:	4619      	mov	r1, r3
 8006bae:	2208      	movs	r2, #8
 8006bb0:	305c      	adds	r0, #92	; 0x5c
 8006bb2:	f7ff fdd7 	bl	8006764 <memset>
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <std+0x38>)
 8006bb8:	6263      	str	r3, [r4, #36]	; 0x24
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <std+0x3c>)
 8006bbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <std+0x40>)
 8006bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bc2:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <std+0x44>)
 8006bc4:	6224      	str	r4, [r4, #32]
 8006bc6:	6323      	str	r3, [r4, #48]	; 0x30
 8006bc8:	bd10      	pop	{r4, pc}
 8006bca:	bf00      	nop
 8006bcc:	0800760d 	.word	0x0800760d
 8006bd0:	0800762f 	.word	0x0800762f
 8006bd4:	08007667 	.word	0x08007667
 8006bd8:	0800768b 	.word	0x0800768b

08006bdc <_cleanup_r>:
 8006bdc:	4901      	ldr	r1, [pc, #4]	; (8006be4 <_cleanup_r+0x8>)
 8006bde:	f000 b8af 	b.w	8006d40 <_fwalk_reent>
 8006be2:	bf00      	nop
 8006be4:	08006b1d 	.word	0x08006b1d

08006be8 <__sfmoreglue>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	2268      	movs	r2, #104	; 0x68
 8006bec:	1e4d      	subs	r5, r1, #1
 8006bee:	4355      	muls	r5, r2
 8006bf0:	460e      	mov	r6, r1
 8006bf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bf6:	f000 f997 	bl	8006f28 <_malloc_r>
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	b140      	cbz	r0, 8006c10 <__sfmoreglue+0x28>
 8006bfe:	2100      	movs	r1, #0
 8006c00:	e9c0 1600 	strd	r1, r6, [r0]
 8006c04:	300c      	adds	r0, #12
 8006c06:	60a0      	str	r0, [r4, #8]
 8006c08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c0c:	f7ff fdaa 	bl	8006764 <memset>
 8006c10:	4620      	mov	r0, r4
 8006c12:	bd70      	pop	{r4, r5, r6, pc}

08006c14 <__sfp_lock_acquire>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__sfp_lock_acquire+0x8>)
 8006c16:	f000 b8b3 	b.w	8006d80 <__retarget_lock_acquire_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	20001256 	.word	0x20001256

08006c20 <__sfp_lock_release>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sfp_lock_release+0x8>)
 8006c22:	f000 b8ae 	b.w	8006d82 <__retarget_lock_release_recursive>
 8006c26:	bf00      	nop
 8006c28:	20001256 	.word	0x20001256

08006c2c <__sinit_lock_acquire>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__sinit_lock_acquire+0x8>)
 8006c2e:	f000 b8a7 	b.w	8006d80 <__retarget_lock_acquire_recursive>
 8006c32:	bf00      	nop
 8006c34:	20001257 	.word	0x20001257

08006c38 <__sinit_lock_release>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__sinit_lock_release+0x8>)
 8006c3a:	f000 b8a2 	b.w	8006d82 <__retarget_lock_release_recursive>
 8006c3e:	bf00      	nop
 8006c40:	20001257 	.word	0x20001257

08006c44 <__sinit>:
 8006c44:	b510      	push	{r4, lr}
 8006c46:	4604      	mov	r4, r0
 8006c48:	f7ff fff0 	bl	8006c2c <__sinit_lock_acquire>
 8006c4c:	69a3      	ldr	r3, [r4, #24]
 8006c4e:	b11b      	cbz	r3, 8006c58 <__sinit+0x14>
 8006c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c54:	f7ff bff0 	b.w	8006c38 <__sinit_lock_release>
 8006c58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c5c:	6523      	str	r3, [r4, #80]	; 0x50
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <__sinit+0x68>)
 8006c60:	4a13      	ldr	r2, [pc, #76]	; (8006cb0 <__sinit+0x6c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c66:	42a3      	cmp	r3, r4
 8006c68:	bf04      	itt	eq
 8006c6a:	2301      	moveq	r3, #1
 8006c6c:	61a3      	streq	r3, [r4, #24]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f820 	bl	8006cb4 <__sfp>
 8006c74:	6060      	str	r0, [r4, #4]
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 f81c 	bl	8006cb4 <__sfp>
 8006c7c:	60a0      	str	r0, [r4, #8]
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 f818 	bl	8006cb4 <__sfp>
 8006c84:	2200      	movs	r2, #0
 8006c86:	60e0      	str	r0, [r4, #12]
 8006c88:	2104      	movs	r1, #4
 8006c8a:	6860      	ldr	r0, [r4, #4]
 8006c8c:	f7ff ff82 	bl	8006b94 <std>
 8006c90:	68a0      	ldr	r0, [r4, #8]
 8006c92:	2201      	movs	r2, #1
 8006c94:	2109      	movs	r1, #9
 8006c96:	f7ff ff7d 	bl	8006b94 <std>
 8006c9a:	68e0      	ldr	r0, [r4, #12]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	2112      	movs	r1, #18
 8006ca0:	f7ff ff78 	bl	8006b94 <std>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	61a3      	str	r3, [r4, #24]
 8006ca8:	e7d2      	b.n	8006c50 <__sinit+0xc>
 8006caa:	bf00      	nop
 8006cac:	08007a28 	.word	0x08007a28
 8006cb0:	08006bdd 	.word	0x08006bdd

08006cb4 <__sfp>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	f7ff ffac 	bl	8006c14 <__sfp_lock_acquire>
 8006cbc:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <__sfp+0x84>)
 8006cbe:	681e      	ldr	r6, [r3, #0]
 8006cc0:	69b3      	ldr	r3, [r6, #24]
 8006cc2:	b913      	cbnz	r3, 8006cca <__sfp+0x16>
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f7ff ffbd 	bl	8006c44 <__sinit>
 8006cca:	3648      	adds	r6, #72	; 0x48
 8006ccc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	d503      	bpl.n	8006cdc <__sfp+0x28>
 8006cd4:	6833      	ldr	r3, [r6, #0]
 8006cd6:	b30b      	cbz	r3, 8006d1c <__sfp+0x68>
 8006cd8:	6836      	ldr	r6, [r6, #0]
 8006cda:	e7f7      	b.n	8006ccc <__sfp+0x18>
 8006cdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ce0:	b9d5      	cbnz	r5, 8006d18 <__sfp+0x64>
 8006ce2:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <__sfp+0x88>)
 8006ce4:	60e3      	str	r3, [r4, #12]
 8006ce6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cea:	6665      	str	r5, [r4, #100]	; 0x64
 8006cec:	f000 f847 	bl	8006d7e <__retarget_lock_init_recursive>
 8006cf0:	f7ff ff96 	bl	8006c20 <__sfp_lock_release>
 8006cf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cfc:	6025      	str	r5, [r4, #0]
 8006cfe:	61a5      	str	r5, [r4, #24]
 8006d00:	2208      	movs	r2, #8
 8006d02:	4629      	mov	r1, r5
 8006d04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d08:	f7ff fd2c 	bl	8006764 <memset>
 8006d0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d14:	4620      	mov	r0, r4
 8006d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d18:	3468      	adds	r4, #104	; 0x68
 8006d1a:	e7d9      	b.n	8006cd0 <__sfp+0x1c>
 8006d1c:	2104      	movs	r1, #4
 8006d1e:	4638      	mov	r0, r7
 8006d20:	f7ff ff62 	bl	8006be8 <__sfmoreglue>
 8006d24:	4604      	mov	r4, r0
 8006d26:	6030      	str	r0, [r6, #0]
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d1d5      	bne.n	8006cd8 <__sfp+0x24>
 8006d2c:	f7ff ff78 	bl	8006c20 <__sfp_lock_release>
 8006d30:	230c      	movs	r3, #12
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	e7ee      	b.n	8006d14 <__sfp+0x60>
 8006d36:	bf00      	nop
 8006d38:	08007a28 	.word	0x08007a28
 8006d3c:	ffff0001 	.word	0xffff0001

08006d40 <_fwalk_reent>:
 8006d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d44:	4606      	mov	r6, r0
 8006d46:	4688      	mov	r8, r1
 8006d48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d4c:	2700      	movs	r7, #0
 8006d4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d52:	f1b9 0901 	subs.w	r9, r9, #1
 8006d56:	d505      	bpl.n	8006d64 <_fwalk_reent+0x24>
 8006d58:	6824      	ldr	r4, [r4, #0]
 8006d5a:	2c00      	cmp	r4, #0
 8006d5c:	d1f7      	bne.n	8006d4e <_fwalk_reent+0xe>
 8006d5e:	4638      	mov	r0, r7
 8006d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d64:	89ab      	ldrh	r3, [r5, #12]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d907      	bls.n	8006d7a <_fwalk_reent+0x3a>
 8006d6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	d003      	beq.n	8006d7a <_fwalk_reent+0x3a>
 8006d72:	4629      	mov	r1, r5
 8006d74:	4630      	mov	r0, r6
 8006d76:	47c0      	blx	r8
 8006d78:	4307      	orrs	r7, r0
 8006d7a:	3568      	adds	r5, #104	; 0x68
 8006d7c:	e7e9      	b.n	8006d52 <_fwalk_reent+0x12>

08006d7e <__retarget_lock_init_recursive>:
 8006d7e:	4770      	bx	lr

08006d80 <__retarget_lock_acquire_recursive>:
 8006d80:	4770      	bx	lr

08006d82 <__retarget_lock_release_recursive>:
 8006d82:	4770      	bx	lr

08006d84 <__swhatbuf_r>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	460e      	mov	r6, r1
 8006d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	b096      	sub	sp, #88	; 0x58
 8006d90:	4614      	mov	r4, r2
 8006d92:	461d      	mov	r5, r3
 8006d94:	da08      	bge.n	8006da8 <__swhatbuf_r+0x24>
 8006d96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	061a      	lsls	r2, r3, #24
 8006da0:	d410      	bmi.n	8006dc4 <__swhatbuf_r+0x40>
 8006da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da6:	e00e      	b.n	8006dc6 <__swhatbuf_r+0x42>
 8006da8:	466a      	mov	r2, sp
 8006daa:	f000 fc95 	bl	80076d8 <_fstat_r>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	dbf1      	blt.n	8006d96 <__swhatbuf_r+0x12>
 8006db2:	9a01      	ldr	r2, [sp, #4]
 8006db4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006db8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006dbc:	425a      	negs	r2, r3
 8006dbe:	415a      	adcs	r2, r3
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	e7ee      	b.n	8006da2 <__swhatbuf_r+0x1e>
 8006dc4:	2340      	movs	r3, #64	; 0x40
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	b016      	add	sp, #88	; 0x58
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006dd0 <__smakebuf_r>:
 8006dd0:	898b      	ldrh	r3, [r1, #12]
 8006dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dd4:	079d      	lsls	r5, r3, #30
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460c      	mov	r4, r1
 8006dda:	d507      	bpl.n	8006dec <__smakebuf_r+0x1c>
 8006ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	6123      	str	r3, [r4, #16]
 8006de4:	2301      	movs	r3, #1
 8006de6:	6163      	str	r3, [r4, #20]
 8006de8:	b002      	add	sp, #8
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	ab01      	add	r3, sp, #4
 8006dee:	466a      	mov	r2, sp
 8006df0:	f7ff ffc8 	bl	8006d84 <__swhatbuf_r>
 8006df4:	9900      	ldr	r1, [sp, #0]
 8006df6:	4605      	mov	r5, r0
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f000 f895 	bl	8006f28 <_malloc_r>
 8006dfe:	b948      	cbnz	r0, 8006e14 <__smakebuf_r+0x44>
 8006e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e04:	059a      	lsls	r2, r3, #22
 8006e06:	d4ef      	bmi.n	8006de8 <__smakebuf_r+0x18>
 8006e08:	f023 0303 	bic.w	r3, r3, #3
 8006e0c:	f043 0302 	orr.w	r3, r3, #2
 8006e10:	81a3      	strh	r3, [r4, #12]
 8006e12:	e7e3      	b.n	8006ddc <__smakebuf_r+0xc>
 8006e14:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <__smakebuf_r+0x7c>)
 8006e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	6020      	str	r0, [r4, #0]
 8006e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	9b00      	ldr	r3, [sp, #0]
 8006e24:	6163      	str	r3, [r4, #20]
 8006e26:	9b01      	ldr	r3, [sp, #4]
 8006e28:	6120      	str	r0, [r4, #16]
 8006e2a:	b15b      	cbz	r3, 8006e44 <__smakebuf_r+0x74>
 8006e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e30:	4630      	mov	r0, r6
 8006e32:	f000 fc63 	bl	80076fc <_isatty_r>
 8006e36:	b128      	cbz	r0, 8006e44 <__smakebuf_r+0x74>
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	f043 0301 	orr.w	r3, r3, #1
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	89a0      	ldrh	r0, [r4, #12]
 8006e46:	4305      	orrs	r5, r0
 8006e48:	81a5      	strh	r5, [r4, #12]
 8006e4a:	e7cd      	b.n	8006de8 <__smakebuf_r+0x18>
 8006e4c:	08006bdd 	.word	0x08006bdd

08006e50 <_free_r>:
 8006e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e52:	2900      	cmp	r1, #0
 8006e54:	d044      	beq.n	8006ee0 <_free_r+0x90>
 8006e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5a:	9001      	str	r0, [sp, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e62:	bfb8      	it	lt
 8006e64:	18e4      	addlt	r4, r4, r3
 8006e66:	f000 fc6b 	bl	8007740 <__malloc_lock>
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <_free_r+0x94>)
 8006e6c:	9801      	ldr	r0, [sp, #4]
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	b933      	cbnz	r3, 8006e80 <_free_r+0x30>
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	6014      	str	r4, [r2, #0]
 8006e76:	b003      	add	sp, #12
 8006e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e7c:	f000 bc66 	b.w	800774c <__malloc_unlock>
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d908      	bls.n	8006e96 <_free_r+0x46>
 8006e84:	6825      	ldr	r5, [r4, #0]
 8006e86:	1961      	adds	r1, r4, r5
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	bf01      	itttt	eq
 8006e8c:	6819      	ldreq	r1, [r3, #0]
 8006e8e:	685b      	ldreq	r3, [r3, #4]
 8006e90:	1949      	addeq	r1, r1, r5
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	e7ed      	b.n	8006e72 <_free_r+0x22>
 8006e96:	461a      	mov	r2, r3
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	b10b      	cbz	r3, 8006ea0 <_free_r+0x50>
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d9fa      	bls.n	8006e96 <_free_r+0x46>
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	1855      	adds	r5, r2, r1
 8006ea4:	42a5      	cmp	r5, r4
 8006ea6:	d10b      	bne.n	8006ec0 <_free_r+0x70>
 8006ea8:	6824      	ldr	r4, [r4, #0]
 8006eaa:	4421      	add	r1, r4
 8006eac:	1854      	adds	r4, r2, r1
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	6011      	str	r1, [r2, #0]
 8006eb2:	d1e0      	bne.n	8006e76 <_free_r+0x26>
 8006eb4:	681c      	ldr	r4, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	6053      	str	r3, [r2, #4]
 8006eba:	4421      	add	r1, r4
 8006ebc:	6011      	str	r1, [r2, #0]
 8006ebe:	e7da      	b.n	8006e76 <_free_r+0x26>
 8006ec0:	d902      	bls.n	8006ec8 <_free_r+0x78>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	6003      	str	r3, [r0, #0]
 8006ec6:	e7d6      	b.n	8006e76 <_free_r+0x26>
 8006ec8:	6825      	ldr	r5, [r4, #0]
 8006eca:	1961      	adds	r1, r4, r5
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	bf04      	itt	eq
 8006ed0:	6819      	ldreq	r1, [r3, #0]
 8006ed2:	685b      	ldreq	r3, [r3, #4]
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	bf04      	itt	eq
 8006ed8:	1949      	addeq	r1, r1, r5
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	6054      	str	r4, [r2, #4]
 8006ede:	e7ca      	b.n	8006e76 <_free_r+0x26>
 8006ee0:	b003      	add	sp, #12
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	20001258 	.word	0x20001258

08006ee8 <sbrk_aligned>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0e      	ldr	r6, [pc, #56]	; (8006f24 <sbrk_aligned+0x3c>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	6831      	ldr	r1, [r6, #0]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b911      	cbnz	r1, 8006efa <sbrk_aligned+0x12>
 8006ef4:	f000 fb7a 	bl	80075ec <_sbrk_r>
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 fb75 	bl	80075ec <_sbrk_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d00a      	beq.n	8006f1c <sbrk_aligned+0x34>
 8006f06:	1cc4      	adds	r4, r0, #3
 8006f08:	f024 0403 	bic.w	r4, r4, #3
 8006f0c:	42a0      	cmp	r0, r4
 8006f0e:	d007      	beq.n	8006f20 <sbrk_aligned+0x38>
 8006f10:	1a21      	subs	r1, r4, r0
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 fb6a 	bl	80075ec <_sbrk_r>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d101      	bne.n	8006f20 <sbrk_aligned+0x38>
 8006f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	2000125c 	.word	0x2000125c

08006f28 <_malloc_r>:
 8006f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2c:	1ccd      	adds	r5, r1, #3
 8006f2e:	f025 0503 	bic.w	r5, r5, #3
 8006f32:	3508      	adds	r5, #8
 8006f34:	2d0c      	cmp	r5, #12
 8006f36:	bf38      	it	cc
 8006f38:	250c      	movcc	r5, #12
 8006f3a:	2d00      	cmp	r5, #0
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	db01      	blt.n	8006f44 <_malloc_r+0x1c>
 8006f40:	42a9      	cmp	r1, r5
 8006f42:	d905      	bls.n	8006f50 <_malloc_r+0x28>
 8006f44:	230c      	movs	r3, #12
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	2600      	movs	r6, #0
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f50:	4e2e      	ldr	r6, [pc, #184]	; (800700c <_malloc_r+0xe4>)
 8006f52:	f000 fbf5 	bl	8007740 <__malloc_lock>
 8006f56:	6833      	ldr	r3, [r6, #0]
 8006f58:	461c      	mov	r4, r3
 8006f5a:	bb34      	cbnz	r4, 8006faa <_malloc_r+0x82>
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7ff ffc2 	bl	8006ee8 <sbrk_aligned>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	4604      	mov	r4, r0
 8006f68:	d14d      	bne.n	8007006 <_malloc_r+0xde>
 8006f6a:	6834      	ldr	r4, [r6, #0]
 8006f6c:	4626      	mov	r6, r4
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	d140      	bne.n	8006ff4 <_malloc_r+0xcc>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	4631      	mov	r1, r6
 8006f76:	4638      	mov	r0, r7
 8006f78:	eb04 0803 	add.w	r8, r4, r3
 8006f7c:	f000 fb36 	bl	80075ec <_sbrk_r>
 8006f80:	4580      	cmp	r8, r0
 8006f82:	d13a      	bne.n	8006ffa <_malloc_r+0xd2>
 8006f84:	6821      	ldr	r1, [r4, #0]
 8006f86:	3503      	adds	r5, #3
 8006f88:	1a6d      	subs	r5, r5, r1
 8006f8a:	f025 0503 	bic.w	r5, r5, #3
 8006f8e:	3508      	adds	r5, #8
 8006f90:	2d0c      	cmp	r5, #12
 8006f92:	bf38      	it	cc
 8006f94:	250c      	movcc	r5, #12
 8006f96:	4629      	mov	r1, r5
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff ffa5 	bl	8006ee8 <sbrk_aligned>
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d02b      	beq.n	8006ffa <_malloc_r+0xd2>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	442b      	add	r3, r5
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	e00e      	b.n	8006fc8 <_malloc_r+0xa0>
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	1b52      	subs	r2, r2, r5
 8006fae:	d41e      	bmi.n	8006fee <_malloc_r+0xc6>
 8006fb0:	2a0b      	cmp	r2, #11
 8006fb2:	d916      	bls.n	8006fe2 <_malloc_r+0xba>
 8006fb4:	1961      	adds	r1, r4, r5
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	6025      	str	r5, [r4, #0]
 8006fba:	bf18      	it	ne
 8006fbc:	6059      	strne	r1, [r3, #4]
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	bf08      	it	eq
 8006fc2:	6031      	streq	r1, [r6, #0]
 8006fc4:	5162      	str	r2, [r4, r5]
 8006fc6:	604b      	str	r3, [r1, #4]
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f104 060b 	add.w	r6, r4, #11
 8006fce:	f000 fbbd 	bl	800774c <__malloc_unlock>
 8006fd2:	f026 0607 	bic.w	r6, r6, #7
 8006fd6:	1d23      	adds	r3, r4, #4
 8006fd8:	1af2      	subs	r2, r6, r3
 8006fda:	d0b6      	beq.n	8006f4a <_malloc_r+0x22>
 8006fdc:	1b9b      	subs	r3, r3, r6
 8006fde:	50a3      	str	r3, [r4, r2]
 8006fe0:	e7b3      	b.n	8006f4a <_malloc_r+0x22>
 8006fe2:	6862      	ldr	r2, [r4, #4]
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	bf0c      	ite	eq
 8006fe8:	6032      	streq	r2, [r6, #0]
 8006fea:	605a      	strne	r2, [r3, #4]
 8006fec:	e7ec      	b.n	8006fc8 <_malloc_r+0xa0>
 8006fee:	4623      	mov	r3, r4
 8006ff0:	6864      	ldr	r4, [r4, #4]
 8006ff2:	e7b2      	b.n	8006f5a <_malloc_r+0x32>
 8006ff4:	4634      	mov	r4, r6
 8006ff6:	6876      	ldr	r6, [r6, #4]
 8006ff8:	e7b9      	b.n	8006f6e <_malloc_r+0x46>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	4638      	mov	r0, r7
 8007000:	f000 fba4 	bl	800774c <__malloc_unlock>
 8007004:	e7a1      	b.n	8006f4a <_malloc_r+0x22>
 8007006:	6025      	str	r5, [r4, #0]
 8007008:	e7de      	b.n	8006fc8 <_malloc_r+0xa0>
 800700a:	bf00      	nop
 800700c:	20001258 	.word	0x20001258

08007010 <__sfputc_r>:
 8007010:	6893      	ldr	r3, [r2, #8]
 8007012:	3b01      	subs	r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	b410      	push	{r4}
 8007018:	6093      	str	r3, [r2, #8]
 800701a:	da08      	bge.n	800702e <__sfputc_r+0x1e>
 800701c:	6994      	ldr	r4, [r2, #24]
 800701e:	42a3      	cmp	r3, r4
 8007020:	db01      	blt.n	8007026 <__sfputc_r+0x16>
 8007022:	290a      	cmp	r1, #10
 8007024:	d103      	bne.n	800702e <__sfputc_r+0x1e>
 8007026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800702a:	f7ff bc31 	b.w	8006890 <__swbuf_r>
 800702e:	6813      	ldr	r3, [r2, #0]
 8007030:	1c58      	adds	r0, r3, #1
 8007032:	6010      	str	r0, [r2, #0]
 8007034:	7019      	strb	r1, [r3, #0]
 8007036:	4608      	mov	r0, r1
 8007038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800703c:	4770      	bx	lr

0800703e <__sfputs_r>:
 800703e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007040:	4606      	mov	r6, r0
 8007042:	460f      	mov	r7, r1
 8007044:	4614      	mov	r4, r2
 8007046:	18d5      	adds	r5, r2, r3
 8007048:	42ac      	cmp	r4, r5
 800704a:	d101      	bne.n	8007050 <__sfputs_r+0x12>
 800704c:	2000      	movs	r0, #0
 800704e:	e007      	b.n	8007060 <__sfputs_r+0x22>
 8007050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007054:	463a      	mov	r2, r7
 8007056:	4630      	mov	r0, r6
 8007058:	f7ff ffda 	bl	8007010 <__sfputc_r>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d1f3      	bne.n	8007048 <__sfputs_r+0xa>
 8007060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007064 <_vfiprintf_r>:
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	460d      	mov	r5, r1
 800706a:	b09d      	sub	sp, #116	; 0x74
 800706c:	4614      	mov	r4, r2
 800706e:	4698      	mov	r8, r3
 8007070:	4606      	mov	r6, r0
 8007072:	b118      	cbz	r0, 800707c <_vfiprintf_r+0x18>
 8007074:	6983      	ldr	r3, [r0, #24]
 8007076:	b90b      	cbnz	r3, 800707c <_vfiprintf_r+0x18>
 8007078:	f7ff fde4 	bl	8006c44 <__sinit>
 800707c:	4b89      	ldr	r3, [pc, #548]	; (80072a4 <_vfiprintf_r+0x240>)
 800707e:	429d      	cmp	r5, r3
 8007080:	d11b      	bne.n	80070ba <_vfiprintf_r+0x56>
 8007082:	6875      	ldr	r5, [r6, #4]
 8007084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007086:	07d9      	lsls	r1, r3, #31
 8007088:	d405      	bmi.n	8007096 <_vfiprintf_r+0x32>
 800708a:	89ab      	ldrh	r3, [r5, #12]
 800708c:	059a      	lsls	r2, r3, #22
 800708e:	d402      	bmi.n	8007096 <_vfiprintf_r+0x32>
 8007090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007092:	f7ff fe75 	bl	8006d80 <__retarget_lock_acquire_recursive>
 8007096:	89ab      	ldrh	r3, [r5, #12]
 8007098:	071b      	lsls	r3, r3, #28
 800709a:	d501      	bpl.n	80070a0 <_vfiprintf_r+0x3c>
 800709c:	692b      	ldr	r3, [r5, #16]
 800709e:	b9eb      	cbnz	r3, 80070dc <_vfiprintf_r+0x78>
 80070a0:	4629      	mov	r1, r5
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff fc46 	bl	8006934 <__swsetup_r>
 80070a8:	b1c0      	cbz	r0, 80070dc <_vfiprintf_r+0x78>
 80070aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ac:	07dc      	lsls	r4, r3, #31
 80070ae:	d50e      	bpl.n	80070ce <_vfiprintf_r+0x6a>
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	b01d      	add	sp, #116	; 0x74
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	4b7b      	ldr	r3, [pc, #492]	; (80072a8 <_vfiprintf_r+0x244>)
 80070bc:	429d      	cmp	r5, r3
 80070be:	d101      	bne.n	80070c4 <_vfiprintf_r+0x60>
 80070c0:	68b5      	ldr	r5, [r6, #8]
 80070c2:	e7df      	b.n	8007084 <_vfiprintf_r+0x20>
 80070c4:	4b79      	ldr	r3, [pc, #484]	; (80072ac <_vfiprintf_r+0x248>)
 80070c6:	429d      	cmp	r5, r3
 80070c8:	bf08      	it	eq
 80070ca:	68f5      	ldreq	r5, [r6, #12]
 80070cc:	e7da      	b.n	8007084 <_vfiprintf_r+0x20>
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	0598      	lsls	r0, r3, #22
 80070d2:	d4ed      	bmi.n	80070b0 <_vfiprintf_r+0x4c>
 80070d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070d6:	f7ff fe54 	bl	8006d82 <__retarget_lock_release_recursive>
 80070da:	e7e9      	b.n	80070b0 <_vfiprintf_r+0x4c>
 80070dc:	2300      	movs	r3, #0
 80070de:	9309      	str	r3, [sp, #36]	; 0x24
 80070e0:	2320      	movs	r3, #32
 80070e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ea:	2330      	movs	r3, #48	; 0x30
 80070ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072b0 <_vfiprintf_r+0x24c>
 80070f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070f4:	f04f 0901 	mov.w	r9, #1
 80070f8:	4623      	mov	r3, r4
 80070fa:	469a      	mov	sl, r3
 80070fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007100:	b10a      	cbz	r2, 8007106 <_vfiprintf_r+0xa2>
 8007102:	2a25      	cmp	r2, #37	; 0x25
 8007104:	d1f9      	bne.n	80070fa <_vfiprintf_r+0x96>
 8007106:	ebba 0b04 	subs.w	fp, sl, r4
 800710a:	d00b      	beq.n	8007124 <_vfiprintf_r+0xc0>
 800710c:	465b      	mov	r3, fp
 800710e:	4622      	mov	r2, r4
 8007110:	4629      	mov	r1, r5
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff ff93 	bl	800703e <__sfputs_r>
 8007118:	3001      	adds	r0, #1
 800711a:	f000 80aa 	beq.w	8007272 <_vfiprintf_r+0x20e>
 800711e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007120:	445a      	add	r2, fp
 8007122:	9209      	str	r2, [sp, #36]	; 0x24
 8007124:	f89a 3000 	ldrb.w	r3, [sl]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80a2 	beq.w	8007272 <_vfiprintf_r+0x20e>
 800712e:	2300      	movs	r3, #0
 8007130:	f04f 32ff 	mov.w	r2, #4294967295
 8007134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007138:	f10a 0a01 	add.w	sl, sl, #1
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	9307      	str	r3, [sp, #28]
 8007140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007144:	931a      	str	r3, [sp, #104]	; 0x68
 8007146:	4654      	mov	r4, sl
 8007148:	2205      	movs	r2, #5
 800714a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714e:	4858      	ldr	r0, [pc, #352]	; (80072b0 <_vfiprintf_r+0x24c>)
 8007150:	f7f9 f84e 	bl	80001f0 <memchr>
 8007154:	9a04      	ldr	r2, [sp, #16]
 8007156:	b9d8      	cbnz	r0, 8007190 <_vfiprintf_r+0x12c>
 8007158:	06d1      	lsls	r1, r2, #27
 800715a:	bf44      	itt	mi
 800715c:	2320      	movmi	r3, #32
 800715e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007162:	0713      	lsls	r3, r2, #28
 8007164:	bf44      	itt	mi
 8007166:	232b      	movmi	r3, #43	; 0x2b
 8007168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800716c:	f89a 3000 	ldrb.w	r3, [sl]
 8007170:	2b2a      	cmp	r3, #42	; 0x2a
 8007172:	d015      	beq.n	80071a0 <_vfiprintf_r+0x13c>
 8007174:	9a07      	ldr	r2, [sp, #28]
 8007176:	4654      	mov	r4, sl
 8007178:	2000      	movs	r0, #0
 800717a:	f04f 0c0a 	mov.w	ip, #10
 800717e:	4621      	mov	r1, r4
 8007180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007184:	3b30      	subs	r3, #48	; 0x30
 8007186:	2b09      	cmp	r3, #9
 8007188:	d94e      	bls.n	8007228 <_vfiprintf_r+0x1c4>
 800718a:	b1b0      	cbz	r0, 80071ba <_vfiprintf_r+0x156>
 800718c:	9207      	str	r2, [sp, #28]
 800718e:	e014      	b.n	80071ba <_vfiprintf_r+0x156>
 8007190:	eba0 0308 	sub.w	r3, r0, r8
 8007194:	fa09 f303 	lsl.w	r3, r9, r3
 8007198:	4313      	orrs	r3, r2
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	46a2      	mov	sl, r4
 800719e:	e7d2      	b.n	8007146 <_vfiprintf_r+0xe2>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	1d19      	adds	r1, r3, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	bfbb      	ittet	lt
 80071ac:	425b      	neglt	r3, r3
 80071ae:	f042 0202 	orrlt.w	r2, r2, #2
 80071b2:	9307      	strge	r3, [sp, #28]
 80071b4:	9307      	strlt	r3, [sp, #28]
 80071b6:	bfb8      	it	lt
 80071b8:	9204      	strlt	r2, [sp, #16]
 80071ba:	7823      	ldrb	r3, [r4, #0]
 80071bc:	2b2e      	cmp	r3, #46	; 0x2e
 80071be:	d10c      	bne.n	80071da <_vfiprintf_r+0x176>
 80071c0:	7863      	ldrb	r3, [r4, #1]
 80071c2:	2b2a      	cmp	r3, #42	; 0x2a
 80071c4:	d135      	bne.n	8007232 <_vfiprintf_r+0x1ce>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	1d1a      	adds	r2, r3, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	9203      	str	r2, [sp, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfb8      	it	lt
 80071d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80071d6:	3402      	adds	r4, #2
 80071d8:	9305      	str	r3, [sp, #20]
 80071da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072c0 <_vfiprintf_r+0x25c>
 80071de:	7821      	ldrb	r1, [r4, #0]
 80071e0:	2203      	movs	r2, #3
 80071e2:	4650      	mov	r0, sl
 80071e4:	f7f9 f804 	bl	80001f0 <memchr>
 80071e8:	b140      	cbz	r0, 80071fc <_vfiprintf_r+0x198>
 80071ea:	2340      	movs	r3, #64	; 0x40
 80071ec:	eba0 000a 	sub.w	r0, r0, sl
 80071f0:	fa03 f000 	lsl.w	r0, r3, r0
 80071f4:	9b04      	ldr	r3, [sp, #16]
 80071f6:	4303      	orrs	r3, r0
 80071f8:	3401      	adds	r4, #1
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007200:	482c      	ldr	r0, [pc, #176]	; (80072b4 <_vfiprintf_r+0x250>)
 8007202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007206:	2206      	movs	r2, #6
 8007208:	f7f8 fff2 	bl	80001f0 <memchr>
 800720c:	2800      	cmp	r0, #0
 800720e:	d03f      	beq.n	8007290 <_vfiprintf_r+0x22c>
 8007210:	4b29      	ldr	r3, [pc, #164]	; (80072b8 <_vfiprintf_r+0x254>)
 8007212:	bb1b      	cbnz	r3, 800725c <_vfiprintf_r+0x1f8>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	3307      	adds	r3, #7
 8007218:	f023 0307 	bic.w	r3, r3, #7
 800721c:	3308      	adds	r3, #8
 800721e:	9303      	str	r3, [sp, #12]
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	443b      	add	r3, r7
 8007224:	9309      	str	r3, [sp, #36]	; 0x24
 8007226:	e767      	b.n	80070f8 <_vfiprintf_r+0x94>
 8007228:	fb0c 3202 	mla	r2, ip, r2, r3
 800722c:	460c      	mov	r4, r1
 800722e:	2001      	movs	r0, #1
 8007230:	e7a5      	b.n	800717e <_vfiprintf_r+0x11a>
 8007232:	2300      	movs	r3, #0
 8007234:	3401      	adds	r4, #1
 8007236:	9305      	str	r3, [sp, #20]
 8007238:	4619      	mov	r1, r3
 800723a:	f04f 0c0a 	mov.w	ip, #10
 800723e:	4620      	mov	r0, r4
 8007240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007244:	3a30      	subs	r2, #48	; 0x30
 8007246:	2a09      	cmp	r2, #9
 8007248:	d903      	bls.n	8007252 <_vfiprintf_r+0x1ee>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0c5      	beq.n	80071da <_vfiprintf_r+0x176>
 800724e:	9105      	str	r1, [sp, #20]
 8007250:	e7c3      	b.n	80071da <_vfiprintf_r+0x176>
 8007252:	fb0c 2101 	mla	r1, ip, r1, r2
 8007256:	4604      	mov	r4, r0
 8007258:	2301      	movs	r3, #1
 800725a:	e7f0      	b.n	800723e <_vfiprintf_r+0x1da>
 800725c:	ab03      	add	r3, sp, #12
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	462a      	mov	r2, r5
 8007262:	4b16      	ldr	r3, [pc, #88]	; (80072bc <_vfiprintf_r+0x258>)
 8007264:	a904      	add	r1, sp, #16
 8007266:	4630      	mov	r0, r6
 8007268:	f3af 8000 	nop.w
 800726c:	4607      	mov	r7, r0
 800726e:	1c78      	adds	r0, r7, #1
 8007270:	d1d6      	bne.n	8007220 <_vfiprintf_r+0x1bc>
 8007272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007274:	07d9      	lsls	r1, r3, #31
 8007276:	d405      	bmi.n	8007284 <_vfiprintf_r+0x220>
 8007278:	89ab      	ldrh	r3, [r5, #12]
 800727a:	059a      	lsls	r2, r3, #22
 800727c:	d402      	bmi.n	8007284 <_vfiprintf_r+0x220>
 800727e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007280:	f7ff fd7f 	bl	8006d82 <__retarget_lock_release_recursive>
 8007284:	89ab      	ldrh	r3, [r5, #12]
 8007286:	065b      	lsls	r3, r3, #25
 8007288:	f53f af12 	bmi.w	80070b0 <_vfiprintf_r+0x4c>
 800728c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800728e:	e711      	b.n	80070b4 <_vfiprintf_r+0x50>
 8007290:	ab03      	add	r3, sp, #12
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	462a      	mov	r2, r5
 8007296:	4b09      	ldr	r3, [pc, #36]	; (80072bc <_vfiprintf_r+0x258>)
 8007298:	a904      	add	r1, sp, #16
 800729a:	4630      	mov	r0, r6
 800729c:	f000 f880 	bl	80073a0 <_printf_i>
 80072a0:	e7e4      	b.n	800726c <_vfiprintf_r+0x208>
 80072a2:	bf00      	nop
 80072a4:	08007a4c 	.word	0x08007a4c
 80072a8:	08007a6c 	.word	0x08007a6c
 80072ac:	08007a2c 	.word	0x08007a2c
 80072b0:	08007a8c 	.word	0x08007a8c
 80072b4:	08007a96 	.word	0x08007a96
 80072b8:	00000000 	.word	0x00000000
 80072bc:	0800703f 	.word	0x0800703f
 80072c0:	08007a92 	.word	0x08007a92

080072c4 <_printf_common>:
 80072c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	4616      	mov	r6, r2
 80072ca:	4699      	mov	r9, r3
 80072cc:	688a      	ldr	r2, [r1, #8]
 80072ce:	690b      	ldr	r3, [r1, #16]
 80072d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072d4:	4293      	cmp	r3, r2
 80072d6:	bfb8      	it	lt
 80072d8:	4613      	movlt	r3, r2
 80072da:	6033      	str	r3, [r6, #0]
 80072dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072e0:	4607      	mov	r7, r0
 80072e2:	460c      	mov	r4, r1
 80072e4:	b10a      	cbz	r2, 80072ea <_printf_common+0x26>
 80072e6:	3301      	adds	r3, #1
 80072e8:	6033      	str	r3, [r6, #0]
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	0699      	lsls	r1, r3, #26
 80072ee:	bf42      	ittt	mi
 80072f0:	6833      	ldrmi	r3, [r6, #0]
 80072f2:	3302      	addmi	r3, #2
 80072f4:	6033      	strmi	r3, [r6, #0]
 80072f6:	6825      	ldr	r5, [r4, #0]
 80072f8:	f015 0506 	ands.w	r5, r5, #6
 80072fc:	d106      	bne.n	800730c <_printf_common+0x48>
 80072fe:	f104 0a19 	add.w	sl, r4, #25
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	6832      	ldr	r2, [r6, #0]
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	42ab      	cmp	r3, r5
 800730a:	dc26      	bgt.n	800735a <_printf_common+0x96>
 800730c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007310:	1e13      	subs	r3, r2, #0
 8007312:	6822      	ldr	r2, [r4, #0]
 8007314:	bf18      	it	ne
 8007316:	2301      	movne	r3, #1
 8007318:	0692      	lsls	r2, r2, #26
 800731a:	d42b      	bmi.n	8007374 <_printf_common+0xb0>
 800731c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007320:	4649      	mov	r1, r9
 8007322:	4638      	mov	r0, r7
 8007324:	47c0      	blx	r8
 8007326:	3001      	adds	r0, #1
 8007328:	d01e      	beq.n	8007368 <_printf_common+0xa4>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	68e5      	ldr	r5, [r4, #12]
 800732e:	6832      	ldr	r2, [r6, #0]
 8007330:	f003 0306 	and.w	r3, r3, #6
 8007334:	2b04      	cmp	r3, #4
 8007336:	bf08      	it	eq
 8007338:	1aad      	subeq	r5, r5, r2
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	6922      	ldr	r2, [r4, #16]
 800733e:	bf0c      	ite	eq
 8007340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007344:	2500      	movne	r5, #0
 8007346:	4293      	cmp	r3, r2
 8007348:	bfc4      	itt	gt
 800734a:	1a9b      	subgt	r3, r3, r2
 800734c:	18ed      	addgt	r5, r5, r3
 800734e:	2600      	movs	r6, #0
 8007350:	341a      	adds	r4, #26
 8007352:	42b5      	cmp	r5, r6
 8007354:	d11a      	bne.n	800738c <_printf_common+0xc8>
 8007356:	2000      	movs	r0, #0
 8007358:	e008      	b.n	800736c <_printf_common+0xa8>
 800735a:	2301      	movs	r3, #1
 800735c:	4652      	mov	r2, sl
 800735e:	4649      	mov	r1, r9
 8007360:	4638      	mov	r0, r7
 8007362:	47c0      	blx	r8
 8007364:	3001      	adds	r0, #1
 8007366:	d103      	bne.n	8007370 <_printf_common+0xac>
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007370:	3501      	adds	r5, #1
 8007372:	e7c6      	b.n	8007302 <_printf_common+0x3e>
 8007374:	18e1      	adds	r1, r4, r3
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	2030      	movs	r0, #48	; 0x30
 800737a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800737e:	4422      	add	r2, r4
 8007380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007388:	3302      	adds	r3, #2
 800738a:	e7c7      	b.n	800731c <_printf_common+0x58>
 800738c:	2301      	movs	r3, #1
 800738e:	4622      	mov	r2, r4
 8007390:	4649      	mov	r1, r9
 8007392:	4638      	mov	r0, r7
 8007394:	47c0      	blx	r8
 8007396:	3001      	adds	r0, #1
 8007398:	d0e6      	beq.n	8007368 <_printf_common+0xa4>
 800739a:	3601      	adds	r6, #1
 800739c:	e7d9      	b.n	8007352 <_printf_common+0x8e>
	...

080073a0 <_printf_i>:
 80073a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	7e0f      	ldrb	r7, [r1, #24]
 80073a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073a8:	2f78      	cmp	r7, #120	; 0x78
 80073aa:	4691      	mov	r9, r2
 80073ac:	4680      	mov	r8, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	469a      	mov	sl, r3
 80073b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073b6:	d807      	bhi.n	80073c8 <_printf_i+0x28>
 80073b8:	2f62      	cmp	r7, #98	; 0x62
 80073ba:	d80a      	bhi.n	80073d2 <_printf_i+0x32>
 80073bc:	2f00      	cmp	r7, #0
 80073be:	f000 80d8 	beq.w	8007572 <_printf_i+0x1d2>
 80073c2:	2f58      	cmp	r7, #88	; 0x58
 80073c4:	f000 80a3 	beq.w	800750e <_printf_i+0x16e>
 80073c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073d0:	e03a      	b.n	8007448 <_printf_i+0xa8>
 80073d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073d6:	2b15      	cmp	r3, #21
 80073d8:	d8f6      	bhi.n	80073c8 <_printf_i+0x28>
 80073da:	a101      	add	r1, pc, #4	; (adr r1, 80073e0 <_printf_i+0x40>)
 80073dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073e0:	08007439 	.word	0x08007439
 80073e4:	0800744d 	.word	0x0800744d
 80073e8:	080073c9 	.word	0x080073c9
 80073ec:	080073c9 	.word	0x080073c9
 80073f0:	080073c9 	.word	0x080073c9
 80073f4:	080073c9 	.word	0x080073c9
 80073f8:	0800744d 	.word	0x0800744d
 80073fc:	080073c9 	.word	0x080073c9
 8007400:	080073c9 	.word	0x080073c9
 8007404:	080073c9 	.word	0x080073c9
 8007408:	080073c9 	.word	0x080073c9
 800740c:	08007559 	.word	0x08007559
 8007410:	0800747d 	.word	0x0800747d
 8007414:	0800753b 	.word	0x0800753b
 8007418:	080073c9 	.word	0x080073c9
 800741c:	080073c9 	.word	0x080073c9
 8007420:	0800757b 	.word	0x0800757b
 8007424:	080073c9 	.word	0x080073c9
 8007428:	0800747d 	.word	0x0800747d
 800742c:	080073c9 	.word	0x080073c9
 8007430:	080073c9 	.word	0x080073c9
 8007434:	08007543 	.word	0x08007543
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	1d1a      	adds	r2, r3, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	602a      	str	r2, [r5, #0]
 8007440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007448:	2301      	movs	r3, #1
 800744a:	e0a3      	b.n	8007594 <_printf_i+0x1f4>
 800744c:	6820      	ldr	r0, [r4, #0]
 800744e:	6829      	ldr	r1, [r5, #0]
 8007450:	0606      	lsls	r6, r0, #24
 8007452:	f101 0304 	add.w	r3, r1, #4
 8007456:	d50a      	bpl.n	800746e <_printf_i+0xce>
 8007458:	680e      	ldr	r6, [r1, #0]
 800745a:	602b      	str	r3, [r5, #0]
 800745c:	2e00      	cmp	r6, #0
 800745e:	da03      	bge.n	8007468 <_printf_i+0xc8>
 8007460:	232d      	movs	r3, #45	; 0x2d
 8007462:	4276      	negs	r6, r6
 8007464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007468:	485e      	ldr	r0, [pc, #376]	; (80075e4 <_printf_i+0x244>)
 800746a:	230a      	movs	r3, #10
 800746c:	e019      	b.n	80074a2 <_printf_i+0x102>
 800746e:	680e      	ldr	r6, [r1, #0]
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007476:	bf18      	it	ne
 8007478:	b236      	sxthne	r6, r6
 800747a:	e7ef      	b.n	800745c <_printf_i+0xbc>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	6820      	ldr	r0, [r4, #0]
 8007480:	1d19      	adds	r1, r3, #4
 8007482:	6029      	str	r1, [r5, #0]
 8007484:	0601      	lsls	r1, r0, #24
 8007486:	d501      	bpl.n	800748c <_printf_i+0xec>
 8007488:	681e      	ldr	r6, [r3, #0]
 800748a:	e002      	b.n	8007492 <_printf_i+0xf2>
 800748c:	0646      	lsls	r6, r0, #25
 800748e:	d5fb      	bpl.n	8007488 <_printf_i+0xe8>
 8007490:	881e      	ldrh	r6, [r3, #0]
 8007492:	4854      	ldr	r0, [pc, #336]	; (80075e4 <_printf_i+0x244>)
 8007494:	2f6f      	cmp	r7, #111	; 0x6f
 8007496:	bf0c      	ite	eq
 8007498:	2308      	moveq	r3, #8
 800749a:	230a      	movne	r3, #10
 800749c:	2100      	movs	r1, #0
 800749e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074a2:	6865      	ldr	r5, [r4, #4]
 80074a4:	60a5      	str	r5, [r4, #8]
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	bfa2      	ittt	ge
 80074aa:	6821      	ldrge	r1, [r4, #0]
 80074ac:	f021 0104 	bicge.w	r1, r1, #4
 80074b0:	6021      	strge	r1, [r4, #0]
 80074b2:	b90e      	cbnz	r6, 80074b8 <_printf_i+0x118>
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	d04d      	beq.n	8007554 <_printf_i+0x1b4>
 80074b8:	4615      	mov	r5, r2
 80074ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80074be:	fb03 6711 	mls	r7, r3, r1, r6
 80074c2:	5dc7      	ldrb	r7, [r0, r7]
 80074c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074c8:	4637      	mov	r7, r6
 80074ca:	42bb      	cmp	r3, r7
 80074cc:	460e      	mov	r6, r1
 80074ce:	d9f4      	bls.n	80074ba <_printf_i+0x11a>
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d10b      	bne.n	80074ec <_printf_i+0x14c>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	07de      	lsls	r6, r3, #31
 80074d8:	d508      	bpl.n	80074ec <_printf_i+0x14c>
 80074da:	6923      	ldr	r3, [r4, #16]
 80074dc:	6861      	ldr	r1, [r4, #4]
 80074de:	4299      	cmp	r1, r3
 80074e0:	bfde      	ittt	le
 80074e2:	2330      	movle	r3, #48	; 0x30
 80074e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074ec:	1b52      	subs	r2, r2, r5
 80074ee:	6122      	str	r2, [r4, #16]
 80074f0:	f8cd a000 	str.w	sl, [sp]
 80074f4:	464b      	mov	r3, r9
 80074f6:	aa03      	add	r2, sp, #12
 80074f8:	4621      	mov	r1, r4
 80074fa:	4640      	mov	r0, r8
 80074fc:	f7ff fee2 	bl	80072c4 <_printf_common>
 8007500:	3001      	adds	r0, #1
 8007502:	d14c      	bne.n	800759e <_printf_i+0x1fe>
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	b004      	add	sp, #16
 800750a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800750e:	4835      	ldr	r0, [pc, #212]	; (80075e4 <_printf_i+0x244>)
 8007510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007514:	6829      	ldr	r1, [r5, #0]
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	f851 6b04 	ldr.w	r6, [r1], #4
 800751c:	6029      	str	r1, [r5, #0]
 800751e:	061d      	lsls	r5, r3, #24
 8007520:	d514      	bpl.n	800754c <_printf_i+0x1ac>
 8007522:	07df      	lsls	r7, r3, #31
 8007524:	bf44      	itt	mi
 8007526:	f043 0320 	orrmi.w	r3, r3, #32
 800752a:	6023      	strmi	r3, [r4, #0]
 800752c:	b91e      	cbnz	r6, 8007536 <_printf_i+0x196>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	f023 0320 	bic.w	r3, r3, #32
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	2310      	movs	r3, #16
 8007538:	e7b0      	b.n	800749c <_printf_i+0xfc>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	f043 0320 	orr.w	r3, r3, #32
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	2378      	movs	r3, #120	; 0x78
 8007544:	4828      	ldr	r0, [pc, #160]	; (80075e8 <_printf_i+0x248>)
 8007546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800754a:	e7e3      	b.n	8007514 <_printf_i+0x174>
 800754c:	0659      	lsls	r1, r3, #25
 800754e:	bf48      	it	mi
 8007550:	b2b6      	uxthmi	r6, r6
 8007552:	e7e6      	b.n	8007522 <_printf_i+0x182>
 8007554:	4615      	mov	r5, r2
 8007556:	e7bb      	b.n	80074d0 <_printf_i+0x130>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	6826      	ldr	r6, [r4, #0]
 800755c:	6961      	ldr	r1, [r4, #20]
 800755e:	1d18      	adds	r0, r3, #4
 8007560:	6028      	str	r0, [r5, #0]
 8007562:	0635      	lsls	r5, r6, #24
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	d501      	bpl.n	800756c <_printf_i+0x1cc>
 8007568:	6019      	str	r1, [r3, #0]
 800756a:	e002      	b.n	8007572 <_printf_i+0x1d2>
 800756c:	0670      	lsls	r0, r6, #25
 800756e:	d5fb      	bpl.n	8007568 <_printf_i+0x1c8>
 8007570:	8019      	strh	r1, [r3, #0]
 8007572:	2300      	movs	r3, #0
 8007574:	6123      	str	r3, [r4, #16]
 8007576:	4615      	mov	r5, r2
 8007578:	e7ba      	b.n	80074f0 <_printf_i+0x150>
 800757a:	682b      	ldr	r3, [r5, #0]
 800757c:	1d1a      	adds	r2, r3, #4
 800757e:	602a      	str	r2, [r5, #0]
 8007580:	681d      	ldr	r5, [r3, #0]
 8007582:	6862      	ldr	r2, [r4, #4]
 8007584:	2100      	movs	r1, #0
 8007586:	4628      	mov	r0, r5
 8007588:	f7f8 fe32 	bl	80001f0 <memchr>
 800758c:	b108      	cbz	r0, 8007592 <_printf_i+0x1f2>
 800758e:	1b40      	subs	r0, r0, r5
 8007590:	6060      	str	r0, [r4, #4]
 8007592:	6863      	ldr	r3, [r4, #4]
 8007594:	6123      	str	r3, [r4, #16]
 8007596:	2300      	movs	r3, #0
 8007598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759c:	e7a8      	b.n	80074f0 <_printf_i+0x150>
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	462a      	mov	r2, r5
 80075a2:	4649      	mov	r1, r9
 80075a4:	4640      	mov	r0, r8
 80075a6:	47d0      	blx	sl
 80075a8:	3001      	adds	r0, #1
 80075aa:	d0ab      	beq.n	8007504 <_printf_i+0x164>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	079b      	lsls	r3, r3, #30
 80075b0:	d413      	bmi.n	80075da <_printf_i+0x23a>
 80075b2:	68e0      	ldr	r0, [r4, #12]
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	4298      	cmp	r0, r3
 80075b8:	bfb8      	it	lt
 80075ba:	4618      	movlt	r0, r3
 80075bc:	e7a4      	b.n	8007508 <_printf_i+0x168>
 80075be:	2301      	movs	r3, #1
 80075c0:	4632      	mov	r2, r6
 80075c2:	4649      	mov	r1, r9
 80075c4:	4640      	mov	r0, r8
 80075c6:	47d0      	blx	sl
 80075c8:	3001      	adds	r0, #1
 80075ca:	d09b      	beq.n	8007504 <_printf_i+0x164>
 80075cc:	3501      	adds	r5, #1
 80075ce:	68e3      	ldr	r3, [r4, #12]
 80075d0:	9903      	ldr	r1, [sp, #12]
 80075d2:	1a5b      	subs	r3, r3, r1
 80075d4:	42ab      	cmp	r3, r5
 80075d6:	dcf2      	bgt.n	80075be <_printf_i+0x21e>
 80075d8:	e7eb      	b.n	80075b2 <_printf_i+0x212>
 80075da:	2500      	movs	r5, #0
 80075dc:	f104 0619 	add.w	r6, r4, #25
 80075e0:	e7f5      	b.n	80075ce <_printf_i+0x22e>
 80075e2:	bf00      	nop
 80075e4:	08007a9d 	.word	0x08007a9d
 80075e8:	08007aae 	.word	0x08007aae

080075ec <_sbrk_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d06      	ldr	r5, [pc, #24]	; (8007608 <_sbrk_r+0x1c>)
 80075f0:	2300      	movs	r3, #0
 80075f2:	4604      	mov	r4, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	602b      	str	r3, [r5, #0]
 80075f8:	f7f9 fcf6 	bl	8000fe8 <_sbrk>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_sbrk_r+0x1a>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_sbrk_r+0x1a>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	20001260 	.word	0x20001260

0800760c <__sread>:
 800760c:	b510      	push	{r4, lr}
 800760e:	460c      	mov	r4, r1
 8007610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007614:	f000 f8a0 	bl	8007758 <_read_r>
 8007618:	2800      	cmp	r0, #0
 800761a:	bfab      	itete	ge
 800761c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800761e:	89a3      	ldrhlt	r3, [r4, #12]
 8007620:	181b      	addge	r3, r3, r0
 8007622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007626:	bfac      	ite	ge
 8007628:	6563      	strge	r3, [r4, #84]	; 0x54
 800762a:	81a3      	strhlt	r3, [r4, #12]
 800762c:	bd10      	pop	{r4, pc}

0800762e <__swrite>:
 800762e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007632:	461f      	mov	r7, r3
 8007634:	898b      	ldrh	r3, [r1, #12]
 8007636:	05db      	lsls	r3, r3, #23
 8007638:	4605      	mov	r5, r0
 800763a:	460c      	mov	r4, r1
 800763c:	4616      	mov	r6, r2
 800763e:	d505      	bpl.n	800764c <__swrite+0x1e>
 8007640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007644:	2302      	movs	r3, #2
 8007646:	2200      	movs	r2, #0
 8007648:	f000 f868 	bl	800771c <_lseek_r>
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007656:	81a3      	strh	r3, [r4, #12]
 8007658:	4632      	mov	r2, r6
 800765a:	463b      	mov	r3, r7
 800765c:	4628      	mov	r0, r5
 800765e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007662:	f000 b817 	b.w	8007694 <_write_r>

08007666 <__sseek>:
 8007666:	b510      	push	{r4, lr}
 8007668:	460c      	mov	r4, r1
 800766a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766e:	f000 f855 	bl	800771c <_lseek_r>
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	bf15      	itete	ne
 8007678:	6560      	strne	r0, [r4, #84]	; 0x54
 800767a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800767e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007682:	81a3      	strheq	r3, [r4, #12]
 8007684:	bf18      	it	ne
 8007686:	81a3      	strhne	r3, [r4, #12]
 8007688:	bd10      	pop	{r4, pc}

0800768a <__sclose>:
 800768a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768e:	f000 b813 	b.w	80076b8 <_close_r>
	...

08007694 <_write_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d07      	ldr	r5, [pc, #28]	; (80076b4 <_write_r+0x20>)
 8007698:	4604      	mov	r4, r0
 800769a:	4608      	mov	r0, r1
 800769c:	4611      	mov	r1, r2
 800769e:	2200      	movs	r2, #0
 80076a0:	602a      	str	r2, [r5, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	f7f8 ff76 	bl	8000594 <_write>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_write_r+0x1e>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_write_r+0x1e>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	20001260 	.word	0x20001260

080076b8 <_close_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d06      	ldr	r5, [pc, #24]	; (80076d4 <_close_r+0x1c>)
 80076bc:	2300      	movs	r3, #0
 80076be:	4604      	mov	r4, r0
 80076c0:	4608      	mov	r0, r1
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	f7f9 fc5b 	bl	8000f7e <_close>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_close_r+0x1a>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_close_r+0x1a>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20001260 	.word	0x20001260

080076d8 <_fstat_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d07      	ldr	r5, [pc, #28]	; (80076f8 <_fstat_r+0x20>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	f7f9 fc56 	bl	8000f96 <_fstat>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	d102      	bne.n	80076f4 <_fstat_r+0x1c>
 80076ee:	682b      	ldr	r3, [r5, #0]
 80076f0:	b103      	cbz	r3, 80076f4 <_fstat_r+0x1c>
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	bd38      	pop	{r3, r4, r5, pc}
 80076f6:	bf00      	nop
 80076f8:	20001260 	.word	0x20001260

080076fc <_isatty_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d06      	ldr	r5, [pc, #24]	; (8007718 <_isatty_r+0x1c>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7f9 fc55 	bl	8000fb6 <_isatty>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_isatty_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_isatty_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	20001260 	.word	0x20001260

0800771c <_lseek_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d07      	ldr	r5, [pc, #28]	; (800773c <_lseek_r+0x20>)
 8007720:	4604      	mov	r4, r0
 8007722:	4608      	mov	r0, r1
 8007724:	4611      	mov	r1, r2
 8007726:	2200      	movs	r2, #0
 8007728:	602a      	str	r2, [r5, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	f7f9 fc4e 	bl	8000fcc <_lseek>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_lseek_r+0x1e>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_lseek_r+0x1e>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20001260 	.word	0x20001260

08007740 <__malloc_lock>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__malloc_lock+0x8>)
 8007742:	f7ff bb1d 	b.w	8006d80 <__retarget_lock_acquire_recursive>
 8007746:	bf00      	nop
 8007748:	20001255 	.word	0x20001255

0800774c <__malloc_unlock>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__malloc_unlock+0x8>)
 800774e:	f7ff bb18 	b.w	8006d82 <__retarget_lock_release_recursive>
 8007752:	bf00      	nop
 8007754:	20001255 	.word	0x20001255

08007758 <_read_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4d07      	ldr	r5, [pc, #28]	; (8007778 <_read_r+0x20>)
 800775c:	4604      	mov	r4, r0
 800775e:	4608      	mov	r0, r1
 8007760:	4611      	mov	r1, r2
 8007762:	2200      	movs	r2, #0
 8007764:	602a      	str	r2, [r5, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	f7f9 fbec 	bl	8000f44 <_read>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_read_r+0x1e>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_read_r+0x1e>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	20001260 	.word	0x20001260

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
