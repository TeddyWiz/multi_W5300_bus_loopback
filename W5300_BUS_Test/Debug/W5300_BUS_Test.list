
W5300_BUS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a0  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000333  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007d14  08007d14  00017d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e0  20000000  08007d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001264  200000e0  08007dfc  000200e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20001344  08007dfc  00021344  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022f27  00000000  00000000  00020116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000425e  00000000  00000000  0004303d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001983e  00000000  00000000  0004729b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001038  00000000  00000000  00060ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002c50  00000000  00000000  00061b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038cb2  00000000  00000000  00064768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025564  00000000  00000000  0009d41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00162ff7  00000000  00000000  000c297e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00225975  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000394c  00000000  00000000  002259c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000e0 	.word	0x200000e0
 8000254:	00000000 	.word	0x00000000
 8000258:	080079c0 	.word	0x080079c0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000e4 	.word	0x200000e4
 8000274:	080079c0 	.word	0x080079c0

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <_write>:
static void MX_ICACHE_Init(void);
/* USER CODE BEGIN PFP */
uint8_t rxData[2];

int _write(int fd, char *str, int len)
{
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=0; i<len; i++)
 800059a:	1e17      	subs	r7, r2, #0
 800059c:	dd0c      	ble.n	80005b8 <_write+0x20>
 800059e:	460c      	mov	r4, r1
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80005a0:	4e06      	ldr	r6, [pc, #24]	; (80005bc <_write+0x24>)
 80005a2:	19cd      	adds	r5, r1, r7
 80005a4:	2201      	movs	r2, #1
 80005a6:	4621      	mov	r1, r4
 80005a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i=0; i<len; i++)
 80005ac:	4414      	add	r4, r2
		HAL_UART_Transmit(&huart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80005ae:	4630      	mov	r0, r6
 80005b0:	f004 fcf4 	bl	8004f9c <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 80005b4:	42ac      	cmp	r4, r5
 80005b6:	d1f5      	bne.n	80005a4 <_write+0xc>
	}
	return len;
}
 80005b8:	4638      	mov	r0, r7
 80005ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005bc:	20001268 	.word	0x20001268

080005c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005c0:	b510      	push	{r4, lr}
    */

     /*
       loop back received data
     */
     HAL_UART_Receive_IT(&huart1, rxData, 1);
 80005c2:	4c07      	ldr	r4, [pc, #28]	; (80005e0 <HAL_UART_RxCpltCallback+0x20>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	4620      	mov	r0, r4
 80005c8:	4906      	ldr	r1, [pc, #24]	; (80005e4 <HAL_UART_RxCpltCallback+0x24>)
 80005ca:	f004 f821 	bl	8004610 <HAL_UART_Receive_IT>
     HAL_UART_Transmit(&huart1, rxData, 1, 1000);
 80005ce:	4620      	mov	r0, r4
}
 80005d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     HAL_UART_Transmit(&huart1, rxData, 1, 1000);
 80005d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d8:	2201      	movs	r2, #1
 80005da:	4902      	ldr	r1, [pc, #8]	; (80005e4 <HAL_UART_RxCpltCallback+0x24>)
 80005dc:	f004 bcde 	b.w	8004f9c <HAL_UART_Transmit>
 80005e0:	20001268 	.word	0x20001268
 80005e4:	200012f8 	.word	0x200012f8

080005e8 <print_network_information>:
void W5300CsDisable(void)
{

}
void print_network_information(void)
{
 80005e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    wizchip_getnetinfo(W5300_BANK_ADDR1, &gWIZNETINFO);
 80005ec:	4d37      	ldr	r5, [pc, #220]	; (80006cc <print_network_information+0xe4>)
{
 80005ee:	b084      	sub	sp, #16
    wizchip_getnetinfo(W5300_BANK_ADDR1, &gWIZNETINFO);
 80005f0:	4629      	mov	r1, r5
 80005f2:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80005f6:	f006 f8d1 	bl	800679c <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 80005fa:	796a      	ldrb	r2, [r5, #5]
 80005fc:	792b      	ldrb	r3, [r5, #4]
 80005fe:	78e9      	ldrb	r1, [r5, #3]
 8000600:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000604:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80006dc <print_network_information+0xf4>
 8000608:	78ab      	ldrb	r3, [r5, #2]
 800060a:	786a      	ldrb	r2, [r5, #1]
 800060c:	9100      	str	r1, [sp, #0]
 800060e:	7829      	ldrb	r1, [r5, #0]
 8000610:	4650      	mov	r0, sl
 8000612:	f006 f9c3 	bl	800699c <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000616:	7a6a      	ldrb	r2, [r5, #9]
 8000618:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80006e0 <print_network_information+0xf8>
 800061c:	7a2b      	ldrb	r3, [r5, #8]
 800061e:	9200      	str	r2, [sp, #0]
 8000620:	79ea      	ldrb	r2, [r5, #7]
 8000622:	79a9      	ldrb	r1, [r5, #6]
 8000624:	4648      	mov	r0, r9
 8000626:	f006 f9b9 	bl	800699c <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 800062a:	7b6b      	ldrb	r3, [r5, #13]
 800062c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80006e4 <print_network_information+0xfc>
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	7b2b      	ldrb	r3, [r5, #12]
 8000634:	7aea      	ldrb	r2, [r5, #11]
 8000636:	7aa9      	ldrb	r1, [r5, #10]
 8000638:	4640      	mov	r0, r8
 800063a:	f006 f9af 	bl	800699c <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 800063e:	7c6b      	ldrb	r3, [r5, #17]
 8000640:	4f23      	ldr	r7, [pc, #140]	; (80006d0 <print_network_information+0xe8>)
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	7c2b      	ldrb	r3, [r5, #16]
 8000646:	7bea      	ldrb	r2, [r5, #15]
 8000648:	7ba9      	ldrb	r1, [r5, #14]
 800064a:	4638      	mov	r0, r7
 800064c:	f006 f9a6 	bl	800699c <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000650:	7d6b      	ldrb	r3, [r5, #21]
 8000652:	4e20      	ldr	r6, [pc, #128]	; (80006d4 <print_network_information+0xec>)
    wizchip_getnetinfo(W5300_BANK_ADDR3, &gWIZNETINFO1);
 8000654:	4c20      	ldr	r4, [pc, #128]	; (80006d8 <print_network_information+0xf0>)
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	7d2b      	ldrb	r3, [r5, #20]
 800065a:	7cea      	ldrb	r2, [r5, #19]
 800065c:	7ca9      	ldrb	r1, [r5, #18]
 800065e:	4630      	mov	r0, r6
 8000660:	f006 f99c 	bl	800699c <iprintf>
    wizchip_getnetinfo(W5300_BANK_ADDR3, &gWIZNETINFO1);
 8000664:	4621      	mov	r1, r4
 8000666:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 800066a:	f006 f897 	bl	800679c <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO1.mac[0],gWIZNETINFO1.mac[1],gWIZNETINFO1.mac[2],gWIZNETINFO1.mac[3],gWIZNETINFO1.mac[4],gWIZNETINFO1.mac[5]);
 800066e:	7963      	ldrb	r3, [r4, #5]
 8000670:	7862      	ldrb	r2, [r4, #1]
 8000672:	9302      	str	r3, [sp, #8]
 8000674:	7923      	ldrb	r3, [r4, #4]
 8000676:	7821      	ldrb	r1, [r4, #0]
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	78e3      	ldrb	r3, [r4, #3]
 800067c:	4650      	mov	r0, sl
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	78a3      	ldrb	r3, [r4, #2]
 8000682:	f006 f98b 	bl	800699c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO1.ip[0],gWIZNETINFO1.ip[1],gWIZNETINFO1.ip[2],gWIZNETINFO1.ip[3]);
 8000686:	7a63      	ldrb	r3, [r4, #9]
 8000688:	79e2      	ldrb	r2, [r4, #7]
 800068a:	79a1      	ldrb	r1, [r4, #6]
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	4648      	mov	r0, r9
 8000690:	7a23      	ldrb	r3, [r4, #8]
 8000692:	f006 f983 	bl	800699c <iprintf>
	printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO1.sn[0],gWIZNETINFO1.sn[1],gWIZNETINFO1.sn[2],gWIZNETINFO1.sn[3]);
 8000696:	7b63      	ldrb	r3, [r4, #13]
 8000698:	7ae2      	ldrb	r2, [r4, #11]
 800069a:	7aa1      	ldrb	r1, [r4, #10]
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	4640      	mov	r0, r8
 80006a0:	7b23      	ldrb	r3, [r4, #12]
 80006a2:	f006 f97b 	bl	800699c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO1.gw[0],gWIZNETINFO1.gw[1],gWIZNETINFO1.gw[2],gWIZNETINFO1.gw[3]);
 80006a6:	7c62      	ldrb	r2, [r4, #17]
 80006a8:	7c23      	ldrb	r3, [r4, #16]
 80006aa:	7ba1      	ldrb	r1, [r4, #14]
 80006ac:	9200      	str	r2, [sp, #0]
 80006ae:	4638      	mov	r0, r7
 80006b0:	7be2      	ldrb	r2, [r4, #15]
 80006b2:	f006 f973 	bl	800699c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO1.dns[0],gWIZNETINFO1.dns[1],gWIZNETINFO1.dns[2],gWIZNETINFO1.dns[3]);
 80006b6:	7d65      	ldrb	r5, [r4, #21]
 80006b8:	4630      	mov	r0, r6
 80006ba:	7d23      	ldrb	r3, [r4, #20]
 80006bc:	7ce2      	ldrb	r2, [r4, #19]
 80006be:	7ca1      	ldrb	r1, [r4, #18]
 80006c0:	9500      	str	r5, [sp, #0]
 80006c2:	f006 f96b 	bl	800699c <iprintf>
}
 80006c6:	b004      	add	sp, #16
 80006c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	08007a40 	.word	0x08007a40
 80006d4:	08007a5c 	.word	0x08007a5c
 80006d8:	20000018 	.word	0x20000018
 80006dc:	080079d8 	.word	0x080079d8
 80006e0:	08007a08 	.word	0x08007a08
 80006e4:	08007a24 	.word	0x08007a24

080006e8 <_InitW5300>:

void _InitW5300(void)
{
 80006e8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	4832      	ldr	r0, [pc, #200]	; (80007b8 <_InitW5300+0xd0>)
 80006f0:	f001 f89a 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80006f4:	200a      	movs	r0, #10
 80006f6:	f000 fcff 	bl	80010f8 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	482e      	ldr	r0, [pc, #184]	; (80007b8 <_InitW5300+0xd0>)
 8000700:	f001 f892 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000704:	2064      	movs	r0, #100	; 0x64
 8000706:	f000 fcf7 	bl	80010f8 <HAL_Delay>
	unsigned int tmpaddr[4];

	Reset_W5300();
	//reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
	//reg_wizchip_cs_cbfunc(W5300CsEnable, W5300CsDisable);
	setMR(W5300_BANK_ADDR1,0xB800);
 800070a:	f44f 4238 	mov.w	r2, #47104	; 0xb800
 800070e:	2100      	movs	r1, #0
 8000710:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000714:	f005 f896 	bl	8005844 <WIZCHIP_WRITE>
	printf("getMR(0x%x) = %04X\r\n",W5300_BANK_ADDR1,  getMR(W5300_BANK_ADDR1));
 8000718:	2100      	movs	r1, #0
 800071a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800071e:	f005 f895 	bl	800584c <WIZCHIP_READ>
 8000722:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000726:	4602      	mov	r2, r0
 8000728:	4824      	ldr	r0, [pc, #144]	; (80007bc <_InitW5300+0xd4>)
 800072a:	f006 f937 	bl	800699c <iprintf>
	HAL_Delay(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f000 fce2 	bl	80010f8 <HAL_Delay>
	printf("getMR(0x%x) = %04X\r\n",W5300_BANK_ADDR3,  getMR(W5300_BANK_ADDR3));
 8000734:	2100      	movs	r1, #0
 8000736:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 800073a:	f005 f887 	bl	800584c <WIZCHIP_READ>
 800073e:	f04f 41d0 	mov.w	r1, #1744830464	; 0x68000000
 8000742:	4602      	mov	r2, r0
 8000744:	481d      	ldr	r0, [pc, #116]	; (80007bc <_InitW5300+0xd4>)
 8000746:	f006 f929 	bl	800699c <iprintf>
	HAL_Delay(100);
 800074a:	2064      	movs	r0, #100	; 0x64
 800074c:	f000 fcd4 	bl	80010f8 <HAL_Delay>

	if (ctlwizchip(W5300_BANK_ADDR1, CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 8000750:	2101      	movs	r1, #1
 8000752:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000756:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <_InitW5300+0xd8>)
 8000758:	f005 ff18 	bl	800658c <ctlwizchip>
 800075c:	3001      	adds	r0, #1
 800075e:	d023      	beq.n	80007a8 <_InitW5300+0xc0>
	{
		printf("W5300 memory initialization failed\r\n");
	}
	HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f000 fcc9 	bl	80010f8 <HAL_Delay>
	if (ctlwizchip(W5300_BANK_ADDR3, CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 8000766:	2101      	movs	r1, #1
 8000768:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <_InitW5300+0xd8>)
 800076e:	f005 ff0d 	bl	800658c <ctlwizchip>
 8000772:	3001      	adds	r0, #1
 8000774:	d01c      	beq.n	80007b0 <_InitW5300+0xc8>
	{
		printf("W5300 memory initialization failed\r\n");
	}
	HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f000 fcbe 	bl	80010f8 <HAL_Delay>

	ctlnetwork(W5300_BANK_ADDR1, CN_SET_NETINFO, (void *)&gWIZNETINFO);
 800077c:	2100      	movs	r1, #0
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <_InitW5300+0xdc>)
 8000780:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000784:	f006 f892 	bl	80068ac <ctlnetwork>
	HAL_Delay(100);
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f000 fcb5 	bl	80010f8 <HAL_Delay>
	ctlnetwork(W5300_BANK_ADDR3, CN_SET_NETINFO, (void *)&gWIZNETINFO1);
 800078e:	2100      	movs	r1, #0
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <_InitW5300+0xe0>)
 8000792:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 8000796:	f006 f889 	bl	80068ac <ctlnetwork>
	HAL_Delay(100);
 800079a:	2064      	movs	r0, #100	; 0x64
 800079c:	f000 fcac 	bl	80010f8 <HAL_Delay>
	print_network_information();
}
 80007a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	print_network_information();
 80007a4:	f7ff bf20 	b.w	80005e8 <print_network_information>
		printf("W5300 memory initialization failed\r\n");
 80007a8:	4808      	ldr	r0, [pc, #32]	; (80007cc <_InitW5300+0xe4>)
 80007aa:	f006 f97d 	bl	8006aa8 <puts>
 80007ae:	e7d7      	b.n	8000760 <_InitW5300+0x78>
		printf("W5300 memory initialization failed\r\n");
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <_InitW5300+0xe4>)
 80007b2:	f006 f979 	bl	8006aa8 <puts>
 80007b6:	e7de      	b.n	8000776 <_InitW5300+0x8e>
 80007b8:	42021400 	.word	0x42021400
 80007bc:	08007a78 	.word	0x08007a78
 80007c0:	20000030 	.word	0x20000030
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000018 	.word	0x20000018
 80007cc:	08007a90 	.word	0x08007a90

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b530      	push	{r4, r5, lr}
 80007d2:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d4:	2260      	movs	r2, #96	; 0x60
 80007d6:	2100      	movs	r1, #0
 80007d8:	a806      	add	r0, sp, #24
 80007da:	f006 f8d7 	bl	800698c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	e9cd 3300 	strd	r3, r3, [sp]
 80007e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80007ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f0:	f001 f87a 	bl	80018e8 <HAL_PWREx_ControlVoltageScaling>
 80007f4:	b108      	cbz	r0, 80007fa <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <SystemClock_Config+0x28>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2310      	movs	r3, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000800:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000802:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000808:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800080c:	2112      	movs	r1, #18
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2502      	movs	r5, #2
 8000810:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000814:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2201      	movs	r2, #1
 8000818:	2300      	movs	r3, #0
 800081a:	2450      	movs	r4, #80	; 0x50
 800081c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000820:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8000824:	2202      	movs	r2, #2
 8000826:	2302      	movs	r3, #2
 8000828:	2400      	movs	r4, #0
 800082a:	2500      	movs	r5, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800082c:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800082e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000834:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000838:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800083c:	910f      	str	r1, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f001 fb37 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000842:	b108      	cbz	r0, 8000848 <SystemClock_Config+0x78>
 8000844:	b672      	cpsid	i
  while (1)
 8000846:	e7fe      	b.n	8000846 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	221f      	movs	r2, #31
 800084a:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084c:	4668      	mov	r0, sp
 800084e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000854:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000858:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085c:	f001 f9c4 	bl	8001be8 <HAL_RCC_ClockConfig>
 8000860:	b108      	cbz	r0, 8000866 <SystemClock_Config+0x96>
 8000862:	b672      	cpsid	i
  while (1)
 8000864:	e7fe      	b.n	8000864 <SystemClock_Config+0x94>
}
 8000866:	b01f      	add	sp, #124	; 0x7c
 8000868:	bd30      	pop	{r4, r5, pc}
 800086a:	bf00      	nop
 800086c:	0000      	movs	r0, r0
	...

08000870 <main>:
{
 8000870:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000874:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8000876:	f000 fc03 	bl	8001080 <HAL_Init>
  SystemClock_Config();
 800087a:	f7ff ffa9 	bl	80007d0 <SystemClock_Config>
  HAL_PWREx_EnableVddIO2();
 800087e:	f001 f8b9 	bl	80019f4 <HAL_PWREx_EnableVddIO2>
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000882:	2002      	movs	r0, #2
 8000884:	f001 f87a 	bl	800197c <HAL_PWREx_ConfigSupply>
 8000888:	b108      	cbz	r0, 800088e <main+0x1e>
 800088a:	b672      	cpsid	i
  while (1)
 800088c:	e7fe      	b.n	800088c <main+0x1c>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8000892:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4dbc      	ldr	r5, [pc, #752]	; (8000b88 <main+0x318>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	900e      	str	r0, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800089e:	4604      	mov	r4, r0
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80008a8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ac:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	9303      	str	r3, [sp, #12]
 80008b4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ba:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008bc:	f043 0320 	orr.w	r3, r3, #32
 80008c0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80008c4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80008c8:	48b0      	ldr	r0, [pc, #704]	; (8000b8c <main+0x31c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	9304      	str	r3, [sp, #16]
 80008d0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008d6:	f04f 0a80 	mov.w	sl, #128	; 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80008e2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008e6:	f04f 0b01 	mov.w	fp, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	9305      	str	r3, [sp, #20]
 80008f0:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008f6:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8000b68 <main+0x2f8>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8000902:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000906:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	9306      	str	r3, [sp, #24]
 800090e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000910:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000914:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800091e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000922:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	9307      	str	r3, [sp, #28]
 800092c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8000932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000936:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800093a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	9308      	str	r3, [sp, #32]
 8000944:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8000952:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	9309      	str	r3, [sp, #36]	; 0x24
 800095c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 800095e:	f000 ff63 	bl	8001828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000962:	4622      	mov	r2, r4
 8000964:	2104      	movs	r1, #4
 8000966:	488a      	ldr	r0, [pc, #552]	; (8000b90 <main+0x320>)
 8000968:	f000 ff5e 	bl	8001828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800096c:	4622      	mov	r2, r4
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	4888      	ldr	r0, [pc, #544]	; (8000b94 <main+0x324>)
 8000972:	f000 ff59 	bl	8001828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000976:	4622      	mov	r2, r4
 8000978:	21a0      	movs	r1, #160	; 0xa0
 800097a:	4887      	ldr	r0, [pc, #540]	; (8000b98 <main+0x328>)
 800097c:	f000 ff54 	bl	8001828 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000980:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000984:	4b85      	ldr	r3, [pc, #532]	; (8000b9c <main+0x32c>)
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000986:	4883      	ldr	r0, [pc, #524]	; (8000b94 <main+0x324>)
 8000988:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800098a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000990:	f000 fe48 	bl	8001624 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000994:	487d      	ldr	r0, [pc, #500]	; (8000b8c <main+0x31c>)
 8000996:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000998:	ed8d 8b0c 	vstr	d8, [sp, #48]	; 0x30
 800099c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009a0:	f000 fe40 	bl	8001624 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80009a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a8:	2300      	movs	r3, #0
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80009aa:	487b      	ldr	r0, [pc, #492]	; (8000b98 <main+0x328>)
 80009ac:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80009ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f000 fe36 	bl	8001624 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80009b8:	2204      	movs	r2, #4
 80009ba:	2301      	movs	r3, #1
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80009bc:	4874      	ldr	r0, [pc, #464]	; (8000b90 <main+0x320>)
 80009be:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80009c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80009c4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f000 fe2c 	bl	8001624 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009cc:	4871      	ldr	r0, [pc, #452]	; (8000b94 <main+0x324>)
 80009ce:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009d0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80009d4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f000 fe24 	bl	8001624 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80009dc:	2220      	movs	r2, #32
 80009de:	2301      	movs	r3, #1
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80009e0:	486d      	ldr	r0, [pc, #436]	; (8000b98 <main+0x328>)
 80009e2:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80009e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80009e8:	ed8d 8b0c 	vstr	d8, [sp, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f000 fe1a 	bl	8001624 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80009f0:	4869      	ldr	r0, [pc, #420]	; (8000b98 <main+0x328>)
 80009f2:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80009f4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80009f8:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f000 fe12 	bl	8001624 <HAL_GPIO_Init>
  hadc1.Init.NbrOfConversion = 1;
 8000a00:	2301      	movs	r3, #1
  hadc1.Instance = ADC1;
 8000a02:	4867      	ldr	r0, [pc, #412]	; (8000ba0 <main+0x330>)
  hadc1.Init.NbrOfConversion = 1;
 8000a04:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Instance = ADC1;
 8000a06:	4b67      	ldr	r3, [pc, #412]	; (8000ba4 <main+0x334>)
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a10:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a12:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a16:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a1a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a1e:	6684      	str	r4, [r0, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a20:	6444      	str	r4, [r0, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a22:	6504      	str	r4, [r0, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a24:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a26:	f880 4054 	strb.w	r4, [r0, #84]	; 0x54
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2a:	f8c0 8018 	str.w	r8, [r0, #24]
  hadc1.Instance = ADC1;
 8000a2e:	6003      	str	r3, [r0, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a30:	f000 fb74 	bl	800111c <HAL_ADC_Init>
 8000a34:	4604      	mov	r4, r0
 8000a36:	b108      	cbz	r0, 8000a3c <main+0x1cc>
 8000a38:	b672      	cpsid	i
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <main+0x1ca>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a3c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8000a40:	2703      	movs	r7, #3
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8000a46:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000a4a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	a90a      	add	r1, sp, #40	; 0x28
 8000a50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a54:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000a58:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8000a5c:	484e      	ldr	r0, [pc, #312]	; (8000b98 <main+0x328>)
 8000a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a62:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000a64:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000a66:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000a72:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a7c:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000a7e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000a8a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a8e:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000a98:	9b02      	ldr	r3, [sp, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f004 fd33 	bl	8005504 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	4842      	ldr	r0, [pc, #264]	; (8000ba8 <main+0x338>)
 8000aa0:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000aa2:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa6:	940e      	str	r4, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f004 fd2c 	bl	8005504 <LL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8000aac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000ab0:	4d3e      	ldr	r5, [pc, #248]	; (8000bac <main+0x33c>)
  huart1.Init.BaudRate = 115200;
 8000ab2:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	616b      	str	r3, [r5, #20]
  huart1.Instance = USART1;
 8000ab8:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <main+0x340>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aba:	4628      	mov	r0, r5
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000abc:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac4:	e9c5 4408 	strd	r4, r4, [r5, #32]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ac8:	612c      	str	r4, [r5, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aca:	62ac      	str	r4, [r5, #40]	; 0x28
  huart1.Instance = USART1;
 8000acc:	602b      	str	r3, [r5, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ace:	f004 fb39 	bl	8005144 <HAL_UART_Init>
 8000ad2:	b108      	cbz	r0, 8000ad8 <main+0x268>
 8000ad4:	b672      	cpsid	i
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x266>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	4601      	mov	r1, r0
 8000ada:	4628      	mov	r0, r5
 8000adc:	f004 fbbc 	bl	8005258 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4601      	mov	r1, r0
 8000ae2:	b108      	cbz	r0, 8000ae8 <main+0x278>
 8000ae4:	b672      	cpsid	i
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <main+0x276>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	4628      	mov	r0, r5
 8000aea:	f004 fbf7 	bl	80052dc <HAL_UARTEx_SetRxFifoThreshold>
 8000aee:	b108      	cbz	r0, 8000af4 <main+0x284>
 8000af0:	b672      	cpsid	i
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <main+0x282>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000af4:	4628      	mov	r0, r5
 8000af6:	f004 fb91 	bl	800521c <HAL_UARTEx_DisableFifoMode>
 8000afa:	4602      	mov	r2, r0
 8000afc:	b108      	cbz	r0, 8000b02 <main+0x292>
 8000afe:	b672      	cpsid	i
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <main+0x290>
  Timing.AddressSetupTime = 5;
 8000b02:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8000b70 <main+0x300>
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000b06:	f20f 0b70 	addw	fp, pc, #112	; 0x70
 8000b0a:	e9db ab00 	ldrd	sl, fp, [fp]
  Timing.AddressSetupTime = 5;
 8000b0e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b12:	2510      	movs	r5, #16
  Timing.BusTurnAroundDuration = 5;
 8000b14:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8000b80 <main+0x310>
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000b18:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  Timing.DataSetupTime = 5;
 8000b1c:	2405      	movs	r4, #5
  Timing.DataLatency = 17;
 8000b1e:	2711      	movs	r7, #17
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000b20:	4824      	ldr	r0, [pc, #144]	; (8000bb4 <main+0x344>)
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b22:	a90a      	add	r1, sp, #40	; 0x28
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000b24:	e9c0 ab00 	strd	sl, fp, [r0]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000b28:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b2c:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000b30:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000b34:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000b38:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000b3c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b40:	920d      	str	r2, [sp, #52]	; 0x34
 8000b42:	9211      	str	r2, [sp, #68]	; 0x44
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000b44:	6102      	str	r2, [r0, #16]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000b46:	6202      	str	r2, [r0, #32]
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000b48:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  Timing.BusTurnAroundDuration = 5;
 8000b4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b50:	6145      	str	r5, [r0, #20]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000b52:	6246      	str	r6, [r0, #36]	; 0x24
  Timing.DataSetupTime = 5;
 8000b54:	940c      	str	r4, [sp, #48]	; 0x30
  Timing.DataLatency = 17;
 8000b56:	9710      	str	r7, [sp, #64]	; 0x40
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b58:	f003 fd24 	bl	80045a4 <HAL_SRAM_Init>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	b358      	cbz	r0, 8000bb8 <main+0x348>
 8000b60:	b672      	cpsid	i
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <main+0x2f2>
 8000b64:	f3af 8000 	nop.w
	...
 8000b70:	00000005 	.word	0x00000005
 8000b74:	0000000f 	.word	0x0000000f
 8000b78:	420d0400 	.word	0x420d0400
 8000b7c:	420d0504 	.word	0x420d0504
 8000b80:	00000005 	.word	0x00000005
 8000b84:	00000010 	.word	0x00000010
 8000b88:	46020c00 	.word	0x46020c00
 8000b8c:	42021400 	.word	0x42021400
 8000b90:	42021800 	.word	0x42021800
 8000b94:	42020800 	.word	0x42020800
 8000b98:	42020400 	.word	0x42020400
 8000b9c:	10210000 	.word	0x10210000
 8000ba0:	200010fc 	.word	0x200010fc
 8000ba4:	42028000 	.word	0x42028000
 8000ba8:	42020000 	.word	0x42020000
 8000bac:	20001268 	.word	0x20001268
 8000bb0:	40013800 	.word	0x40013800
 8000bb4:	200011b8 	.word	0x200011b8
  Timing.AddressHoldTime = 15;
 8000bb8:	230f      	movs	r3, #15
  Timing.DataHoldTime = 0;
 8000bba:	e9cd 040d 	strd	r0, r4, [sp, #52]	; 0x34
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000bbe:	9011      	str	r0, [sp, #68]	; 0x44
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000bc0:	4833      	ldr	r0, [pc, #204]	; (8000c90 <main+0x420>)
  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000bc2:	a90a      	add	r1, sp, #40	; 0x28
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000bc4:	e9c0 ab00 	strd	sl, fp, [r0]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000bc8:	e9c0 8202 	strd	r8, r2, [r0, #8]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000bcc:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000bd0:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000bd4:	e9c0 2608 	strd	r2, r6, [r0, #32]
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000bd8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000bdc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000be0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000be4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
  Timing.DataLatency = 17;
 8000be8:	9710      	str	r7, [sp, #64]	; 0x40
  Timing.AddressSetupTime = 5;
 8000bea:	940a      	str	r4, [sp, #40]	; 0x28
  Timing.DataSetupTime = 5;
 8000bec:	940c      	str	r4, [sp, #48]	; 0x30
  Timing.CLKDivision = 16;
 8000bee:	950f      	str	r5, [sp, #60]	; 0x3c
  Timing.AddressHoldTime = 15;
 8000bf0:	930b      	str	r3, [sp, #44]	; 0x2c
  hsram2.Init.MaxChipSelectPulse = DISABLE;
 8000bf2:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000bf6:	f003 fcd5 	bl	80045a4 <HAL_SRAM_Init>
 8000bfa:	b108      	cbz	r0, 8000c00 <main+0x390>
 8000bfc:	b672      	cpsid	i
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <main+0x38e>
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 8000c00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hdcache1.Instance = DCACHE1;
 8000c04:	4823      	ldr	r0, [pc, #140]	; (8000c94 <main+0x424>)
 8000c06:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <main+0x428>)
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 8000c08:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000c0c:	f000 fccc 	bl	80015a8 <HAL_DCACHE_Init>
 8000c10:	b108      	cbz	r0, 8000c16 <main+0x3a6>
 8000c12:	b672      	cpsid	i
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <main+0x3a4>
  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000c16:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8000c1a:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8000c1e:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000c20:	f000 fe12 	bl	8001848 <HAL_ICACHE_Disable>
 8000c24:	b108      	cbz	r0, 8000c2a <main+0x3ba>
 8000c26:	b672      	cpsid	i
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <main+0x3b8>
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000c2a:	2000      	movs	r0, #0
  pRegionConfig.BaseAddress = 0x0;
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2300      	movs	r3, #0
 8000c30:	2401      	movs	r4, #1
 8000c32:	2500      	movs	r5, #0
  if (HAL_ICACHE_EnableRemapRegion(ICACHE_REGION_0, &pRegionConfig) != HAL_OK)
 8000c34:	a90a      	add	r1, sp, #40	; 0x28
  pRegionConfig.BaseAddress = 0x0;
 8000c36:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8000c3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000c3e:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ICACHE_EnableRemapRegion(ICACHE_REGION_0, &pRegionConfig) != HAL_OK)
 8000c40:	f000 fe22 	bl	8001888 <HAL_ICACHE_EnableRemapRegion>
 8000c44:	b108      	cbz	r0, 8000c4a <main+0x3da>
 8000c46:	b672      	cpsid	i
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <main+0x3d8>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c4a:	f000 fdf3 	bl	8001834 <HAL_ICACHE_Enable>
 8000c4e:	b108      	cbz	r0, 8000c54 <main+0x3e4>
 8000c50:	b672      	cpsid	i
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <main+0x3e2>
  printf("Hello! W5300 BUS loopback System \r\n");
 8000c54:	4811      	ldr	r0, [pc, #68]	; (8000c9c <main+0x42c>)
 8000c56:	f005 ff27 	bl	8006aa8 <puts>
  HAL_UART_Receive_IT(&huart1, rxData, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4910      	ldr	r1, [pc, #64]	; (8000ca0 <main+0x430>)
 8000c5e:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <main+0x434>)
 8000c60:	f003 fcd6 	bl	8004610 <HAL_UART_Receive_IT>
  _InitW5300();
 8000c64:	f7ff fd40 	bl	80006e8 <_InitW5300>
	 loopback_tcps(W5300_BANK_ADDR1, 0, ethBuf0, 3000);
 8000c68:	4d0f      	ldr	r5, [pc, #60]	; (8000ca8 <main+0x438>)
	 loopback_tcps(W5300_BANK_ADDR3, 0, ethBuf1, 3001);
 8000c6a:	4c10      	ldr	r4, [pc, #64]	; (8000cac <main+0x43c>)
	 loopback_tcps(W5300_BANK_ADDR1, 0, ethBuf0, 3000);
 8000c6c:	462a      	mov	r2, r5
 8000c6e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c72:	2100      	movs	r1, #0
 8000c74:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000c78:	f004 fd0e 	bl	8005698 <loopback_tcps>
	 loopback_tcps(W5300_BANK_ADDR3, 0, ethBuf1, 3001);
 8000c7c:	f640 33b9 	movw	r3, #3001	; 0xbb9
 8000c80:	4622      	mov	r2, r4
 8000c82:	2100      	movs	r1, #0
 8000c84:	f04f 40d0 	mov.w	r0, #1744830464	; 0x68000000
 8000c88:	f004 fd06 	bl	8005698 <loopback_tcps>
  while (1)
 8000c8c:	e7ee      	b.n	8000c6c <main+0x3fc>
 8000c8e:	bf00      	nop
 8000c90:	20001210 	.word	0x20001210
 8000c94:	20001188 	.word	0x20001188
 8000c98:	40031400 	.word	0x40031400
 8000c9c:	08007ab4 	.word	0x08007ab4
 8000ca0:	200012f8 	.word	0x200012f8
 8000ca4:	20001268 	.word	0x20001268
 8000ca8:	200000fc 	.word	0x200000fc
 8000cac:	200008fc 	.word	0x200008fc

08000cb0 <Error_Handler>:
 8000cb0:	b672      	cpsid	i
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <Error_Handler+0x2>

08000cb4 <HAL_MspInit>:

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000cb4:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_MspInit+0x20>)
{
 8000cb8:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000cbe:	4302      	orrs	r2, r0
 8000cc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cc8:	4003      	ands	r3, r0
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000cd0:	f000 bbf4 	b.w	80014bc <HAL_NVIC_SetPriorityGrouping>
 8000cd4:	46020c00 	.word	0x46020c00

08000cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	2100      	movs	r1, #0
{
 8000cdc:	4604      	mov	r4, r0
 8000cde:	b0ba      	sub	sp, #232	; 0xe8
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	22c8      	movs	r2, #200	; 0xc8
 8000ce2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000ce8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000cec:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cee:	f005 fe4d 	bl	800698c <memset>
  if(hadc->Instance==ADC1)
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_ADC_MspInit+0xa0>)
 8000cf4:	6822      	ldr	r2, [r4, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d001      	beq.n	8000cfe <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cfa:	b03a      	add	sp, #232	; 0xe8
 8000cfc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000cfe:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8000d68 <HAL_ADC_MspInit+0x90>
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000d02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d06:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000d08:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000d0c:	9332      	str	r3, [sp, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0e:	f002 f943 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	bb20      	cbnz	r0, 8000d5e <HAL_ADC_MspInit+0x86>
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000d70 <HAL_ADC_MspInit+0x98>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2400      	movs	r4, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d22:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000d2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000d30:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000d34:	9200      	str	r2, [sp, #0]
 8000d36:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000d3c:	f042 0204 	orr.w	r2, r2, #4
 8000d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d48:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f000 fc65 	bl	8001624 <HAL_GPIO_Init>
}
 8000d5a:	b03a      	add	sp, #232	; 0xe8
 8000d5c:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000d5e:	f7ff ffa7 	bl	8000cb0 <Error_Handler>
 8000d62:	e7d7      	b.n	8000d14 <HAL_ADC_MspInit+0x3c>
 8000d64:	f3af 8000 	nop.w
 8000d68:	00008000 	.word	0x00008000
 8000d6c:	00000000 	.word	0x00000000
 8000d70:	00000004 	.word	0x00000004
 8000d74:	00000003 	.word	0x00000003
 8000d78:	42028000 	.word	0x42028000
 8000d7c:	46020c00 	.word	0x46020c00
 8000d80:	42020800 	.word	0x42020800
 8000d84:	00000000 	.word	0x00000000

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	2100      	movs	r1, #0
{
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	b0ba      	sub	sp, #232	; 0xe8
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	22c8      	movs	r2, #200	; 0xc8
 8000d92:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000d98:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000d9c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9e:	f005 fdf5 	bl	800698c <memset>
  if(huart->Instance==USART1)
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <HAL_UART_MspInit+0xa0>)
 8000da4:	6822      	ldr	r2, [r4, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d001      	beq.n	8000dae <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000daa:	b03a      	add	sp, #232	; 0xe8
 8000dac:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dae:	2201      	movs	r2, #1
 8000db0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000db4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db8:	f002 f8ee 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	bb40      	cbnz	r0, 8000e10 <HAL_UART_MspInit+0x88>
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000dbe:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000e18 <HAL_UART_MspInit+0x90>
 8000dc2:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8000e20 <HAL_UART_MspInit+0x98>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc6:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dcc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000dda:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8000dde:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000de2:	9200      	str	r2, [sp, #0]
 8000de4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000dea:	f042 0201 	orr.w	r2, r2, #1
 8000dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000df6:	ed8d 6b02 	vstr	d6, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000e00:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e06:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f000 fc0c 	bl	8001624 <HAL_GPIO_Init>
}
 8000e0c:	b03a      	add	sp, #232	; 0xe8
 8000e0e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000e10:	f7ff ff4e 	bl	8000cb0 <Error_Handler>
 8000e14:	e7d3      	b.n	8000dbe <HAL_UART_MspInit+0x36>
 8000e16:	bf00      	nop
 8000e18:	00000600 	.word	0x00000600
 8000e1c:	00000002 	.word	0x00000002
 8000e20:	00000002 	.word	0x00000002
 8000e24:	00000003 	.word	0x00000003
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	46020c00 	.word	0x46020c00
 8000e30:	42020000 	.word	0x42020000
 8000e34:	00000000 	.word	0x00000000

08000e38 <HAL_SRAM_MspInit>:

static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e38:	2100      	movs	r1, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000e3a:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <HAL_SRAM_MspInit+0xa0>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000e3e:	b088      	sub	sp, #32
  if (FMC_Initialized) {
 8000e40:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e42:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	d13e      	bne.n	8000ec6 <HAL_SRAM_MspInit+0x8e>
  FMC_Initialized = 1;
 8000e48:	2701      	movs	r7, #1
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e4a:	240c      	movs	r4, #12
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e4c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8000ed0 <HAL_SRAM_MspInit+0x98>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e52:	4a22      	ldr	r2, [pc, #136]	; (8000edc <HAL_SRAM_MspInit+0xa4>)
  FMC_Initialized = 1;
 8000e54:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e5a:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <HAL_SRAM_MspInit+0xa8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e5c:	433b      	orrs	r3, r7
 8000e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e66:	a902      	add	r1, sp, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e68:	403b      	ands	r3, r7
 8000e6a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e6c:	ed8d 7b02 	vstr	d7, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e70:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e72:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e76:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e78:	2600      	movs	r6, #0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e7a:	f000 fbd3 	bl	8001624 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e7e:	f64f 7280 	movw	r2, #65408	; 0xff80
 8000e82:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <HAL_SRAM_MspInit+0xac>)
 8000e86:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e90:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e92:	f000 fbc7 	bl	8001624 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e96:	f24c 72b3 	movw	r2, #51123	; 0xc7b3
 8000e9a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <HAL_SRAM_MspInit+0xb0>)
 8000e9e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000ea0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000ea4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eaa:	f000 fbbb 	bl	8001624 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <HAL_SRAM_MspInit+0xb4>)
 8000eb6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eb8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000ebc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec2:	f000 fbaf 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ec6:	b008      	add	sp, #32
 8000ec8:	bdd0      	pop	{r4, r6, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	0000f03f 	.word	0x0000f03f
 8000ed4:	00000002 	.word	0x00000002
 8000ed8:	200012fc 	.word	0x200012fc
 8000edc:	46020c00 	.word	0x46020c00
 8000ee0:	42021400 	.word	0x42021400
 8000ee4:	42021000 	.word	0x42021000
 8000ee8:	42020c00 	.word	0x42020c00
 8000eec:	42021800 	.word	0x42021800

08000ef0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler>
 8000ef2:	bf00      	nop

08000ef4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <HardFault_Handler>
 8000ef6:	bf00      	nop

08000ef8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler>
 8000efa:	bf00      	nop

08000efc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <BusFault_Handler>
 8000efe:	bf00      	nop

08000f00 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler>
 8000f02:	bf00      	nop

08000f04 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <DebugMon_Handler>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <PendSV_Handler>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 b8e0 	b.w	80010d4 <HAL_IncTick>

08000f14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	1e16      	subs	r6, r2, #0
 8000f18:	dd07      	ble.n	8000f2a <_read+0x16>
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000f1e:	e000      	b.n	8000f22 <_read+0xe>
 8000f20:	bf00      	nop
 8000f22:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	42a5      	cmp	r5, r4
 8000f28:	d1f9      	bne.n	8000f1e <_read+0xa>
	}

return len;
}
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	bd70      	pop	{r4, r5, r6, pc}
 8000f2e:	bf00      	nop

08000f30 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000f3c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000f3e:	604b      	str	r3, [r1, #4]
}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000f44:	2001      	movs	r0, #1
 8000f46:	4770      	bx	lr

08000f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000f48:	2000      	movs	r0, #0
 8000f4a:	4770      	bx	lr

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <_sbrk+0x38>)
{
 8000f50:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <_sbrk+0x3c>)
 8000f54:	4c0d      	ldr	r4, [pc, #52]	; (8000f8c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000f56:	6802      	ldr	r2, [r0, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	1b09      	subs	r1, r1, r4
  if (NULL == __sbrk_heap_end)
 8000f5a:	b12a      	cbz	r2, 8000f68 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d808      	bhi.n	8000f74 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f62:	6003      	str	r3, [r0, #0]

  return (void *)prev_heap_end;
}
 8000f64:	4610      	mov	r0, r2
 8000f66:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f68:	4c09      	ldr	r4, [pc, #36]	; (8000f90 <_sbrk+0x44>)
 8000f6a:	4622      	mov	r2, r4
  if (__sbrk_heap_end + incr > max_heap)
 8000f6c:	4413      	add	r3, r2
 8000f6e:	428b      	cmp	r3, r1
    __sbrk_heap_end = &_end;
 8000f70:	6004      	str	r4, [r0, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	d9f6      	bls.n	8000f62 <_sbrk+0x16>
    errno = ENOMEM;
 8000f74:	f005 fce0 	bl	8006938 <__errno>
 8000f78:	230c      	movs	r3, #12
    return (void *)-1;
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8000f7e:	6003      	str	r3, [r0, #0]
}
 8000f80:	4610      	mov	r0, r2
 8000f82:	bd10      	pop	{r4, pc}
 8000f84:	20001300 	.word	0x20001300
 8000f88:	200c0000 	.word	0x200c0000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	20001348 	.word	0x20001348

08000f94 <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f94:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_MSISON;
 8000f96:	2101      	movs	r1, #1
{
 8000f98:	b410      	push	{r4}

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f9a:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <SystemInit+0x44>)
 8000fa0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  RCC->CR = RCC_CR_MSISON;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <SystemInit+0x48>)
 8000fae:	6019      	str	r1, [r3, #0]
  RCC->CFGR1 = 0U;
 8000fb0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000fb2:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 8000fbc:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 8000fc0:	6019      	str	r1, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000fca:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0U;
 8000fcc:	651a      	str	r2, [r3, #80]	; 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fce:	6084      	str	r4, [r0, #8]
  #endif
}
 8000fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	46020c00 	.word	0x46020c00

08000fe0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fe4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fe6:	e003      	b.n	8000ff0 <LoopCopyDataInit>

08000fe8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fee:	3104      	adds	r1, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ff4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ff6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ff8:	d3f6      	bcc.n	8000fe8 <CopyDataInit>
	ldr	r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ffc:	e002      	b.n	8001004 <LoopFillZerobss>

08000ffe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ffe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001000:	f842 3b04 	str.w	r3, [r2], #4

08001004 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <LoopForever+0x16>)
	cmp	r2, r3
 8001006:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001008:	d3f9      	bcc.n	8000ffe <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800100a:	f7ff ffc3 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f005 fc99 	bl	8006944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001012:	f7ff fc2d 	bl	8000870 <main>

08001016 <LoopForever>:

LoopForever:
    b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001018:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800101c:	08007d1c 	.word	0x08007d1c
	ldr	r0, =_sdata
 8001020:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001024:	200000e0 	.word	0x200000e0
	ldr	r2, =_sbss
 8001028:	200000e0 	.word	0x200000e0
	ldr	r3, = _ebss
 800102c:	20001344 	.word	0x20001344

08001030 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_IRQHandler>
	...

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_InitTick+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b90b      	cbnz	r3, 8001040 <HAL_InitTick+0xc>
  {
    return HAL_ERROR;
 800103c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800103e:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001044:	fbb2 f3f3 	udiv	r3, r2, r3
 8001048:	490b      	ldr	r1, [pc, #44]	; (8001078 <HAL_InitTick+0x44>)
 800104a:	4605      	mov	r5, r0
 800104c:	6808      	ldr	r0, [r1, #0]
 800104e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001052:	f000 fa83 	bl	800155c <HAL_SYSTICK_Config>
 8001056:	4604      	mov	r4, r0
 8001058:	2800      	cmp	r0, #0
 800105a:	d1ef      	bne.n	800103c <HAL_InitTick+0x8>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105c:	2d0f      	cmp	r5, #15
 800105e:	d8ed      	bhi.n	800103c <HAL_InitTick+0x8>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	4602      	mov	r2, r0
 8001062:	4629      	mov	r1, r5
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 fa3a 	bl	80014e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_InitTick+0x48>)
 800106e:	4620      	mov	r0, r4
 8001070:	601d      	str	r5, [r3, #0]
}
 8001072:	bd38      	pop	{r3, r4, r5, pc}
 8001074:	20000044 	.word	0x20000044
 8001078:	20000040 	.word	0x20000040
 800107c:	20000048 	.word	0x20000048

08001080 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <HAL_Init+0x44>)
{
 8001082:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001086:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108e:	f000 fa15 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001092:	f000 fd15 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001096:	4603      	mov	r3, r0
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_Init+0x48>)
 800109a:	480c      	ldr	r0, [pc, #48]	; (80010cc <HAL_Init+0x4c>)
 800109c:	6a12      	ldr	r2, [r2, #32]
 800109e:	490c      	ldr	r1, [pc, #48]	; (80010d0 <HAL_Init+0x50>)
 80010a0:	f002 020f 	and.w	r2, r2, #15
 80010a4:	5c82      	ldrb	r2, [r0, r2]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80010a8:	40d3      	lsrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ac:	f7ff ffc2 	bl	8001034 <HAL_InitTick>
 80010b0:	b110      	cbz	r0, 80010b8 <HAL_Init+0x38>
    return HAL_ERROR;
 80010b2:	2401      	movs	r4, #1
}
 80010b4:	4620      	mov	r0, r4
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	4604      	mov	r4, r0
  HAL_MspInit();
 80010ba:	f7ff fdfb 	bl	8000cb4 <HAL_MspInit>
}
 80010be:	4620      	mov	r0, r4
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000
 80010c8:	46020c00 	.word	0x46020c00
 80010cc:	08007ad8 	.word	0x08007ad8
 80010d0:	20000040 	.word	0x20000040

080010d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <HAL_IncTick+0x10>)
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <HAL_IncTick+0x14>)
 80010d8:	6811      	ldr	r1, [r2, #0]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	440b      	add	r3, r1
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20001304 	.word	0x20001304
 80010e8:	20000044 	.word	0x20000044

080010ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010ec:	4b01      	ldr	r3, [pc, #4]	; (80010f4 <HAL_GetTick+0x8>)
 80010ee:	6818      	ldr	r0, [r3, #0]
}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20001304 	.word	0x20001304

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff fff6 	bl	80010ec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001100:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001102:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001104:	d002      	beq.n	800110c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_Delay+0x20>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	1b43      	subs	r3, r0, r5
 8001112:	42a3      	cmp	r3, r4
 8001114:	d3fa      	bcc.n	800110c <HAL_Delay+0x14>
  {
  }
}
 8001116:	bd38      	pop	{r3, r4, r5, pc}
 8001118:	20000044 	.word	0x20000044

0800111c <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800111c:	2800      	cmp	r0, #0
 800111e:	f000 80a4 	beq.w	800126a <HAL_ADC_Init+0x14e>
{
 8001122:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001124:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8001126:	4604      	mov	r4, r0
{
 8001128:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 800112a:	2d00      	cmp	r5, #0
 800112c:	f000 8086 	beq.w	800123c <HAL_ADC_Init+0x120>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001130:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001132:	6893      	ldr	r3, [r2, #8]
 8001134:	0098      	lsls	r0, r3, #2
 8001136:	d505      	bpl.n	8001144 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001138:	6893      	ldr	r3, [r2, #8]
 800113a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800113e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001142:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001144:	6893      	ldr	r3, [r2, #8]
 8001146:	00d9      	lsls	r1, r3, #3
 8001148:	d419      	bmi.n	800117e <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800114a:	4b61      	ldr	r3, [pc, #388]	; (80012d0 <HAL_ADC_Init+0x1b4>)
 800114c:	4861      	ldr	r0, [pc, #388]	; (80012d4 <HAL_ADC_Init+0x1b8>)
 800114e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001150:	6891      	ldr	r1, [r2, #8]
 8001152:	099b      	lsrs	r3, r3, #6
 8001154:	fba0 0303 	umull	r0, r3, r0, r3
 8001158:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 800115c:	099b      	lsrs	r3, r3, #6
 800115e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001162:	3301      	adds	r3, #1
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800116a:	6091      	str	r1, [r2, #8]
 800116c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800116e:	9b01      	ldr	r3, [sp, #4]
 8001170:	b12b      	cbz	r3, 800117e <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8001172:	9b01      	ldr	r3, [sp, #4]
 8001174:	3b01      	subs	r3, #1
 8001176:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001178:	9b01      	ldr	r3, [sp, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800117e:	6893      	ldr	r3, [r2, #8]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	d44e      	bmi.n	8001222 <HAL_ADC_Init+0x106>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    tmp_hal_status = HAL_ERROR;
 8001184:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001186:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	67a3      	str	r3, [r4, #120]	; 0x78
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001190:	4303      	orrs	r3, r0
 8001192:	67e3      	str	r3, [r4, #124]	; 0x7c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001194:	6893      	ldr	r3, [r2, #8]
 8001196:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800119a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800119c:	d147      	bne.n	800122e <HAL_ADC_Init+0x112>
 800119e:	06df      	lsls	r7, r3, #27
 80011a0:	d445      	bmi.n	800122e <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80011a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	67a3      	str	r3, [r4, #120]	; 0x78
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011ae:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011b0:	f013 0f01 	tst.w	r3, #1
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80011b4:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <HAL_ADC_Init+0x1bc>)
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011b6:	d047      	beq.n	8001248 <HAL_ADC_Init+0x12c>
        MODIFY_REG(ADC4_COMMON->CCR,
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f000 80af 	beq.w	800131c <HAL_ADC_Init+0x200>
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
                    hadc->Init.Overrun                                                    |
 80011be:	68a5      	ldr	r5, [r4, #8]
 80011c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
                    hadc->Init.Resolution                                                 |
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011c2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                    hadc->Init.Overrun                                                    |
 80011c6:	432b      	orrs	r3, r5
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80011c8:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
                   hadc->Init.DataAlign                                            |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011cc:	2901      	cmp	r1, #1
                    hadc->Init.Overrun                                                    |
 80011ce:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80011d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d6:	f000 8134 	beq.w	8001442 <HAL_ADC_Init+0x326>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80011da:	6925      	ldr	r5, [r4, #16]
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80011dc:	493e      	ldr	r1, [pc, #248]	; (80012d8 <HAL_ADC_Init+0x1bc>)
 80011de:	428a      	cmp	r2, r1
 80011e0:	f000 80c3 	beq.w	800136a <HAL_ADC_Init+0x24e>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011e6:	b121      	cbz	r1, 80011f2 <HAL_ADC_Init+0xd6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80011e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80011ea:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
 80011ee:	4331      	orrs	r1, r6
 80011f0:	430b      	orrs	r3, r1
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80011f2:	68d6      	ldr	r6, [r2, #12]
 80011f4:	4939      	ldr	r1, [pc, #228]	; (80012dc <HAL_ADC_Init+0x1c0>)
 80011f6:	4031      	ands	r1, r6
 80011f8:	430b      	orrs	r3, r1
 80011fa:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011fc:	6893      	ldr	r3, [r2, #8]
 80011fe:	0759      	lsls	r1, r3, #29
 8001200:	d535      	bpl.n	800126e <HAL_ADC_Init+0x152>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001202:	6893      	ldr	r3, [r2, #8]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001204:	2d01      	cmp	r5, #1
 8001206:	f000 8122 	beq.w	800144e <HAL_ADC_Init+0x332>
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800120a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800120c:	f023 030f 	bic.w	r3, r3, #15
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001212:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001214:	f023 0303 	bic.w	r3, r3, #3
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	67a3      	str	r3, [r4, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 800121e:	b003      	add	sp, #12
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001222:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2000      	movs	r0, #0
 8001226:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800122a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800122c:	d0b7      	beq.n	800119e <HAL_ADC_Init+0x82>
    tmp_hal_status = HAL_ERROR;
 800122e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001230:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8001238:	b003      	add	sp, #12
 800123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800123c:	f7ff fd4c 	bl	8000cd8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001240:	67e5      	str	r5, [r4, #124]	; 0x7c
    hadc->Lock = HAL_UNLOCKED;
 8001242:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
 8001246:	e773      	b.n	8001130 <HAL_ADC_Init+0x14>
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001248:	429a      	cmp	r2, r3
 800124a:	d04d      	beq.n	80012e8 <HAL_ADC_Init+0x1cc>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800124c:	4924      	ldr	r1, [pc, #144]	; (80012e0 <HAL_ADC_Init+0x1c4>)
 800124e:	428a      	cmp	r2, r1
 8001250:	f000 8105 	beq.w	800145e <HAL_ADC_Init+0x342>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	07dd      	lsls	r5, r3, #31
 8001258:	d4b1      	bmi.n	80011be <HAL_ADC_Init+0xa2>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800125a:	4922      	ldr	r1, [pc, #136]	; (80012e4 <HAL_ADC_Init+0x1c8>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800125c:	680b      	ldr	r3, [r1, #0]
 800125e:	6865      	ldr	r5, [r4, #4]
 8001260:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001264:	432b      	orrs	r3, r5
 8001266:	600b      	str	r3, [r1, #0]
}
 8001268:	e7a9      	b.n	80011be <HAL_ADC_Init+0xa2>
    return HAL_ERROR;
 800126a:	2001      	movs	r0, #1
}
 800126c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800126e:	6893      	ldr	r3, [r2, #8]
 8001270:	071b      	lsls	r3, r3, #28
 8001272:	d4c7      	bmi.n	8001204 <HAL_ADC_Init+0xe8>
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001274:	7f23      	ldrb	r3, [r4, #28]
 8001276:	0399      	lsls	r1, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_ADC_Init+0x1c4>)
 800127a:	429a      	cmp	r2, r3
 800127c:	bf16      	itet	ne
 800127e:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8001280:	6be6      	ldreq	r6, [r4, #60]	; 0x3c
 8001282:	005e      	lslne	r6, r3, #1
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001284:	68d3      	ldr	r3, [r2, #12]
 8001286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800128a:	f023 0303 	bic.w	r3, r3, #3
 800128e:	430b      	orrs	r3, r1
        if (hadc->Init.GainCompensation != 0UL)
 8001290:	68e1      	ldr	r1, [r4, #12]
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001292:	4333      	orrs	r3, r6
 8001294:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001296:	b151      	cbz	r1, 80012ae <HAL_ADC_Init+0x192>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001298:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800129a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800129e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a2:	430b      	orrs	r3, r1
 80012a4:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80012a6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80012a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012ac:	6713      	str	r3, [r2, #112]	; 0x70
        if (hadc->Init.OversamplingMode == ENABLE)
 80012ae:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	f000 80dc 	beq.w	8001470 <HAL_ADC_Init+0x354>
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012b8:	6913      	ldr	r3, [r2, #16]
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80012c0:	6913      	ldr	r3, [r2, #16]
 80012c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80012c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012c8:	430b      	orrs	r3, r1
 80012ca:	6113      	str	r3, [r2, #16]
 80012cc:	e79a      	b.n	8001204 <HAL_ADC_Init+0xe8>
 80012ce:	bf00      	nop
 80012d0:	20000040 	.word	0x20000040
 80012d4:	053e2d63 	.word	0x053e2d63
 80012d8:	46021000 	.word	0x46021000
 80012dc:	fff0c013 	.word	0xfff0c013
 80012e0:	42028000 	.word	0x42028000
 80012e4:	46021308 	.word	0x46021308
        MODIFY_REG(hadc->Instance->CFGR1,
 80012e8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80012ec:	68a1      	ldr	r1, [r4, #8]
 80012ee:	68d3      	ldr	r3, [r2, #12]
 80012f0:	42a9      	cmp	r1, r5
 80012f2:	bf0e      	itee	eq
 80012f4:	210c      	moveq	r1, #12
 80012f6:	f101 31ff 	addne.w	r1, r1, #4294967295
 80012fa:	f001 010c 	andne.w	r1, r1, #12
 80012fe:	f023 030c 	bic.w	r3, r3, #12
 8001302:	430b      	orrs	r3, r1
 8001304:	4968      	ldr	r1, [pc, #416]	; (80014a8 <HAL_ADC_Init+0x38c>)
 8001306:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(ADC4_COMMON->CCR,
 8001308:	f8d1 5308 	ldr.w	r5, [r1, #776]	; 0x308
 800130c:	6863      	ldr	r3, [r4, #4]
 800130e:	f425 1570 	bic.w	r5, r5, #3932160	; 0x3c0000
 8001312:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001316:	432b      	orrs	r3, r5
 8001318:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800131c:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001320:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001322:	7f27      	ldrb	r7, [r4, #28]
 8001324:	6965      	ldr	r5, [r4, #20]
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001326:	0373      	lsls	r3, r6, #13
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001328:	2900      	cmp	r1, #0
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800132a:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800132e:	bf18      	it	ne
 8001330:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8001334:	432b      	orrs	r3, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001336:	6925      	ldr	r5, [r4, #16]
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001338:	f894 7040 	ldrb.w	r7, [r4, #64]	; 0x40
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800133c:	2d00      	cmp	r5, #0
 800133e:	bfa8      	it	ge
 8001340:	f44f 1c00 	movge.w	ip, #2097152	; 0x200000
 8001344:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8001348:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800134c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001350:	bfb8      	it	lt
 8001352:	f025 4c00 	biclt.w	ip, r5, #2147483648	; 0x80000000
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001356:	2901      	cmp	r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001358:	ea43 030c 	orr.w	r3, r3, ip
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800135c:	f47f af3e 	bne.w	80011dc <HAL_ADC_Init+0xc0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001360:	2e00      	cmp	r6, #0
 8001362:	f040 8098 	bne.w	8001496 <HAL_ADC_Init+0x37a>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800136c:	b122      	cbz	r2, 8001378 <HAL_ADC_Init+0x25c>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800136e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001370:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
 8001374:	430a      	orrs	r2, r1
 8001376:	4313      	orrs	r3, r2
      MODIFY_REG(hadc->Instance->CFGR1,
 8001378:	494b      	ldr	r1, [pc, #300]	; (80014a8 <HAL_ADC_Init+0x38c>)
 800137a:	68ca      	ldr	r2, [r1, #12]
 800137c:	f422 32bf 	bic.w	r2, r2, #97792	; 0x17e00
 8001380:	f422 72f9 	bic.w	r2, r2, #498	; 0x1f2
 8001384:	431a      	orrs	r2, r3
 8001386:	60ca      	str	r2, [r1, #12]
      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001388:	6a22      	ldr	r2, [r4, #32]
 800138a:	b112      	cbz	r2, 8001392 <HAL_ADC_Init+0x276>
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 800138c:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 800138e:	4332      	orrs	r2, r6
 8001390:	644a      	str	r2, [r1, #68]	; 0x44
      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001392:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001394:	b11a      	cbz	r2, 800139e <HAL_ADC_Init+0x282>
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8001396:	4944      	ldr	r1, [pc, #272]	; (80014a8 <HAL_ADC_Init+0x38c>)
 8001398:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 800139a:	4332      	orrs	r2, r6
 800139c:	644a      	str	r2, [r1, #68]	; 0x44
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800139e:	e9d4 2116 	ldrd	r2, r1, [r4, #88]	; 0x58
 80013a2:	430a      	orrs	r2, r1
                   hadc->Init.Oversampling.RightBitShift |
 80013a4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80013a6:	430a      	orrs	r2, r1
                   hadc->Init.Oversampling.TriggeredMode |
 80013a8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80013aa:	430a      	orrs	r2, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 80013ac:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 80013b0:	2901      	cmp	r1, #1
 80013b2:	d043      	beq.n	800143c <HAL_ADC_Init+0x320>
      MODIFY_REG(hadc->Instance->CFGR2,
 80013b4:	493c      	ldr	r1, [pc, #240]	; (80014a8 <HAL_ADC_Init+0x38c>)
 80013b6:	4e3d      	ldr	r6, [pc, #244]	; (80014ac <HAL_ADC_Init+0x390>)
 80013b8:	690f      	ldr	r7, [r1, #16]
 80013ba:	403e      	ands	r6, r7
 80013bc:	4332      	orrs	r2, r6
 80013be:	610a      	str	r2, [r1, #16]
  MODIFY_REG(ADCx->SMPR1,
 80013c0:	694a      	ldr	r2, [r1, #20]
 80013c2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80013c4:	f022 0207 	bic.w	r2, r2, #7
 80013c8:	4332      	orrs	r2, r6
 80013ca:	614a      	str	r2, [r1, #20]
 80013cc:	694a      	ldr	r2, [r1, #20]
 80013ce:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 80013d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013d4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 80013d8:	614a      	str	r2, [r1, #20]
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80013da:	b1d5      	cbz	r5, 8001412 <HAL_ADC_Init+0x2f6>
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80013dc:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80013e0:	d11b      	bne.n	800141a <HAL_ADC_Init+0x2fe>
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80013e2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80013e6:	f005 020f 	and.w	r2, r5, #15
 80013ea:	2a0f      	cmp	r2, #15
 80013ec:	d003      	beq.n	80013f6 <HAL_ADC_Init+0x2da>
 80013ee:	f3c5 1203 	ubfx	r2, r5, #4, #4
 80013f2:	2a0f      	cmp	r2, #15
 80013f4:	d00d      	beq.n	8001412 <HAL_ADC_Init+0x2f6>
          MODIFY_REG(hadc->Instance->CHSELR,
 80013f6:	f06f 010f 	mvn.w	r1, #15
 80013fa:	4e2b      	ldr	r6, [pc, #172]	; (80014a8 <HAL_ADC_Init+0x38c>)
 80013fc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80013fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001400:	3a01      	subs	r2, #1
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	f002 021c 	and.w	r2, r2, #28
 8001408:	fa01 f202 	lsl.w	r2, r1, r2
 800140c:	4315      	orrs	r5, r2
 800140e:	62b5      	str	r5, [r6, #40]	; 0x28
 8001410:	e003      	b.n	800141a <HAL_ADC_Init+0x2fe>
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001412:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001414:	f062 020f 	orn	r2, r2, #15
 8001418:	628a      	str	r2, [r1, #40]	; 0x28
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800141a:	4923      	ldr	r1, [pc, #140]	; (80014a8 <HAL_ADC_Init+0x38c>)
 800141c:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <HAL_ADC_Init+0x394>)
 800141e:	68c9      	ldr	r1, [r1, #12]
 8001420:	400a      	ands	r2, r1
 8001422:	429a      	cmp	r2, r3
 8001424:	d021      	beq.n	800146a <HAL_ADC_Init+0x34e>
        tmp_hal_status = HAL_ERROR;
 8001426:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001428:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800142a:	f023 0312 	bic.w	r3, r3, #18
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	67a3      	str	r3, [r4, #120]	; 0x78
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001434:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001436:	4303      	orrs	r3, r0
 8001438:	67e3      	str	r3, [r4, #124]	; 0x7c
        tmp_hal_status = HAL_ERROR;
 800143a:	e6fd      	b.n	8001238 <HAL_ADC_Init+0x11c>
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	e7b8      	b.n	80013b4 <HAL_ADC_Init+0x298>
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001442:	6b21      	ldr	r1, [r4, #48]	; 0x30
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001444:	6925      	ldr	r5, [r4, #16]
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001446:	3901      	subs	r1, #1
 8001448:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800144c:	e6ca      	b.n	80011e4 <HAL_ADC_Init+0xc8>
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800144e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001452:	f021 010f 	bic.w	r1, r1, #15
 8001456:	3b01      	subs	r3, #1
 8001458:	430b      	orrs	r3, r1
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	e6d9      	b.n	8001212 <HAL_ADC_Init+0xf6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800145e:	6893      	ldr	r3, [r2, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001460:	07de      	lsls	r6, r3, #31
 8001462:	f53f aeac 	bmi.w	80011be <HAL_ADC_Init+0xa2>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001466:	4913      	ldr	r1, [pc, #76]	; (80014b4 <HAL_ADC_Init+0x398>)
 8001468:	e6f8      	b.n	800125c <HAL_ADC_Init+0x140>
        ADC_CLEAR_ERRORCODE(hadc);
 800146a:	2300      	movs	r3, #0
 800146c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800146e:	e6d0      	b.n	8001212 <HAL_ADC_Init+0xf6>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001470:	e9d4 3117 	ldrd	r3, r1, [r4, #92]	; 0x5c
 8001474:	6916      	ldr	r6, [r2, #16]
 8001476:	430b      	orrs	r3, r1
 8001478:	490f      	ldr	r1, [pc, #60]	; (80014b8 <HAL_ADC_Init+0x39c>)
 800147a:	4031      	ands	r1, r6
 800147c:	430b      	orrs	r3, r1
 800147e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001480:	430b      	orrs	r3, r1
 8001482:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001484:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001488:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800148a:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6113      	str	r3, [r2, #16]
 8001494:	e714      	b.n	80012c0 <HAL_ADC_Init+0x1a4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001496:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001498:	f042 0220 	orr.w	r2, r2, #32
 800149c:	67a2      	str	r2, [r4, #120]	; 0x78
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80014a0:	f042 0201 	orr.w	r2, r2, #1
 80014a4:	67e2      	str	r2, [r4, #124]	; 0x7c
 80014a6:	e760      	b.n	800136a <HAL_ADC_Init+0x24e>
 80014a8:	46021000 	.word	0x46021000
 80014ac:	f7fffc02 	.word	0xf7fffc02
 80014b0:	833ffff3 	.word	0x833ffff3
 80014b4:	42028308 	.word	0x42028308
 80014b8:	fc00f81e 	.word	0xfc00f81e

080014bc <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014bc:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4906      	ldr	r1, [pc, #24]	; (80014dc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80014d8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b500      	push	{lr}
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ea:	f1c3 0e07 	rsb	lr, r3, #7
 80014ee:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f6:	bf28      	it	cs
 80014f8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fc:	f1bc 0f06 	cmp.w	ip, #6
 8001500:	d91b      	bls.n	800153a <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001502:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	fa0c fc03 	lsl.w	ip, ip, r3
 800150c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 3cff 	mov.w	ip, #4294967295
 8001514:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001518:	ea21 010c 	bic.w	r1, r1, ip
 800151c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800151e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001524:	db0c      	blt.n	8001540 <HAL_NVIC_SetPriority+0x60>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	0109      	lsls	r1, r1, #4
 8001528:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800152c:	b2c9      	uxtb	r1, r1
 800152e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001532:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001536:	f85d fb04 	ldr.w	pc, [sp], #4
 800153a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153c:	4613      	mov	r3, r2
 800153e:	e7e7      	b.n	8001510 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_NVIC_SetPriority+0x78>)
 8001542:	f000 000f 	and.w	r0, r0, #15
 8001546:	0109      	lsls	r1, r1, #4
 8001548:	b2c9      	uxtb	r1, r1
 800154a:	4403      	add	r3, r0
 800154c:	7619      	strb	r1, [r3, #24]
 800154e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00
 8001558:	e000ecfc 	.word	0xe000ecfc

0800155c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	3801      	subs	r0, #1
 800155e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001562:	d210      	bcs.n	8001586 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001564:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001570:	b410      	push	{r4}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	4c06      	ldr	r4, [pc, #24]	; (800158c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001574:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	619a      	str	r2, [r3, #24]
  return SysTick_Config(TicksNumb);
}
 800157e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	6119      	str	r1, [r3, #16]
 8001584:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2001      	movs	r0, #1
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <HAL_DCACHE_MspInit>:
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_MspInit can be implemented in the user file
   */
}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop

08001594 <HAL_DCACHE_ErrorCallback>:
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop

08001598 <HAL_DCACHE_CleanByAddrCallback>:
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop

0800159c <HAL_DCACHE_InvalidateByAddrCallback>:
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop

080015a0 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop

080015a4 <HAL_DCACHE_InvalidateCompleteCallback>:
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <HAL_DCACHE_Init>:
  if (hdcache == NULL)
 80015a8:	b350      	cbz	r0, 8001600 <HAL_DCACHE_Init+0x58>
{
 80015aa:	b510      	push	{r4, lr}
  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80015ac:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80015b0:	4604      	mov	r4, r0
 80015b2:	b96b      	cbnz	r3, 80015d0 <HAL_DCACHE_Init+0x28>
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80015b4:	4a15      	ldr	r2, [pc, #84]	; (800160c <HAL_DCACHE_Init+0x64>)
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_DCACHE_Init+0x68>)
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80015b8:	4816      	ldr	r0, [pc, #88]	; (8001614 <HAL_DCACHE_Init+0x6c>)
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80015ba:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80015be:	4916      	ldr	r1, [pc, #88]	; (8001618 <HAL_DCACHE_Init+0x70>)
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80015c0:	4a16      	ldr	r2, [pc, #88]	; (800161c <HAL_DCACHE_Init+0x74>)
    if (hdcache->MspInitCallback == NULL)
 80015c2:	69e3      	ldr	r3, [r4, #28]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80015c4:	e9c4 0104 	strd	r0, r1, [r4, #16]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80015c8:	61a2      	str	r2, [r4, #24]
    if (hdcache->MspInitCallback == NULL)
 80015ca:	b1db      	cbz	r3, 8001604 <HAL_DCACHE_Init+0x5c>
    hdcache->MspInitCallback(hdcache);
 80015cc:	4620      	mov	r0, r4
 80015ce:	4798      	blx	r3
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80015d0:	e9d4 2100 	ldrd	r2, r1, [r4]
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80015d4:	2000      	movs	r0, #0
  hdcache->State = HAL_DCACHE_STATE_READY;
 80015d6:	2301      	movs	r3, #1
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80015d8:	62a0      	str	r0, [r4, #40]	; 0x28
  hdcache->State = HAL_DCACHE_STATE_READY;
 80015da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6013      	str	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 80015e8:	6850      	ldr	r0, [r2, #4]
 80015ea:	f010 0009 	ands.w	r0, r0, #9
 80015ee:	d105      	bne.n	80015fc <HAL_DCACHE_Init+0x54>
    status =  HAL_BUSY;
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80015f0:	62a0      	str	r0, [r4, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 80015f2:	6813      	ldr	r3, [r2, #0]
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6013      	str	r3, [r2, #0]
}
 80015fa:	bd10      	pop	{r4, pc}
    status =  HAL_BUSY;
 80015fc:	2002      	movs	r0, #2
}
 80015fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001600:	2001      	movs	r0, #1
}
 8001602:	4770      	bx	lr
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_DCACHE_Init+0x78>)
 8001606:	4613      	mov	r3, r2
 8001608:	61e2      	str	r2, [r4, #28]
 800160a:	e7df      	b.n	80015cc <HAL_DCACHE_Init+0x24>
 800160c:	08001595 	.word	0x08001595
 8001610:	08001599 	.word	0x08001599
 8001614:	0800159d 	.word	0x0800159d
 8001618:	080015a5 	.word	0x080015a5
 800161c:	080015a1 	.word	0x080015a1
 8001620:	08001591 	.word	0x08001591

08001624 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Save GPIO port address */
  p_gpio = GPIOx;

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001628:	680c      	ldr	r4, [r1, #0]
{
 800162a:	b083      	sub	sp, #12
 800162c:	9000      	str	r0, [sp, #0]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800162e:	2c00      	cmp	r4, #0
 8001630:	f000 80ee 	beq.w	8001810 <HAL_GPIO_Init+0x1ec>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001634:	f04f 0c00 	mov.w	ip, #0
 8001638:	4b77      	ldr	r3, [pc, #476]	; (8001818 <HAL_GPIO_Init+0x1f4>)
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800163a:	f04f 0b01 	mov.w	fp, #1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800163e:	ea03 2390 	and.w	r3, r3, r0, lsr #10
 8001642:	9301      	str	r3, [sp, #4]
  uint32_t position = 0U;
 8001644:	4688      	mov	r8, r1
 8001646:	4663      	mov	r3, ip
 8001648:	e069      	b.n	800171e <HAL_GPIO_Init+0xfa>
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800164e:	f022 0e10 	bic.w	lr, r2, #16
 8001652:	f1be 0f02 	cmp.w	lr, #2
 8001656:	f000 80a1 	beq.w	800179c <HAL_GPIO_Init+0x178>
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800165a:	2103      	movs	r1, #3
        p_gpio->MODER = tmp;
 800165c:	46e1      	mov	r9, ip
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800165e:	fa01 f70c 	lsl.w	r7, r1, ip
        p_gpio->MODER = tmp;
 8001662:	4619      	mov	r1, r3
        tmp = p_gpio->MODER;
 8001664:	6805      	ldr	r5, [r0, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001666:	43fe      	mvns	r6, r7
 8001668:	ea25 0507 	bic.w	r5, r5, r7
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800166c:	f002 0703 	and.w	r7, r2, #3
 8001670:	fa07 f70c 	lsl.w	r7, r7, ip
 8001674:	432f      	orrs	r7, r5
        p_gpio->MODER = tmp;
 8001676:	6007      	str	r7, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001678:	f10e 3eff 	add.w	lr, lr, #4294967295
 800167c:	f1be 0f01 	cmp.w	lr, #1
 8001680:	f240 80af 	bls.w	80017e2 <HAL_GPIO_Init+0x1be>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001684:	2a03      	cmp	r2, #3
 8001686:	d044      	beq.n	8001712 <HAL_GPIO_Init+0xee>
        tmp = p_gpio->PUPDR;
 8001688:	68c7      	ldr	r7, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800168a:	403e      	ands	r6, r7
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800168c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8001690:	fa07 f709 	lsl.w	r7, r7, r9
 8001694:	4337      	orrs	r7, r6
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001696:	00d6      	lsls	r6, r2, #3
        p_gpio->PUPDR = tmp;
 8001698:	60c7      	str	r7, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169a:	d53a      	bpl.n	8001712 <HAL_GPIO_Init+0xee>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800169c:	250f      	movs	r5, #15
 800169e:	f023 0603 	bic.w	r6, r3, #3
 80016a2:	f106 468c 	add.w	r6, r6, #1174405120	; 0x46000000
 80016a6:	f003 0103 	and.w	r1, r3, #3
 80016aa:	f506 3608 	add.w	r6, r6, #139264	; 0x22000
 80016ae:	00c9      	lsls	r1, r1, #3
        tmp = EXTI->EXTICR[position >> 2U];
 80016b0:	6e37      	ldr	r7, [r6, #96]	; 0x60
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80016b2:	fa05 fe01 	lsl.w	lr, r5, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80016b6:	9d01      	ldr	r5, [sp, #4]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80016b8:	ea27 070e 	bic.w	r7, r7, lr
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80016bc:	fa05 f101 	lsl.w	r1, r5, r1
 80016c0:	4339      	orrs	r1, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 80016c2:	6631      	str	r1, [r6, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
        tmp &= ~((uint32_t)iocurrent);
 80016c4:	ea6f 060a 	mvn.w	r6, sl
        tmp = EXTI->RTSR1;
 80016c8:	4954      	ldr	r1, [pc, #336]	; (800181c <HAL_GPIO_Init+0x1f8>)
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ca:	02d5      	lsls	r5, r2, #11
        tmp = EXTI->RTSR1;
 80016cc:	6809      	ldr	r1, [r1, #0]
        {
          tmp |= iocurrent;
        }
        EXTI->RTSR1 = tmp;
 80016ce:	4d53      	ldr	r5, [pc, #332]	; (800181c <HAL_GPIO_Init+0x1f8>)
        tmp &= ~((uint32_t)iocurrent);
 80016d0:	bf54      	ite	pl
 80016d2:	4031      	andpl	r1, r6
          tmp |= iocurrent;
 80016d4:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->RTSR1 = tmp;
 80016d8:	6029      	str	r1, [r5, #0]

        tmp = EXTI->FTSR1;
 80016da:	6869      	ldr	r1, [r5, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016dc:	0297      	lsls	r7, r2, #10
        {
          tmp |= iocurrent;
        }
        EXTI->FTSR1 = tmp;
 80016de:	4d4f      	ldr	r5, [pc, #316]	; (800181c <HAL_GPIO_Init+0x1f8>)
        tmp &= ~((uint32_t)iocurrent);
 80016e0:	bf54      	ite	pl
 80016e2:	4031      	andpl	r1, r6
          tmp |= iocurrent;
 80016e4:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->FTSR1 = tmp;
 80016e8:	6069      	str	r1, [r5, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80016ea:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ee:	0395      	lsls	r5, r2, #14
        {
          tmp |= iocurrent;
        }
        EXTI->EMR1 = tmp;
 80016f0:	4d4a      	ldr	r5, [pc, #296]	; (800181c <HAL_GPIO_Init+0x1f8>)
        tmp &= ~((uint32_t)iocurrent);
 80016f2:	bf54      	ite	pl
 80016f4:	4031      	andpl	r1, r6
          tmp |= iocurrent;
 80016f6:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->EMR1 = tmp;
 80016fa:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84

        tmp = EXTI->IMR1;
 80016fe:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001702:	03d2      	lsls	r2, r2, #15
        {
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
 8001704:	4a45      	ldr	r2, [pc, #276]	; (800181c <HAL_GPIO_Init+0x1f8>)
        tmp &= ~((uint32_t)iocurrent);
 8001706:	bf54      	ite	pl
 8001708:	4031      	andpl	r1, r6
          tmp |= iocurrent;
 800170a:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->IMR1 = tmp;
 800170e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      }
    }
    position++;
 8001712:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001714:	fa34 f203 	lsrs.w	r2, r4, r3
 8001718:	f10c 0c02 	add.w	ip, ip, #2
 800171c:	d078      	beq.n	8001810 <HAL_GPIO_Init+0x1ec>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800171e:	fa0b f103 	lsl.w	r1, fp, r3
    if (iocurrent != 0U)
 8001722:	ea11 0a04 	ands.w	sl, r1, r4
 8001726:	d0f4      	beq.n	8001712 <HAL_GPIO_Init+0xee>
      if (GPIOx == LPGPIO1)
 8001728:	9a00      	ldr	r2, [sp, #0]
 800172a:	4e3d      	ldr	r6, [pc, #244]	; (8001820 <HAL_GPIO_Init+0x1fc>)
 800172c:	42b2      	cmp	r2, r6
 800172e:	d18c      	bne.n	800164a <HAL_GPIO_Init+0x26>
        tmp = GPIOx->MODER;
 8001730:	4615      	mov	r5, r2
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001732:	f8d8 2004 	ldr.w	r2, [r8, #4]
        tmp = GPIOx->MODER;
 8001736:	682e      	ldr	r6, [r5, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001738:	f002 0001 	and.w	r0, r2, #1
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800173c:	ea26 0601 	bic.w	r6, r6, r1
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001740:	4098      	lsls	r0, r3
 8001742:	4330      	orrs	r0, r6
        GPIOx->MODER = tmp;
 8001744:	6028      	str	r0, [r5, #0]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001746:	250f      	movs	r5, #15
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001748:	4f36      	ldr	r7, [pc, #216]	; (8001824 <HAL_GPIO_Init+0x200>)
 800174a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 800174e:	6849      	ldr	r1, [r1, #4]
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001750:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001754:	f001 0607 	and.w	r6, r1, #7
 8001758:	00b6      	lsls	r6, r6, #2
 800175a:	fa05 f906 	lsl.w	r9, r5, r6
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800175e:	250b      	movs	r5, #11
 8001760:	fa05 f606 	lsl.w	r6, r5, r6
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001764:	2503      	movs	r5, #3
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001766:	08cf      	lsrs	r7, r1, #3
 8001768:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800176c:	f8d7 e020 	ldr.w	lr, [r7, #32]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001770:	ea2e 0e09 	bic.w	lr, lr, r9
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001774:	ea46 060e 	orr.w	r6, r6, lr
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001778:	ea4f 0941 	mov.w	r9, r1, lsl #1
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800177c:	623e      	str	r6, [r7, #32]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800177e:	fa05 f609 	lsl.w	r6, r5, r9
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001782:	2502      	movs	r5, #2
        tmp = p_gpio->MODER;
 8001784:	6807      	ldr	r7, [r0, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001786:	ea27 0e06 	bic.w	lr, r7, r6
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800178a:	fa05 f709 	lsl.w	r7, r5, r9
 800178e:	ea47 070e 	orr.w	r7, r7, lr
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001792:	43f6      	mvns	r6, r6
        p_gpio->MODER = tmp;
 8001794:	6007      	str	r7, [r0, #0]
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001796:	f022 0e10 	bic.w	lr, r2, #16
 800179a:	e76d      	b.n	8001678 <HAL_GPIO_Init+0x54>
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800179c:	250f      	movs	r5, #15
 800179e:	9900      	ldr	r1, [sp, #0]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80017a0:	f8d8 6010 	ldr.w	r6, [r8, #16]
        tmp = GPIOx->AFR[position >> 3U];
 80017a4:	08df      	lsrs	r7, r3, #3
 80017a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80017aa:	f003 0107 	and.w	r1, r3, #7
        tmp = GPIOx->AFR[position >> 3U];
 80017ae:	f8d7 e020 	ldr.w	lr, [r7, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80017b2:	0089      	lsls	r1, r1, #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80017b4:	f006 060f 	and.w	r6, r6, #15
 80017b8:	408e      	lsls	r6, r1
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80017ba:	fa05 f101 	lsl.w	r1, r5, r1
 80017be:	ea2e 0101 	bic.w	r1, lr, r1
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80017c2:	430e      	orrs	r6, r1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80017c4:	2103      	movs	r1, #3
        GPIOx->AFR[position >> 3U] = tmp;
 80017c6:	623e      	str	r6, [r7, #32]
        tmp = p_gpio->MODER;
 80017c8:	6807      	ldr	r7, [r0, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80017ca:	fa01 f60c 	lsl.w	r6, r1, ip
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80017ce:	4011      	ands	r1, r2
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80017d0:	ea27 0706 	bic.w	r7, r7, r6
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80017d4:	fa01 f10c 	lsl.w	r1, r1, ip
 80017d8:	4339      	orrs	r1, r7
        p_gpio->MODER = tmp;
 80017da:	6001      	str	r1, [r0, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80017dc:	43f6      	mvns	r6, r6
        p_gpio->MODER = tmp;
 80017de:	46e1      	mov	r9, ip
 80017e0:	4619      	mov	r1, r3
        tmp = p_gpio->OSPEEDR;
 80017e2:	6887      	ldr	r7, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80017e4:	ea07 0e06 	and.w	lr, r7, r6
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80017e8:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80017ec:	fa07 f709 	lsl.w	r7, r7, r9
 80017f0:	ea47 070e 	orr.w	r7, r7, lr
        p_gpio->OSPEEDR = tmp;
 80017f4:	6087      	str	r7, [r0, #8]
        tmp = p_gpio->OTYPER;
 80017f6:	6847      	ldr	r7, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80017f8:	fa0b fe01 	lsl.w	lr, fp, r1
 80017fc:	ea27 0e0e 	bic.w	lr, r7, lr
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001800:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001804:	fa07 f101 	lsl.w	r1, r7, r1
 8001808:	ea41 010e 	orr.w	r1, r1, lr
        p_gpio->OTYPER = tmp;
 800180c:	6041      	str	r1, [r0, #4]
 800180e:	e739      	b.n	8001684 <HAL_GPIO_Init+0x60>
  }
}
 8001810:	b003      	add	sp, #12
 8001812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001816:	bf00      	nop
 8001818:	002f7f7f 	.word	0x002f7f7f
 800181c:	46022000 	.word	0x46022000
 8001820:	46020000 	.word	0x46020000
 8001824:	08007b30 	.word	0x08007b30

08001828 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001828:	b10a      	cbz	r2, 800182e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182a:	6181      	str	r1, [r0, #24]
 800182c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800182e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop

08001834 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8001836:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001838:	6813      	ldr	r3, [r2, #0]
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40030400 	.word	0x40030400

08001848 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8001848:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800184a:	2302      	movs	r3, #2
 800184c:	4c0d      	ldr	r4, [pc, #52]	; (8001884 <HAL_ICACHE_Disable+0x3c>)
 800184e:	60e3      	str	r3, [r4, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001858:	f7ff fc48 	bl	80010ec <HAL_GetTick>

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	07d9      	lsls	r1, r3, #31
 8001860:	d50b      	bpl.n	800187a <HAL_ICACHE_Disable+0x32>
 8001862:	4605      	mov	r5, r0
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8001864:	f7ff fc42 	bl	80010ec <HAL_GetTick>
 8001868:	1b40      	subs	r0, r0, r5
 800186a:	2801      	cmp	r0, #1
 800186c:	d902      	bls.n	8001874 <HAL_ICACHE_Disable+0x2c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	07da      	lsls	r2, r3, #31
 8001872:	d404      	bmi.n	800187e <HAL_ICACHE_Disable+0x36>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	07db      	lsls	r3, r3, #31
 8001878:	d4f4      	bmi.n	8001864 <HAL_ICACHE_Disable+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800187a:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800187c:	bd38      	pop	{r3, r4, r5, pc}
        status = HAL_TIMEOUT;
 800187e:	2003      	movs	r0, #3
}
 8001880:	bd38      	pop	{r3, r4, r5, pc}
 8001882:	bf00      	nop
 8001884:	40030400 	.word	0x40030400

08001888 <HAL_ICACHE_EnableRemapRegion>:
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_ICACHE_EnableRemapRegion+0x58>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	07db      	lsls	r3, r3, #31
 800188e:	d421      	bmi.n	80018d4 <HAL_ICACHE_EnableRemapRegion+0x4c>
{
 8001890:	b4f0      	push	{r4, r5, r6, r7}
    status = HAL_ERROR;
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8001892:	4c14      	ldr	r4, [pc, #80]	; (80018e4 <HAL_ICACHE_EnableRemapRegion+0x5c>)

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8001894:	4602      	mov	r2, r0
 8001896:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 800189a:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800189e:	d11b      	bne.n	80018d8 <HAL_ICACHE_EnableRemapRegion+0x50>
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
               (0xFFU & ~(pRegionConfig->Size - 1U));
 80018a0:	688d      	ldr	r5, [r1, #8]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80018a2:	684e      	ldr	r6, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018a4:	4618      	mov	r0, r3
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80018a6:	e9d1 7303 	ldrd	r7, r3, [r1, #12]
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80018aa:	6809      	ldr	r1, [r1, #0]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80018ac:	ea47 0c03 	orr.w	ip, r7, r3
               (0xFFU & ~(pRegionConfig->Size - 1U));
 80018b0:	426b      	negs	r3, r5
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80018b2:	ea03 5151 	and.w	r1, r3, r1, lsr #21
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80018b6:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80018b8:	ea03 1356 	and.w	r3, r3, r6, lsr #5
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80018bc:	ea43 030c 	orr.w	r3, r3, ip
 80018c0:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80018c4:	b2c9      	uxtb	r1, r1
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80018c6:	430b      	orrs	r3, r1
               pRegionConfig->OutputBurstType;
      *p_reg = (value | ICACHE_CRRx_REN);
 80018c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018cc:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    }
  }

  return status;
}
 80018d0:	bcf0      	pop	{r4, r5, r6, r7}
 80018d2:	4770      	bx	lr
    status = HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
}
 80018d6:	4770      	bx	lr
    status = HAL_ERROR;
 80018d8:	2001      	movs	r0, #1
}
 80018da:	bcf0      	pop	{r4, r5, r6, r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40030400 	.word	0x40030400
 80018e4:	40030420 	.word	0x40030420

080018e8 <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80018e8:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018ea:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80018ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80018f0:	4283      	cmp	r3, r0
 80018f2:	d030      	beq.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x6e>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80018f4:	f04f 0c32 	mov.w	ip, #50	; 0x32
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80018f8:	68d3      	ldr	r3, [r2, #12]
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80018fa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80018fe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001902:	ea40 0003 	orr.w	r0, r0, r3
 8001906:	bf88      	it	hi
 8001908:	f440 2080 	orrhi.w	r0, r0, #262144	; 0x40000
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x7c>)
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800190e:	60d0      	str	r0, [r2, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a15      	ldr	r2, [pc, #84]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x80>)
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001914:	4812      	ldr	r0, [pc, #72]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0x78>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001916:	fba2 1303 	umull	r1, r3, r2, r3
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	fb0c f303 	mul.w	r3, ip, r3
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001924:	68c1      	ldr	r1, [r0, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001926:	099b      	lsrs	r3, r3, #6
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001928:	040a      	lsls	r2, r1, #16
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800192a:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800192e:	d407      	bmi.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x58>
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001930:	461a      	mov	r2, r3
 8001932:	e000      	b.n	8001936 <HAL_PWREx_ControlVoltageScaling+0x4e>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001934:	b18a      	cbz	r2, 800195a <HAL_PWREx_ControlVoltageScaling+0x72>
 8001936:	68c1      	ldr	r1, [r0, #12]
  {
    timeout--;
 8001938:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800193a:	0409      	lsls	r1, r1, #16
 800193c:	d5fa      	bpl.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }

  /* Check time out */
  if (timeout != 0U)
 800193e:	b162      	cbz	r2, 800195a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001942:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001944:	0410      	lsls	r0, r2, #16
 8001946:	d406      	bmi.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001948:	e000      	b.n	800194c <HAL_PWREx_ControlVoltageScaling+0x64>
 800194a:	b133      	cbz	r3, 800195a <HAL_PWREx_ControlVoltageScaling+0x72>
 800194c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    {
      timeout--;
 800194e:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001950:	0412      	lsls	r2, r2, #16
 8001952:	d5fa      	bpl.n	800194a <HAL_PWREx_ControlVoltageScaling+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001954:	b10b      	cbz	r3, 800195a <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 8001956:	2000      	movs	r0, #0
 8001958:	4770      	bx	lr
  {
    return HAL_TIMEOUT;
 800195a:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	46020800 	.word	0x46020800
 8001964:	20000040 	.word	0x20000040
 8001968:	10624dd3 	.word	0x10624dd3

0800196c <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800196c:	4b02      	ldr	r3, [pc, #8]	; (8001978 <HAL_PWREx_GetVoltageRange+0xc>)
 800196e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
 8001970:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	46020800 	.word	0x46020800

0800197c <HAL_PWREx_ConfigSupply>:

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800197c:	2132      	movs	r1, #50	; 0x32
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_PWREx_ConfigSupply+0x6c>)
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_PWREx_ConfigSupply+0x70>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fba2 c303 	umull	ip, r3, r2, r3
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	fba2 2303 	umull	r2, r3, r2, r3

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001992:	4917      	ldr	r1, [pc, #92]	; (80019f0 <HAL_PWREx_ConfigSupply+0x74>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001994:	099b      	lsrs	r3, r3, #6
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001996:	688a      	ldr	r2, [r1, #8]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001998:	3301      	adds	r3, #1
  if (SupplySource == PWR_LDO_SUPPLY)
 800199a:	b988      	cbnz	r0, 80019c0 <HAL_PWREx_ConfigSupply+0x44>
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800199c:	f022 0202 	bic.w	r2, r2, #2
 80019a0:	608a      	str	r2, [r1, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019a2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80019a4:	0790      	lsls	r0, r2, #30
 80019a6:	d509      	bpl.n	80019bc <HAL_PWREx_ConfigSupply+0x40>
 80019a8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    {
      timeout--;
 80019aa:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019ac:	0792      	lsls	r2, r2, #30
 80019ae:	d504      	bpl.n	80019ba <HAL_PWREx_ConfigSupply+0x3e>
 80019b0:	b1bb      	cbz	r3, 80019e2 <HAL_PWREx_ConfigSupply+0x66>
 80019b2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
      timeout--;
 80019b4:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019b6:	0792      	lsls	r2, r2, #30
 80019b8:	d4fa      	bmi.n	80019b0 <HAL_PWREx_ConfigSupply+0x34>
      timeout--;
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80019ba:	b193      	cbz	r3, 80019e2 <HAL_PWREx_ConfigSupply+0x66>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80019bc:	2000      	movs	r0, #0
}
 80019be:	4770      	bx	lr
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80019c0:	f042 0202 	orr.w	r2, r2, #2
 80019c4:	608a      	str	r2, [r1, #8]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019c6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80019c8:	0790      	lsls	r0, r2, #30
 80019ca:	d4f7      	bmi.n	80019bc <HAL_PWREx_ConfigSupply+0x40>
 80019cc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
      timeout--;
 80019ce:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019d0:	0792      	lsls	r2, r2, #30
 80019d2:	d4f2      	bmi.n	80019ba <HAL_PWREx_ConfigSupply+0x3e>
 80019d4:	b12b      	cbz	r3, 80019e2 <HAL_PWREx_ConfigSupply+0x66>
 80019d6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
      timeout--;
 80019d8:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019da:	0792      	lsls	r2, r2, #30
 80019dc:	d4ed      	bmi.n	80019ba <HAL_PWREx_ConfigSupply+0x3e>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f9      	bne.n	80019d6 <HAL_PWREx_ConfigSupply+0x5a>
    return HAL_TIMEOUT;
 80019e2:	2003      	movs	r0, #3
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000040 	.word	0x20000040
 80019ec:	10624dd3 	.word	0x10624dd3
 80019f0:	46020800 	.word	0x46020800

080019f4 <HAL_PWREx_EnableVddIO2>:
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80019f4:	4a02      	ldr	r2, [pc, #8]	; (8001a00 <HAL_PWREx_EnableVddIO2+0xc>)
 80019f6:	6913      	ldr	r3, [r2, #16]
 80019f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019fc:	6113      	str	r3, [r2, #16]
}
 80019fe:	4770      	bx	lr
 8001a00:	46020800 	.word	0x46020800

08001a04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a04:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a06:	4d2c      	ldr	r5, [pc, #176]	; (8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
{
 8001a08:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a0a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
{
 8001a0e:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a10:	075b      	lsls	r3, r3, #29
 8001a12:	d52b      	bpl.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a14:	f7ff ffaa 	bl	800196c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8001a18:	f420 3380 	bic.w	r3, r0, #65536	; 0x10000
 8001a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a20:	d007      	beq.n	8001a32 <RCC_SetFlashLatencyFromMSIRange+0x2e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8001a22:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8001a26:	d217      	bcs.n	8001a58 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8001a28:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001a2c:	d133      	bne.n	8001a96 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8001a2e:	2203      	movs	r2, #3
 8001a30:	e004      	b.n	8001a3c <RCC_SetFlashLatencyFromMSIRange+0x38>
    if (msirange < RCC_MSIRANGE_1)
 8001a32:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8001a36:	bf2c      	ite	cs
 8001a38:	2200      	movcs	r2, #0
 8001a3a:	2201      	movcc	r2, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a3c:	491f      	ldr	r1, [pc, #124]	; (8001abc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3e:	680b      	ldr	r3, [r1, #0]
 8001a40:	f023 030f 	bic.w	r3, r3, #15
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001a48:	6808      	ldr	r0, [r1, #0]
 8001a4a:	f000 000f 	and.w	r0, r0, #15
        return HAL_ERROR;
 8001a4e:	1a80      	subs	r0, r0, r2
 8001a50:	bf18      	it	ne
 8001a52:	2001      	movne	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001a54:	b003      	add	sp, #12
 8001a56:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 8001a58:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8001a5c:	d91e      	bls.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x98>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8001a5e:	bb10      	cbnz	r0, 8001aa6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
          if (msirange > RCC_MSIRANGE_3)
 8001a60:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
 8001a64:	bf8c      	ite	hi
 8001a66:	2200      	movhi	r2, #0
 8001a68:	2201      	movls	r2, #1
 8001a6a:	e7e7      	b.n	8001a3c <RCC_SetFlashLatencyFromMSIRange+0x38>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8001a78:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001a84:	f7ff ff72 	bl	800196c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8001a94:	e7c0      	b.n	8001a18 <RCC_SetFlashLatencyFromMSIRange+0x14>
        return HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
}
 8001a98:	b003      	add	sp, #12
 8001a9a:	bd30      	pop	{r4, r5, pc}
        if (msirange == RCC_MSIRANGE_1)
 8001a9c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8001aa0:	d003      	beq.n	8001aaa <RCC_SetFlashLatencyFromMSIRange+0xa6>
          latency = FLASH_LATENCY_1; /* 1WS */
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	e7ca      	b.n	8001a3c <RCC_SetFlashLatencyFromMSIRange+0x38>
          latency = FLASH_LATENCY_0; /* 0WS */
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	e7c8      	b.n	8001a3c <RCC_SetFlashLatencyFromMSIRange+0x38>
            latency = FLASH_LATENCY_2; /* 2WS */
 8001aaa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001aae:	bf0c      	ite	eq
 8001ab0:	2201      	moveq	r2, #1
 8001ab2:	2202      	movne	r2, #2
 8001ab4:	e7c2      	b.n	8001a3c <RCC_SetFlashLatencyFromMSIRange+0x38>
 8001ab6:	bf00      	nop
 8001ab8:	46020c00 	.word	0x46020c00
 8001abc:	40022000 	.word	0x40022000

08001ac0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac0:	4a44      	ldr	r2, [pc, #272]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ac2:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ac6:	f013 030c 	ands.w	r3, r3, #12
 8001aca:	d052      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0xb2>
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	d063      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xd8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad0:	69d2      	ldr	r2, [r2, #28]
 8001ad2:	f002 020c 	and.w	r2, r2, #12
 8001ad6:	2a04      	cmp	r2, #4
 8001ad8:	d05c      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0xd4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d05a      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0xd4>
  uint32_t msirange = 0U;
 8001ade:	2000      	movs	r0, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d174      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0x10e>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001ae4:	493b      	ldr	r1, [pc, #236]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x114>)
{
 8001ae6:	b510      	push	{r4, lr}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001ae8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001aea:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001aec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001aee:	f004 0c03 	and.w	ip, r4, #3
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001af2:	f3c3 1e00 	ubfx	lr, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001af6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001af8:	f3c2 2203 	ubfx	r2, r2, #8, #4
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001afc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8001b00:	fb0e f303 	mul.w	r3, lr, r3
 8001b04:	ee07 3a90 	vmov	s15, r3
      switch (pllsource)
 8001b08:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001b10:	f102 0201 	add.w	r2, r2, #1
      switch (pllsource)
 8001b14:	d002      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x5c>
 8001b16:	f1bc 0f03 	cmp.w	ip, #3
 8001b1a:	d144      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0xe6>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b1c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001b1e:	ee07 2a10 	vmov	s14, r2
 8001b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b26:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b2e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001b32:	eddf 5a29 	vldr	s11, [pc, #164]	; 8001bd8 <HAL_RCC_GetSysClockFreq+0x118>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b3a:	ed9f 5a28 	vldr	s10, [pc, #160]	; 8001bdc <HAL_RCC_GetSysClockFreq+0x11c>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001b3e:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b42:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001b46:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x114>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001b4c:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b52:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001b56:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001b5a:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b68:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8001b6c:	ee17 0a90 	vmov	r0, s15
}
 8001b70:	bd10      	pop	{r4, pc}
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8001b72:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b74:	6891      	ldr	r1, [r2, #8]
 8001b76:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001b78:	bf54      	ite	pl
 8001b7a:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001b7e:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8001b80:	4917      	ldr	r1, [pc, #92]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x120>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001b82:	bf54      	ite	pl
 8001b84:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001b88:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8001b8a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1a6      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x20>
}
 8001b92:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001b94:	4813      	ldr	r0, [pc, #76]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x124>)
  return sysclockfreq;
 8001b96:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b98:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b9c:	2901      	cmp	r1, #1
 8001b9e:	d0e8      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0xb2>
  uint32_t msirange = 0U;
 8001ba0:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba2:	69d3      	ldr	r3, [r2, #28]
 8001ba4:	e79e      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x24>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ba6:	ee07 0a10 	vmov	s14, r0
 8001baa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001bac:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8001bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb4:	ee06 3a10 	vmov	s12, r3
 8001bb8:	ee07 2a10 	vmov	s14, r2
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001bc0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001bc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001bc8:	eddf 5a03 	vldr	s11, [pc, #12]	; 8001bd8 <HAL_RCC_GetSysClockFreq+0x118>
 8001bcc:	e7b7      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x7e>
 8001bce:	2000      	movs	r0, #0
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	46020c00 	.word	0x46020c00
 8001bd8:	39000000 	.word	0x39000000
 8001bdc:	4b742400 	.word	0x4b742400
 8001be0:	08007af0 	.word	0x08007af0
 8001be4:	00f42400 	.word	0x00f42400

08001be8 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8001be8:	2800      	cmp	r0, #0
 8001bea:	f000 810c 	beq.w	8001e06 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bee:	4a9e      	ldr	r2, [pc, #632]	; (8001e68 <HAL_RCC_ClockConfig+0x280>)
{
 8001bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	428b      	cmp	r3, r1
 8001bfe:	460d      	mov	r5, r1
{
 8001c00:	b082      	sub	sp, #8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c02:	d20d      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c04:	6813      	ldr	r3, [r2, #0]
 8001c06:	f023 030f 	bic.w	r3, r3, #15
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	6813      	ldr	r3, [r2, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	428b      	cmp	r3, r1
 8001c16:	d003      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8001c18:	2001      	movs	r0, #1
}
 8001c1a:	b002      	add	sp, #8
 8001c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	06d9      	lsls	r1, r3, #27
 8001c24:	d50b      	bpl.n	8001c3e <HAL_RCC_ClockConfig+0x56>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001c26:	4991      	ldr	r1, [pc, #580]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001c28:	6960      	ldr	r0, [r4, #20]
 8001c2a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001c2c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001c30:	4290      	cmp	r0, r2
 8001c32:	d904      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001c34:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001c36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	624a      	str	r2, [r1, #36]	; 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	071a      	lsls	r2, r3, #28
 8001c40:	d50d      	bpl.n	8001c5e <HAL_RCC_ClockConfig+0x76>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001c42:	498a      	ldr	r1, [pc, #552]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001c44:	6920      	ldr	r0, [r4, #16]
 8001c46:	6a0a      	ldr	r2, [r1, #32]
 8001c48:	0912      	lsrs	r2, r2, #4
 8001c4a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001c4e:	4290      	cmp	r0, r2
 8001c50:	d905      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001c52:	6a0a      	ldr	r2, [r1, #32]
 8001c54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c58:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8001c5c:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5e:	075f      	lsls	r7, r3, #29
 8001c60:	d50b      	bpl.n	8001c7a <HAL_RCC_ClockConfig+0x92>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c62:	4982      	ldr	r1, [pc, #520]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001c64:	68e0      	ldr	r0, [r4, #12]
 8001c66:	6a0a      	ldr	r2, [r1, #32]
 8001c68:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001c6c:	4290      	cmp	r0, r2
 8001c6e:	d904      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	6a0a      	ldr	r2, [r1, #32]
 8001c72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c76:	4302      	orrs	r2, r0
 8001c78:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7a:	079e      	lsls	r6, r3, #30
 8001c7c:	d530      	bpl.n	8001ce0 <HAL_RCC_ClockConfig+0xf8>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c7e:	487b      	ldr	r0, [pc, #492]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001c80:	68a1      	ldr	r1, [r4, #8]
 8001c82:	6a02      	ldr	r2, [r0, #32]
 8001c84:	f002 020f 	and.w	r2, r2, #15
 8001c88:	4291      	cmp	r1, r2
 8001c8a:	d904      	bls.n	8001c96 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	6a02      	ldr	r2, [r0, #32]
 8001c8e:	f022 020f 	bic.w	r2, r2, #15
 8001c92:	430a      	orrs	r2, r1
 8001c94:	6202      	str	r2, [r0, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	07d8      	lsls	r0, r3, #31
 8001c98:	f140 8081 	bpl.w	8001d9e <HAL_RCC_ClockConfig+0x1b6>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9c:	6863      	ldr	r3, [r4, #4]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	f000 80b3 	beq.w	8001e0a <HAL_RCC_ClockConfig+0x222>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca4:	4a71      	ldr	r2, [pc, #452]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca6:	2b02      	cmp	r3, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca8:	6812      	ldr	r2, [r2, #0]
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	f000 8084 	beq.w	8001db6 <HAL_RCC_ClockConfig+0x1ce>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 80be 	bne.w	8001e30 <HAL_RCC_ClockConfig+0x248>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001cb4:	0750      	lsls	r0, r2, #29
 8001cb6:	d5af      	bpl.n	8001c18 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001cb8:	4e6c      	ldr	r6, [pc, #432]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cba:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001cbe:	69f2      	ldr	r2, [r6, #28]
 8001cc0:	f022 0203 	bic.w	r2, r2, #3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8001cc8:	f7ff fa10 	bl	80010ec <HAL_GetTick>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ccc:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001cce:	4607      	mov	r7, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d05b      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x1a4>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d077      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x1e0>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f040 808a 	bne.w	8001df2 <HAL_RCC_ClockConfig+0x20a>
 8001cde:	e07e      	b.n	8001dde <HAL_RCC_ClockConfig+0x1f6>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce0:	07da      	lsls	r2, r3, #31
 8001ce2:	d4db      	bmi.n	8001c9c <HAL_RCC_ClockConfig+0xb4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce4:	4960      	ldr	r1, [pc, #384]	; (8001e68 <HAL_RCC_ClockConfig+0x280>)
 8001ce6:	680a      	ldr	r2, [r1, #0]
 8001ce8:	f002 020f 	and.w	r2, r2, #15
 8001cec:	42aa      	cmp	r2, r5
 8001cee:	d909      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x11c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf0:	680a      	ldr	r2, [r1, #0]
 8001cf2:	f022 020f 	bic.w	r2, r2, #15
 8001cf6:	432a      	orrs	r2, r5
 8001cf8:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	680a      	ldr	r2, [r1, #0]
 8001cfc:	f002 020f 	and.w	r2, r2, #15
 8001d00:	42aa      	cmp	r2, r5
 8001d02:	d189      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x30>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	075f      	lsls	r7, r3, #29
 8001d06:	d50b      	bpl.n	8001d20 <HAL_RCC_ClockConfig+0x138>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001d08:	4958      	ldr	r1, [pc, #352]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001d0a:	68e0      	ldr	r0, [r4, #12]
 8001d0c:	6a0a      	ldr	r2, [r1, #32]
 8001d0e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001d12:	4290      	cmp	r0, r2
 8001d14:	d204      	bcs.n	8001d20 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001d16:	6a0a      	ldr	r2, [r1, #32]
 8001d18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d1c:	4302      	orrs	r2, r0
 8001d1e:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d20:	071e      	lsls	r6, r3, #28
 8001d22:	d50d      	bpl.n	8001d40 <HAL_RCC_ClockConfig+0x158>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001d24:	4951      	ldr	r1, [pc, #324]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001d26:	6920      	ldr	r0, [r4, #16]
 8001d28:	6a0a      	ldr	r2, [r1, #32]
 8001d2a:	0912      	lsrs	r2, r2, #4
 8001d2c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001d30:	4290      	cmp	r0, r2
 8001d32:	d205      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x158>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001d34:	6a0a      	ldr	r2, [r1, #32]
 8001d36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d3a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8001d3e:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001d40:	06dd      	lsls	r5, r3, #27
 8001d42:	d50b      	bpl.n	8001d5c <HAL_RCC_ClockConfig+0x174>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001d44:	4a49      	ldr	r2, [pc, #292]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001d46:	6961      	ldr	r1, [r4, #20]
 8001d48:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001d4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d4e:	4299      	cmp	r1, r3
 8001d50:	d204      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8001d52:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	6253      	str	r3, [r2, #36]	; 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d5c:	f7ff feb0 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a42      	ldr	r2, [pc, #264]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001d64:	4942      	ldr	r1, [pc, #264]	; (8001e70 <HAL_RCC_ClockConfig+0x288>)
 8001d66:	6a12      	ldr	r2, [r2, #32]
  status = HAL_InitTick(uwTickPrio);
 8001d68:	4842      	ldr	r0, [pc, #264]	; (8001e74 <HAL_RCC_ClockConfig+0x28c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d6a:	f002 020f 	and.w	r2, r2, #15
 8001d6e:	5c89      	ldrb	r1, [r1, r2]
  status = HAL_InitTick(uwTickPrio);
 8001d70:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d72:	4a41      	ldr	r2, [pc, #260]	; (8001e78 <HAL_RCC_ClockConfig+0x290>)
 8001d74:	40cb      	lsrs	r3, r1
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	b002      	add	sp, #8
 8001d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8001d7e:	f7ff b959 	b.w	8001034 <HAL_InitTick>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7ff f9b3 	bl	80010ec <HAL_GetTick>
 8001d86:	1bc3      	subs	r3, r0, r7
 8001d88:	4543      	cmp	r3, r8
 8001d8a:	d838      	bhi.n	8001dfe <HAL_RCC_ClockConfig+0x216>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8c:	69f3      	ldr	r3, [r6, #28]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d1f5      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x19a>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	079a      	lsls	r2, r3, #30
 8001d9a:	d5a3      	bpl.n	8001ce4 <HAL_RCC_ClockConfig+0xfc>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001d9c:	68a1      	ldr	r1, [r4, #8]
 8001d9e:	4833      	ldr	r0, [pc, #204]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001da0:	6a02      	ldr	r2, [r0, #32]
 8001da2:	f002 020f 	and.w	r2, r2, #15
 8001da6:	428a      	cmp	r2, r1
 8001da8:	d99c      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0xfc>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001daa:	6a02      	ldr	r2, [r0, #32]
 8001dac:	f022 020f 	bic.w	r2, r2, #15
 8001db0:	4311      	orrs	r1, r2
 8001db2:	6201      	str	r1, [r0, #32]
 8001db4:	e796      	b.n	8001ce4 <HAL_RCC_ClockConfig+0xfc>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db6:	0396      	lsls	r6, r2, #14
 8001db8:	f53f af7e 	bmi.w	8001cb8 <HAL_RCC_ClockConfig+0xd0>
 8001dbc:	e72c      	b.n	8001c18 <HAL_RCC_ClockConfig+0x30>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbe:	f7ff f995 	bl	80010ec <HAL_GetTick>
 8001dc2:	1bc0      	subs	r0, r0, r7
 8001dc4:	4540      	cmp	r0, r8
 8001dc6:	d81a      	bhi.n	8001dfe <HAL_RCC_ClockConfig+0x216>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc8:	69f3      	ldr	r3, [r6, #28]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d1f5      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1d6>
 8001dd2:	e7e0      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff f98a 	bl	80010ec <HAL_GetTick>
 8001dd8:	1bc0      	subs	r0, r0, r7
 8001dda:	4540      	cmp	r0, r8
 8001ddc:	d80f      	bhi.n	8001dfe <HAL_RCC_ClockConfig+0x216>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dde:	69f3      	ldr	r3, [r6, #28]
 8001de0:	f013 0f0c 	tst.w	r3, #12
 8001de4:	d1f6      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x1ec>
 8001de6:	e7d6      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7ff f980 	bl	80010ec <HAL_GetTick>
 8001dec:	1bc0      	subs	r0, r0, r7
 8001dee:	4540      	cmp	r0, r8
 8001df0:	d805      	bhi.n	8001dfe <HAL_RCC_ClockConfig+0x216>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df2:	69f3      	ldr	r3, [r6, #28]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d1f5      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x200>
 8001dfc:	e7cb      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
            return HAL_TIMEOUT;
 8001dfe:	2003      	movs	r0, #3
}
 8001e00:	b002      	add	sp, #8
 8001e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001e06:	2001      	movs	r0, #1
}
 8001e08:	4770      	bx	lr
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001e0c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e10:	0750      	lsls	r0, r2, #29
 8001e12:	d511      	bpl.n	8001e38 <HAL_RCC_ClockConfig+0x250>
      tickstart = HAL_GetTick();
 8001e14:	f7ff f96a 	bl	80010ec <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_RCC_ClockConfig+0x294>)
      tickstart = HAL_GetTick();
 8001e1a:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	0359      	lsls	r1, r3, #13
 8001e20:	d441      	bmi.n	8001ea6 <HAL_RCC_ClockConfig+0x2be>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x284>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	019f      	lsls	r7, r3, #6
 8001e28:	f57f aef6 	bpl.w	8001c18 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001e2c:	6863      	ldr	r3, [r4, #4]
 8001e2e:	e743      	b.n	8001cb8 <HAL_RCC_ClockConfig+0xd0>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e30:	0551      	lsls	r1, r2, #21
 8001e32:	f57f aef1 	bpl.w	8001c18 <HAL_RCC_ClockConfig+0x30>
 8001e36:	e73f      	b.n	8001cb8 <HAL_RCC_ClockConfig+0xd0>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e3c:	f042 0204 	orr.w	r2, r2, #4
 8001e40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	9b01      	ldr	r3, [sp, #4]
      tickstart = HAL_GetTick();
 8001e50:	f7ff f94c 	bl	80010ec <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x294>)
      tickstart = HAL_GetTick();
 8001e56:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	035a      	lsls	r2, r3, #13
 8001e5c:	d51b      	bpl.n	8001e96 <HAL_RCC_ClockConfig+0x2ae>
        pwrclkchanged = SET;
 8001e5e:	f04f 0801 	mov.w	r8, #1
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001e62:	4f06      	ldr	r7, [pc, #24]	; (8001e7c <HAL_RCC_ClockConfig+0x294>)
 8001e64:	e011      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2a2>
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	46020c00 	.word	0x46020c00
 8001e70:	08007ad8 	.word	0x08007ad8
 8001e74:	20000048 	.word	0x20000048
 8001e78:	20000040 	.word	0x20000040
 8001e7c:	46020800 	.word	0x46020800
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001e80:	f7ff f934 	bl	80010ec <HAL_GetTick>
 8001e84:	1b83      	subs	r3, r0, r6
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d8b9      	bhi.n	8001dfe <HAL_RCC_ClockConfig+0x216>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	045b      	lsls	r3, r3, #17
 8001e8e:	d5f7      	bpl.n	8001e80 <HAL_RCC_ClockConfig+0x298>
      if (pwrclkchanged == SET)
 8001e90:	f1b8 0f00 	cmp.w	r8, #0
 8001e94:	d0c5      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x23a>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <HAL_RCC_ClockConfig+0x2c4>)
 8001e98:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ea4:	e7bd      	b.n	8001e22 <HAL_RCC_ClockConfig+0x23a>
    FlagStatus  pwrclkchanged = RESET;
 8001ea6:	f04f 0800 	mov.w	r8, #0
 8001eaa:	e7da      	b.n	8001e62 <HAL_RCC_ClockConfig+0x27a>
 8001eac:	46020c00 	.word	0x46020c00

08001eb0 <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	f000 8316 	beq.w	80024e2 <HAL_RCC_OscConfig+0x632>
{
 8001eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eba:	4aa1      	ldr	r2, [pc, #644]	; (8002140 <HAL_RCC_OscConfig+0x290>)
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ebc:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	69d5      	ldr	r5, [r2, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec0:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8001ec2:	4604      	mov	r4, r0
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ec4:	06d8      	lsls	r0, r3, #27
{
 8001ec6:	b084      	sub	sp, #16
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ecc:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed0:	d531      	bpl.n	8001f36 <HAL_RCC_OscConfig+0x86>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ed2:	2d00      	cmp	r5, #0
 8001ed4:	f000 81be 	beq.w	8002254 <HAL_RCC_OscConfig+0x3a4>
 8001ed8:	2d0c      	cmp	r5, #12
 8001eda:	f000 81b8 	beq.w	800224e <HAL_RCC_OscConfig+0x39e>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ede:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8001ee0:	4f97      	ldr	r7, [pc, #604]	; (8002140 <HAL_RCC_OscConfig+0x290>)
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8267 	beq.w	80023b6 <HAL_RCC_OscConfig+0x506>
        __HAL_RCC_MSI_ENABLE();
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f8fc 	bl	80010ec <HAL_GetTick>
 8001ef4:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001ef6:	e006      	b.n	8001f06 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef8:	f7ff f8f8 	bl	80010ec <HAL_GetTick>
 8001efc:	eba0 0008 	sub.w	r0, r0, r8
 8001f00:	2802      	cmp	r0, #2
 8001f02:	f200 821d 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	075b      	lsls	r3, r3, #29
 8001f0a:	d5f5      	bpl.n	8001ef8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001f20:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f0c0 8414 	bcc.w	8002752 <HAL_RCC_OscConfig+0x8a2>
 8001f2a:	6a22      	ldr	r2, [r4, #32]
 8001f2c:	f023 031f 	bic.w	r3, r3, #31
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	07d9      	lsls	r1, r3, #31
 8001f38:	d531      	bpl.n	8001f9e <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f3a:	2d08      	cmp	r5, #8
 8001f3c:	f000 81e6 	beq.w	800230c <HAL_RCC_OscConfig+0x45c>
 8001f40:	2d0c      	cmp	r5, #12
 8001f42:	f000 81e0 	beq.w	8002306 <HAL_RCC_OscConfig+0x456>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001f46:	6863      	ldr	r3, [r4, #4]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4c:	f000 8245 	beq.w	80023da <HAL_RCC_OscConfig+0x52a>
 8001f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f54:	f000 83cd 	beq.w	80026f2 <HAL_RCC_OscConfig+0x842>
 8001f58:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001f5c:	f000 83eb 	beq.w	8002736 <HAL_RCC_OscConfig+0x886>
 8001f60:	4f77      	ldr	r7, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x290>)
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f68:	603a      	str	r2, [r7, #0]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f70:	603a      	str	r2, [r7, #0]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001f78:	603a      	str	r2, [r7, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 8232 	bne.w	80023e4 <HAL_RCC_OscConfig+0x534>
        tickstart = HAL_GetTick();
 8001f80:	f7ff f8b4 	bl	80010ec <HAL_GetTick>
 8001f84:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f86:	e006      	b.n	8001f96 <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff f8b0 	bl	80010ec <HAL_GetTick>
 8001f8c:	eba0 0008 	sub.w	r0, r0, r8
 8001f90:	2864      	cmp	r0, #100	; 0x64
 8001f92:	f200 81d5 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	0398      	lsls	r0, r3, #14
 8001f9a:	d4f5      	bmi.n	8001f88 <HAL_RCC_OscConfig+0xd8>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	0799      	lsls	r1, r3, #30
 8001fa0:	f100 8132 	bmi.w	8002208 <HAL_RCC_OscConfig+0x358>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa4:	0718      	lsls	r0, r3, #28
 8001fa6:	d541      	bpl.n	800202c <HAL_RCC_OscConfig+0x17c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa8:	4b65      	ldr	r3, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x290>)
 8001faa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001fae:	0751      	lsls	r1, r2, #29
 8001fb0:	f140 8189 	bpl.w	80022c6 <HAL_RCC_OscConfig+0x416>
    FlagStatus  pwrclkchanged = RESET;
 8001fb4:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fb6:	4e63      	ldr	r6, [pc, #396]	; (8002144 <HAL_RCC_OscConfig+0x294>)
 8001fb8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001fba:	07da      	lsls	r2, r3, #31
 8001fbc:	f140 81b0 	bpl.w	8002320 <HAL_RCC_OscConfig+0x470>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc0:	6963      	ldr	r3, [r4, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8274 	beq.w	80024b0 <HAL_RCC_OscConfig+0x600>
      uint32_t bdcr_temp = RCC->BDCR;
 8001fc8:	4e5d      	ldr	r6, [pc, #372]	; (8002140 <HAL_RCC_OscConfig+0x290>)
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001fca:	69a2      	ldr	r2, [r4, #24]
      uint32_t bdcr_temp = RCC->BDCR;
 8001fcc:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001fd0:	f003 5180 	and.w	r1, r3, #268435456	; 0x10000000
 8001fd4:	428a      	cmp	r2, r1
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_OscConfig+0x14a>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001fd8:	f003 6140 	and.w	r1, r3, #201326592	; 0xc000000
 8001fdc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001fe0:	f000 816d 	beq.w	80022be <HAL_RCC_OscConfig+0x40e>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001fe4:	0158      	lsls	r0, r3, #5
 8001fe6:	f100 834a 	bmi.w	800267e <HAL_RCC_OscConfig+0x7ce>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001fea:	4955      	ldr	r1, [pc, #340]	; (8002140 <HAL_RCC_OscConfig+0x290>)
 8001fec:	f8d1 30f0 	ldr.w	r3, [r1, #240]	; 0xf0
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      __HAL_RCC_LSI_ENABLE();
 8001ffa:	4e51      	ldr	r6, [pc, #324]	; (8002140 <HAL_RCC_OscConfig+0x290>)
 8001ffc:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002000:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002004:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8002008:	f7ff f870 	bl	80010ec <HAL_GetTick>
 800200c:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800200e:	e005      	b.n	800201c <HAL_RCC_OscConfig+0x16c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff f86c 	bl	80010ec <HAL_GetTick>
 8002014:	1bc0      	subs	r0, r0, r7
 8002016:	2802      	cmp	r0, #2
 8002018:	f200 8192 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800201c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002020:	011a      	lsls	r2, r3, #4
 8002022:	d5f5      	bpl.n	8002010 <HAL_RCC_OscConfig+0x160>
    if (pwrclkchanged == SET)
 8002024:	2d00      	cmp	r5, #0
 8002026:	f040 8322 	bne.w	800266e <HAL_RCC_OscConfig+0x7be>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	075d      	lsls	r5, r3, #29
 800202e:	d55e      	bpl.n	80020ee <HAL_RCC_OscConfig+0x23e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002030:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x290>)
 8002032:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002036:	0750      	lsls	r0, r2, #29
 8002038:	f100 81fe 	bmi.w	8002438 <HAL_RCC_OscConfig+0x588>
      pwrclkchanged = SET;
 800203c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002042:	f042 0204 	orr.w	r2, r2, #4
 8002046:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	9b02      	ldr	r3, [sp, #8]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002056:	4e3b      	ldr	r6, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x294>)
 8002058:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800205a:	07d9      	lsls	r1, r3, #31
 800205c:	f140 8338 	bpl.w	80026d0 <HAL_RCC_OscConfig+0x820>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002060:	68a3      	ldr	r3, [r4, #8]
 8002062:	07da      	lsls	r2, r3, #31
 8002064:	f140 81ea 	bpl.w	800243c <HAL_RCC_OscConfig+0x58c>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002068:	075e      	lsls	r6, r3, #29
 800206a:	f140 82f8 	bpl.w	800265e <HAL_RCC_OscConfig+0x7ae>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800206e:	4b34      	ldr	r3, [pc, #208]	; (8002140 <HAL_RCC_OscConfig+0x290>)
 8002070:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002074:	f042 0204 	orr.w	r2, r2, #4
 8002078:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800207c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002080:	f042 0201 	orr.w	r2, r2, #1
 8002084:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8002088:	f7ff f830 	bl	80010ec <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002090:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002092:	4f2b      	ldr	r7, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x290>)
 8002094:	e005      	b.n	80020a2 <HAL_RCC_OscConfig+0x1f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff f829 	bl	80010ec <HAL_GetTick>
 800209a:	1b80      	subs	r0, r0, r6
 800209c:	4540      	cmp	r0, r8
 800209e:	f200 814f 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80020a6:	0798      	lsls	r0, r3, #30
 80020a8:	d5f5      	bpl.n	8002096 <HAL_RCC_OscConfig+0x1e6>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80020aa:	68a3      	ldr	r3, [r4, #8]
 80020ac:	f013 0f80 	tst.w	r3, #128	; 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80020b4:	f000 837c 	beq.w	80027b0 <HAL_RCC_OscConfig+0x900>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020c4:	4f1e      	ldr	r7, [pc, #120]	; (8002140 <HAL_RCC_OscConfig+0x290>)
 80020c6:	e005      	b.n	80020d4 <HAL_RCC_OscConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7ff f810 	bl	80010ec <HAL_GetTick>
 80020cc:	1b80      	subs	r0, r0, r6
 80020ce:	4540      	cmp	r0, r8
 80020d0:	f200 8136 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80020d8:	0519      	lsls	r1, r3, #20
 80020da:	d5f5      	bpl.n	80020c8 <HAL_RCC_OscConfig+0x218>
    if (pwrclkchanged == SET)
 80020dc:	b135      	cbz	r5, 80020ec <HAL_RCC_OscConfig+0x23c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_RCC_OscConfig+0x290>)
 80020e0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	069a      	lsls	r2, r3, #26
 80020f0:	d516      	bpl.n	8002120 <HAL_RCC_OscConfig+0x270>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      __HAL_RCC_HSI48_ENABLE();
 80020f4:	4d12      	ldr	r5, [pc, #72]	; (8002140 <HAL_RCC_OscConfig+0x290>)
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 81fb 	beq.w	80024f2 <HAL_RCC_OscConfig+0x642>
      __HAL_RCC_HSI48_ENABLE();
 80020fc:	682b      	ldr	r3, [r5, #0]
 80020fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002102:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002104:	f7fe fff2 	bl	80010ec <HAL_GetTick>
 8002108:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800210a:	e005      	b.n	8002118 <HAL_RCC_OscConfig+0x268>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210c:	f7fe ffee 	bl	80010ec <HAL_GetTick>
 8002110:	1b80      	subs	r0, r0, r6
 8002112:	2802      	cmp	r0, #2
 8002114:	f200 8114 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	049b      	lsls	r3, r3, #18
 800211c:	d5f6      	bpl.n	800210c <HAL_RCC_OscConfig+0x25c>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	0618      	lsls	r0, r3, #24
 8002122:	d51b      	bpl.n	800215c <HAL_RCC_OscConfig+0x2ac>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002124:	6b23      	ldr	r3, [r4, #48]	; 0x30
      __HAL_RCC_SHSI_ENABLE();
 8002126:	4d06      	ldr	r5, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x290>)
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8286 	beq.w	800263a <HAL_RCC_OscConfig+0x78a>
      __HAL_RCC_SHSI_ENABLE();
 800212e:	682b      	ldr	r3, [r5, #0]
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002136:	f7fe ffd9 	bl	80010ec <HAL_GetTick>
 800213a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x2a4>
 800213e:	bf00      	nop
 8002140:	46020c00 	.word	0x46020c00
 8002144:	46020800 	.word	0x46020800
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002148:	f7fe ffd0 	bl	80010ec <HAL_GetTick>
 800214c:	1b80      	subs	r0, r0, r6
 800214e:	2802      	cmp	r0, #2
 8002150:	f200 80f6 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	0419      	lsls	r1, r3, #16
 8002158:	d5f6      	bpl.n	8002148 <HAL_RCC_OscConfig+0x298>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	065b      	lsls	r3, r3, #25
 800215e:	d52b      	bpl.n	80021b8 <HAL_RCC_OscConfig+0x308>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 82a1 	beq.w	80026aa <HAL_RCC_OscConfig+0x7fa>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002168:	4ba6      	ldr	r3, [pc, #664]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002176:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800217e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002180:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8002184:	f0c0 8303 	bcc.w	800278e <HAL_RCC_OscConfig+0x8de>
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	6a21      	ldr	r1, [r4, #32]
 800218c:	f022 021f 	bic.w	r2, r2, #31
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]
      __HAL_RCC_MSIK_ENABLE();
 8002194:	4d9b      	ldr	r5, [pc, #620]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 8002196:	682b      	ldr	r3, [r5, #0]
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800219e:	f7fe ffa5 	bl	80010ec <HAL_GetTick>
 80021a2:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80021a4:	e005      	b.n	80021b2 <HAL_RCC_OscConfig+0x302>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80021a6:	f7fe ffa1 	bl	80010ec <HAL_GetTick>
 80021aa:	1b80      	subs	r0, r0, r6
 80021ac:	2802      	cmp	r0, #2
 80021ae:	f200 80c7 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80021b2:	682b      	ldr	r3, [r5, #0]
 80021b4:	069f      	lsls	r7, r3, #26
 80021b6:	d5f6      	bpl.n	80021a6 <HAL_RCC_OscConfig+0x2f6>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021ba:	2800      	cmp	r0, #0
 80021bc:	f000 823b 	beq.w	8002636 <HAL_RCC_OscConfig+0x786>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c0:	4d90      	ldr	r5, [pc, #576]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 80021c2:	69eb      	ldr	r3, [r5, #28]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	f000 830b 	beq.w	80027e4 <HAL_RCC_OscConfig+0x934>
        __HAL_RCC_PLL_DISABLE();
 80021ce:	682b      	ldr	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80021d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d6:	602b      	str	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d8:	f000 81a3 	beq.w	8002522 <HAL_RCC_OscConfig+0x672>
        tickstart = HAL_GetTick();
 80021dc:	f7fe ff86 	bl	80010ec <HAL_GetTick>
 80021e0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021e2:	e005      	b.n	80021f0 <HAL_RCC_OscConfig+0x340>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe ff82 	bl	80010ec <HAL_GetTick>
 80021e8:	1b00      	subs	r0, r0, r4
 80021ea:	2802      	cmp	r0, #2
 80021ec:	f200 80a8 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021f0:	682b      	ldr	r3, [r5, #0]
 80021f2:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80021f6:	d1f5      	bne.n	80021e4 <HAL_RCC_OscConfig+0x334>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80021f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return HAL_OK;
 80021fa:	4618      	mov	r0, r3
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80021fc:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002200:	f022 0203 	bic.w	r2, r2, #3
 8002204:	62aa      	str	r2, [r5, #40]	; 0x28
 8002206:	e05b      	b.n	80022c0 <HAL_RCC_OscConfig+0x410>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002208:	2d04      	cmp	r5, #4
 800220a:	d06c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x436>
 800220c:	2d0c      	cmp	r5, #12
 800220e:	d068      	beq.n	80022e2 <HAL_RCC_OscConfig+0x432>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002210:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002212:	4d7c      	ldr	r5, [pc, #496]	; (8002404 <HAL_RCC_OscConfig+0x554>)
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80fd 	beq.w	8002414 <HAL_RCC_OscConfig+0x564>
        __HAL_RCC_HSI_ENABLE();
 800221a:	682b      	ldr	r3, [r5, #0]
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002222:	f7fe ff63 	bl	80010ec <HAL_GetTick>
 8002226:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002228:	e005      	b.n	8002236 <HAL_RCC_OscConfig+0x386>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222a:	f7fe ff5f 	bl	80010ec <HAL_GetTick>
 800222e:	1b80      	subs	r0, r0, r6
 8002230:	2802      	cmp	r0, #2
 8002232:	f200 8085 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002236:	682b      	ldr	r3, [r5, #0]
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	d5f6      	bpl.n	800222a <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800223c:	692b      	ldr	r3, [r5, #16]
 800223e:	6922      	ldr	r2, [r4, #16]
 8002240:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002248:	612b      	str	r3, [r5, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	e6aa      	b.n	8001fa4 <HAL_RCC_OscConfig+0xf4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800224e:	2e01      	cmp	r6, #1
 8002250:	f47f ae45 	bne.w	8001ede <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002254:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0759      	lsls	r1, r3, #29
 800225a:	d42d      	bmi.n	80022b8 <HAL_RCC_OscConfig+0x408>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800225c:	4b69      	ldr	r3, [pc, #420]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 800225e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	0212      	lsls	r2, r2, #8
 8002264:	bf56      	itet	pl
 8002266:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 800226a:	689b      	ldrmi	r3, [r3, #8]
 800226c:	041b      	lslpl	r3, r3, #16
 800226e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002272:	4298      	cmp	r0, r3
 8002274:	d968      	bls.n	8002348 <HAL_RCC_OscConfig+0x498>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002276:	2d00      	cmp	r5, #0
 8002278:	f000 8256 	beq.w	8002728 <HAL_RCC_OscConfig+0x878>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <HAL_RCC_OscConfig+0x554>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800227e:	f1b0 4f40 	cmp.w	r0, #3221225472	; 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002290:	ea42 0200 	orr.w	r2, r2, r0
 8002294:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	f080 813d 	bcs.w	8002516 <HAL_RCC_OscConfig+0x666>
 800229c:	2800      	cmp	r0, #0
 800229e:	f2c0 826f 	blt.w	8002780 <HAL_RCC_OscConfig+0x8d0>
 80022a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022a6:	f0c0 82d2 	bcc.w	800284e <HAL_RCC_OscConfig+0x99e>
 80022aa:	6a21      	ldr	r1, [r4, #32]
 80022ac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80022b0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	e067      	b.n	8002388 <HAL_RCC_OscConfig+0x4d8>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b8:	69e3      	ldr	r3, [r4, #28]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ce      	bne.n	800225c <HAL_RCC_OscConfig+0x3ac>
        return HAL_ERROR;
 80022be:	2001      	movs	r0, #1
}
 80022c0:	b004      	add	sp, #16
 80022c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
      pwrclkchanged = SET;
 80022ca:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	f042 0204 	orr.w	r2, r2, #4
 80022d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80022d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022e0:	e669      	b.n	8001fb6 <HAL_RCC_OscConfig+0x106>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022e2:	2e02      	cmp	r6, #2
 80022e4:	d194      	bne.n	8002210 <HAL_RCC_OscConfig+0x360>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e6:	4a47      	ldr	r2, [pc, #284]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	d502      	bpl.n	80022f4 <HAL_RCC_OscConfig+0x444>
 80022ee:	68e2      	ldr	r2, [r4, #12]
 80022f0:	2a00      	cmp	r2, #0
 80022f2:	d0e4      	beq.n	80022be <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4943      	ldr	r1, [pc, #268]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 80022f6:	6920      	ldr	r0, [r4, #16]
 80022f8:	690a      	ldr	r2, [r1, #16]
 80022fa:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80022fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002302:	610a      	str	r2, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002304:	e64e      	b.n	8001fa4 <HAL_RCC_OscConfig+0xf4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002306:	2e03      	cmp	r6, #3
 8002308:	f47f ae1d 	bne.w	8001f46 <HAL_RCC_OscConfig+0x96>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	4a3d      	ldr	r2, [pc, #244]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	0392      	lsls	r2, r2, #14
 8002312:	f57f ae44 	bpl.w	8001f9e <HAL_RCC_OscConfig+0xee>
 8002316:	6862      	ldr	r2, [r4, #4]
 8002318:	2a00      	cmp	r2, #0
 800231a:	f47f ae40 	bne.w	8001f9e <HAL_RCC_OscConfig+0xee>
 800231e:	e7ce      	b.n	80022be <HAL_RCC_OscConfig+0x40e>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002320:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	62b3      	str	r3, [r6, #40]	; 0x28
      tickstart = HAL_GetTick();
 8002328:	f7fe fee0 	bl	80010ec <HAL_GetTick>
 800232c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800232e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002330:	07db      	lsls	r3, r3, #31
 8002332:	f53f ae45 	bmi.w	8001fc0 <HAL_RCC_OscConfig+0x110>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7fe fed9 	bl	80010ec <HAL_GetTick>
 800233a:	1bc0      	subs	r0, r0, r7
 800233c:	2802      	cmp	r0, #2
 800233e:	d9f6      	bls.n	800232e <HAL_RCC_OscConfig+0x47e>
            return HAL_TIMEOUT;
 8002340:	2003      	movs	r0, #3
}
 8002342:	b004      	add	sp, #16
 8002344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002348:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <HAL_RCC_OscConfig+0x554>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800234a:	f1b0 4f40 	cmp.w	r0, #3221225472	; 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800235c:	ea42 0200 	orr.w	r2, r2, r0
 8002360:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	f080 80bf 	bcs.w	80024e6 <HAL_RCC_OscConfig+0x636>
 8002368:	2800      	cmp	r0, #0
 800236a:	f2c0 8202 	blt.w	8002772 <HAL_RCC_OscConfig+0x8c2>
 800236e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002372:	f0c0 8230 	bcc.w	80027d6 <HAL_RCC_OscConfig+0x926>
 8002376:	6a21      	ldr	r1, [r4, #32]
 8002378:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800237c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002380:	60da      	str	r2, [r3, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002382:	2d00      	cmp	r5, #0
 8002384:	f000 81ca 	beq.w	800271c <HAL_RCC_OscConfig+0x86c>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002388:	f7ff fb9a 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 800238c:	4603      	mov	r3, r0
 800238e:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 8002390:	491d      	ldr	r1, [pc, #116]	; (8002408 <HAL_RCC_OscConfig+0x558>)
 8002392:	6a12      	ldr	r2, [r2, #32]
 8002394:	f002 020f 	and.w	r2, r2, #15
 8002398:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_RCC_OscConfig+0x55c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800239c:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 800239e:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80023a0:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <HAL_RCC_OscConfig+0x560>)
 80023a2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80023a4:	f7fe fe46 	bl	8001034 <HAL_InitTick>
        if (status != HAL_OK)
 80023a8:	2800      	cmp	r0, #0
 80023aa:	d189      	bne.n	80022c0 <HAL_RCC_OscConfig+0x410>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	07d9      	lsls	r1, r3, #31
 80023b0:	f57f adf5 	bpl.w	8001f9e <HAL_RCC_OscConfig+0xee>
 80023b4:	e5c1      	b.n	8001f3a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_MSI_DISABLE();
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80023be:	f7fe fe95 	bl	80010ec <HAL_GetTick>
 80023c2:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80023c4:	e005      	b.n	80023d2 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c6:	f7fe fe91 	bl	80010ec <HAL_GetTick>
 80023ca:	eba0 0008 	sub.w	r0, r0, r8
 80023ce:	2802      	cmp	r0, #2
 80023d0:	d8b6      	bhi.n	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	0758      	lsls	r0, r3, #29
 80023d6:	d4f6      	bmi.n	80023c6 <HAL_RCC_OscConfig+0x516>
 80023d8:	e7e8      	b.n	80023ac <HAL_RCC_OscConfig+0x4fc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <HAL_RCC_OscConfig+0x554>)
 80023dc:	6813      	ldr	r3, [r2, #0]
 80023de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023e4:	f7fe fe82 	bl	80010ec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e8:	f8df 8018 	ldr.w	r8, [pc, #24]	; 8002404 <HAL_RCC_OscConfig+0x554>
        tickstart = HAL_GetTick();
 80023ec:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ee:	e004      	b.n	80023fa <HAL_RCC_OscConfig+0x54a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fe7c 	bl	80010ec <HAL_GetTick>
 80023f4:	1bc0      	subs	r0, r0, r7
 80023f6:	2864      	cmp	r0, #100	; 0x64
 80023f8:	d8a2      	bhi.n	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fa:	f8d8 3000 	ldr.w	r3, [r8]
 80023fe:	039b      	lsls	r3, r3, #14
 8002400:	d5f6      	bpl.n	80023f0 <HAL_RCC_OscConfig+0x540>
 8002402:	e5cb      	b.n	8001f9c <HAL_RCC_OscConfig+0xec>
 8002404:	46020c00 	.word	0x46020c00
 8002408:	08007ad8 	.word	0x08007ad8
 800240c:	20000048 	.word	0x20000048
 8002410:	20000040 	.word	0x20000040
        __HAL_RCC_HSI_DISABLE();
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800241a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800241c:	f7fe fe66 	bl	80010ec <HAL_GetTick>
 8002420:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002422:	e004      	b.n	800242e <HAL_RCC_OscConfig+0x57e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002424:	f7fe fe62 	bl	80010ec <HAL_GetTick>
 8002428:	1b80      	subs	r0, r0, r6
 800242a:	2802      	cmp	r0, #2
 800242c:	d888      	bhi.n	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800242e:	682b      	ldr	r3, [r5, #0]
 8002430:	055f      	lsls	r7, r3, #21
 8002432:	d4f7      	bmi.n	8002424 <HAL_RCC_OscConfig+0x574>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	e5b5      	b.n	8001fa4 <HAL_RCC_OscConfig+0xf4>
    FlagStatus pwrclkchanged = RESET;
 8002438:	2500      	movs	r5, #0
 800243a:	e60c      	b.n	8002056 <HAL_RCC_OscConfig+0x1a6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800243c:	4eb4      	ldr	r6, [pc, #720]	; (8002710 <HAL_RCC_OscConfig+0x860>)
 800243e:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	f8c6 20f0 	str.w	r2, [r6, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800244a:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
 800244e:	f022 0204 	bic.w	r2, r2, #4
 8002452:	f8c6 20f0 	str.w	r2, [r6, #240]	; 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002456:	2b00      	cmp	r3, #0
 8002458:	f47f ae16 	bne.w	8002088 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 800245c:	f7fe fe46 	bl	80010ec <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002464:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002466:	e005      	b.n	8002474 <HAL_RCC_OscConfig+0x5c4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fe40 	bl	80010ec <HAL_GetTick>
 800246c:	1bc0      	subs	r0, r0, r7
 800246e:	4540      	cmp	r0, r8
 8002470:	f63f af66 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002474:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002478:	079b      	lsls	r3, r3, #30
 800247a:	d4f5      	bmi.n	8002468 <HAL_RCC_OscConfig+0x5b8>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800247c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002480:	0618      	lsls	r0, r3, #24
 8002482:	f57f ae2b 	bpl.w	80020dc <HAL_RCC_OscConfig+0x22c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002486:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f241 3888 	movw	r8, #5000	; 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800248e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002492:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002496:	4e9e      	ldr	r6, [pc, #632]	; (8002710 <HAL_RCC_OscConfig+0x860>)
 8002498:	e005      	b.n	80024a6 <HAL_RCC_OscConfig+0x5f6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fe27 	bl	80010ec <HAL_GetTick>
 800249e:	1bc0      	subs	r0, r0, r7
 80024a0:	4540      	cmp	r0, r8
 80024a2:	f63f af4d 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024a6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80024aa:	0519      	lsls	r1, r3, #20
 80024ac:	d4f5      	bmi.n	800249a <HAL_RCC_OscConfig+0x5ea>
 80024ae:	e615      	b.n	80020dc <HAL_RCC_OscConfig+0x22c>
      __HAL_RCC_LSI_DISABLE();
 80024b0:	4e97      	ldr	r6, [pc, #604]	; (8002710 <HAL_RCC_OscConfig+0x860>)
 80024b2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80024b6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80024ba:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 80024be:	f7fe fe15 	bl	80010ec <HAL_GetTick>
 80024c2:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024c4:	e005      	b.n	80024d2 <HAL_RCC_OscConfig+0x622>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7fe fe11 	bl	80010ec <HAL_GetTick>
 80024ca:	1bc0      	subs	r0, r0, r7
 80024cc:	2802      	cmp	r0, #2
 80024ce:	f63f af37 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024d2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	d4f5      	bmi.n	80024c6 <HAL_RCC_OscConfig+0x616>
    if (pwrclkchanged == SET)
 80024da:	2d00      	cmp	r5, #0
 80024dc:	f43f ada5 	beq.w	800202a <HAL_RCC_OscConfig+0x17a>
 80024e0:	e0c5      	b.n	800266e <HAL_RCC_OscConfig+0x7be>
    return HAL_ERROR;
 80024e2:	2001      	movs	r0, #1
}
 80024e4:	4770      	bx	lr
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80024e6:	6a21      	ldr	r1, [r4, #32]
 80024e8:	f022 021f 	bic.w	r2, r2, #31
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	e747      	b.n	8002382 <HAL_RCC_OscConfig+0x4d2>
      __HAL_RCC_HSI48_DISABLE();
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80024fa:	f7fe fdf7 	bl	80010ec <HAL_GetTick>
 80024fe:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002500:	e005      	b.n	800250e <HAL_RCC_OscConfig+0x65e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002502:	f7fe fdf3 	bl	80010ec <HAL_GetTick>
 8002506:	1b80      	subs	r0, r0, r6
 8002508:	2802      	cmp	r0, #2
 800250a:	f63f af19 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800250e:	682b      	ldr	r3, [r5, #0]
 8002510:	049f      	lsls	r7, r3, #18
 8002512:	d4f6      	bmi.n	8002502 <HAL_RCC_OscConfig+0x652>
 8002514:	e603      	b.n	800211e <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002516:	6a21      	ldr	r1, [r4, #32]
 8002518:	f022 021f 	bic.w	r2, r2, #31
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	e732      	b.n	8002388 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8002522:	f7fe fde3 	bl	80010ec <HAL_GetTick>
 8002526:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002528:	e005      	b.n	8002536 <HAL_RCC_OscConfig+0x686>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fddf 	bl	80010ec <HAL_GetTick>
 800252e:	1b80      	subs	r0, r0, r6
 8002530:	2802      	cmp	r0, #2
 8002532:	f63f af05 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002536:	682b      	ldr	r3, [r5, #0]
 8002538:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800253c:	d1f5      	bne.n	800252a <HAL_RCC_OscConfig+0x67a>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8002542:	0751      	lsls	r1, r2, #29
 8002544:	d40c      	bmi.n	8002560 <HAL_RCC_OscConfig+0x6b0>
          pwrclkchanged = SET;
 8002546:	2301      	movs	r3, #1
          __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 800254c:	f042 0204 	orr.w	r2, r2, #4
 8002550:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 8002554:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8002558:	f002 0204 	and.w	r2, r2, #4
 800255c:	9203      	str	r2, [sp, #12]
 800255e:	9a03      	ldr	r2, [sp, #12]
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002560:	4d6c      	ldr	r5, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x864>)
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002562:	496b      	ldr	r1, [pc, #428]	; (8002710 <HAL_RCC_OscConfig+0x860>)
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002564:	68ee      	ldr	r6, [r5, #12]
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002566:	68ea      	ldr	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002568:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8002718 <HAL_RCC_OscConfig+0x868>
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800256c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002570:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002572:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8002574:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8002576:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002578:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 800257c:	f020 0003 	bic.w	r0, r0, #3
 8002580:	433a      	orrs	r2, r7
 8002582:	4302      	orrs	r2, r0
 8002584:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002586:	3801      	subs	r0, #1
 8002588:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800258c:	628a      	str	r2, [r1, #40]	; 0x28
 800258e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002590:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002592:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8002596:	1e47      	subs	r7, r0, #1
 8002598:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800259a:	3a01      	subs	r2, #1
 800259c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a0:	027f      	lsls	r7, r7, #9
 80025a2:	3801      	subs	r0, #1
 80025a4:	ea0e 0c0c 	and.w	ip, lr, ip
 80025a8:	b2bf      	uxth	r7, r7
 80025aa:	0400      	lsls	r0, r0, #16
 80025ac:	ea42 020c 	orr.w	r2, r2, ip
 80025b0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80025b4:	433a      	orrs	r2, r7
 80025b6:	4302      	orrs	r2, r0
 80025b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025ba:	3801      	subs	r0, #1
 80025bc:	0600      	lsls	r0, r0, #24
 80025be:	f000 40fe 	and.w	r0, r0, #2130706432	; 0x7f000000
 80025c2:	4302      	orrs	r2, r0
 80025c4:	634a      	str	r2, [r1, #52]	; 0x34
        __HAL_RCC_PLLFRACN_DISABLE();
 80025c6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80025c8:	f022 0210 	bic.w	r2, r2, #16
 80025cc:	628a      	str	r2, [r1, #40]	; 0x28
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80025ce:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80025d0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80025d2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80025d6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80025da:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80025de:	638a      	str	r2, [r1, #56]	; 0x38
        __HAL_RCC_PLLFRACN_ENABLE();
 80025e0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80025e2:	f042 0210 	orr.w	r2, r2, #16
 80025e6:	628a      	str	r2, [r1, #40]	; 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80025e8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80025ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025ec:	f022 020c 	bic.w	r2, r2, #12
 80025f0:	4302      	orrs	r2, r0
 80025f2:	628a      	str	r2, [r1, #40]	; 0x28
        if (pwrboosten == SET)
 80025f4:	0372      	lsls	r2, r6, #13
 80025f6:	f100 813a 	bmi.w	800286e <HAL_RCC_OscConfig+0x9be>
        if (pwrclkchanged == SET)
 80025fa:	b133      	cbz	r3, 800260a <HAL_RCC_OscConfig+0x75a>
          __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4a44      	ldr	r2, [pc, #272]	; (8002710 <HAL_RCC_OscConfig+0x860>)
 80025fe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002602:	f023 0304 	bic.w	r3, r3, #4
 8002606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800260a:	4c41      	ldr	r4, [pc, #260]	; (8002710 <HAL_RCC_OscConfig+0x860>)
 800260c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800260e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002612:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_RCC_PLL_ENABLE();
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800261c:	f7fe fd66 	bl	80010ec <HAL_GetTick>
 8002620:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002622:	e005      	b.n	8002630 <HAL_RCC_OscConfig+0x780>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe fd62 	bl	80010ec <HAL_GetTick>
 8002628:	1b40      	subs	r0, r0, r5
 800262a:	2802      	cmp	r0, #2
 800262c:	f63f ae88 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	019b      	lsls	r3, r3, #6
 8002634:	d5f6      	bpl.n	8002624 <HAL_RCC_OscConfig+0x774>
  return HAL_OK;
 8002636:	2000      	movs	r0, #0
 8002638:	e642      	b.n	80022c0 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_SHSI_DISABLE();
 800263a:	682b      	ldr	r3, [r5, #0]
 800263c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002640:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002642:	f7fe fd53 	bl	80010ec <HAL_GetTick>
 8002646:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002648:	e005      	b.n	8002656 <HAL_RCC_OscConfig+0x7a6>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800264a:	f7fe fd4f 	bl	80010ec <HAL_GetTick>
 800264e:	1b80      	subs	r0, r0, r6
 8002650:	2802      	cmp	r0, #2
 8002652:	f63f ae75 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002656:	682b      	ldr	r3, [r5, #0]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	d4f6      	bmi.n	800264a <HAL_RCC_OscConfig+0x79a>
 800265c:	e57d      	b.n	800215a <HAL_RCC_OscConfig+0x2aa>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800265e:	4a2c      	ldr	r2, [pc, #176]	; (8002710 <HAL_RCC_OscConfig+0x860>)
 8002660:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800266c:	e50c      	b.n	8002088 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4a28      	ldr	r2, [pc, #160]	; (8002710 <HAL_RCC_OscConfig+0x860>)
 8002670:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800267c:	e4d5      	b.n	800202a <HAL_RCC_OscConfig+0x17a>
          __HAL_RCC_LSI_DISABLE();
 800267e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002682:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002686:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
          tickstart = HAL_GetTick();
 800268a:	f7fe fd2f 	bl	80010ec <HAL_GetTick>
 800268e:	4607      	mov	r7, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002690:	e005      	b.n	800269e <HAL_RCC_OscConfig+0x7ee>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002692:	f7fe fd2b 	bl	80010ec <HAL_GetTick>
 8002696:	1bc0      	subs	r0, r0, r7
 8002698:	2802      	cmp	r0, #2
 800269a:	f63f ae51 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800269e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80026a2:	0119      	lsls	r1, r3, #4
 80026a4:	d4f5      	bmi.n	8002692 <HAL_RCC_OscConfig+0x7e2>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80026a6:	69a2      	ldr	r2, [r4, #24]
 80026a8:	e49f      	b.n	8001fea <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_MSIK_DISABLE();
 80026aa:	4d19      	ldr	r5, [pc, #100]	; (8002710 <HAL_RCC_OscConfig+0x860>)
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	f023 0310 	bic.w	r3, r3, #16
 80026b2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80026b4:	f7fe fd1a 	bl	80010ec <HAL_GetTick>
 80026b8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80026ba:	e005      	b.n	80026c8 <HAL_RCC_OscConfig+0x818>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80026bc:	f7fe fd16 	bl	80010ec <HAL_GetTick>
 80026c0:	1b80      	subs	r0, r0, r6
 80026c2:	2802      	cmp	r0, #2
 80026c4:	f63f ae3c 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	0698      	lsls	r0, r3, #26
 80026cc:	d4f6      	bmi.n	80026bc <HAL_RCC_OscConfig+0x80c>
 80026ce:	e573      	b.n	80021b8 <HAL_RCC_OscConfig+0x308>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80026d0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	62b3      	str	r3, [r6, #40]	; 0x28
      tickstart = HAL_GetTick();
 80026d8:	f7fe fd08 	bl	80010ec <HAL_GetTick>
 80026dc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80026e0:	07db      	lsls	r3, r3, #31
 80026e2:	f53f acbd 	bmi.w	8002060 <HAL_RCC_OscConfig+0x1b0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe fd01 	bl	80010ec <HAL_GetTick>
 80026ea:	1bc0      	subs	r0, r0, r7
 80026ec:	2802      	cmp	r0, #2
 80026ee:	d9f6      	bls.n	80026de <HAL_RCC_OscConfig+0x82e>
 80026f0:	e626      	b.n	8002340 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_RCC_OscConfig+0x860>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e66a      	b.n	80023e4 <HAL_RCC_OscConfig+0x534>
 800270e:	bf00      	nop
 8002710:	46020c00 	.word	0x46020c00
 8002714:	46020800 	.word	0x46020800
 8002718:	80800000 	.word	0x80800000
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800271c:	f7ff f972 	bl	8001a04 <RCC_SetFlashLatencyFromMSIRange>
 8002720:	2800      	cmp	r0, #0
 8002722:	f43f ae31 	beq.w	8002388 <HAL_RCC_OscConfig+0x4d8>
 8002726:	e5ca      	b.n	80022be <HAL_RCC_OscConfig+0x40e>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002728:	f7ff f96c 	bl	8001a04 <RCC_SetFlashLatencyFromMSIRange>
 800272c:	2800      	cmp	r0, #0
 800272e:	f47f adc6 	bne.w	80022be <HAL_RCC_OscConfig+0x40e>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002732:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002734:	e5a2      	b.n	800227c <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002736:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_OscConfig+0x9ec>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e648      	b.n	80023e4 <HAL_RCC_OscConfig+0x534>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002752:	2a00      	cmp	r2, #0
 8002754:	f2c0 8082 	blt.w	800285c <HAL_RCC_OscConfig+0x9ac>
 8002758:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800275c:	f0c0 8094 	bcc.w	8002888 <HAL_RCC_OscConfig+0x9d8>
 8002760:	6a22      	ldr	r2, [r4, #32]
 8002762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002766:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800276a:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	f7ff bbe2 	b.w	8001f36 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002772:	6a21      	ldr	r1, [r4, #32]
 8002774:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8002778:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	e600      	b.n	8002382 <HAL_RCC_OscConfig+0x4d2>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002780:	6a21      	ldr	r1, [r4, #32]
 8002782:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8002786:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	e5fc      	b.n	8002388 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800278e:	2a00      	cmp	r2, #0
 8002790:	db72      	blt.n	8002878 <HAL_RCC_OscConfig+0x9c8>
 8002792:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	6a21      	ldr	r1, [r4, #32]
 800279a:	bf2b      	itete	cs
 800279c:	f422 42f8 	biccs.w	r2, r2, #31744	; 0x7c00
 80027a0:	f422 2278 	biccc.w	r2, r2, #1015808	; 0xf8000
 80027a4:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 80027a8:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	e4f1      	b.n	8002194 <HAL_RCC_OscConfig+0x2e4>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027bc:	4f37      	ldr	r7, [pc, #220]	; (800289c <HAL_RCC_OscConfig+0x9ec>)
 80027be:	e005      	b.n	80027cc <HAL_RCC_OscConfig+0x91c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c0:	f7fe fc94 	bl	80010ec <HAL_GetTick>
 80027c4:	1b80      	subs	r0, r0, r6
 80027c6:	4540      	cmp	r0, r8
 80027c8:	f63f adba 	bhi.w	8002340 <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80027d0:	051a      	lsls	r2, r3, #20
 80027d2:	d4f5      	bmi.n	80027c0 <HAL_RCC_OscConfig+0x910>
 80027d4:	e482      	b.n	80020dc <HAL_RCC_OscConfig+0x22c>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80027d6:	6a21      	ldr	r1, [r4, #32]
 80027d8:	f422 2278 	bic.w	r2, r2, #1015808	; 0xf8000
 80027dc:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	e5ce      	b.n	8002382 <HAL_RCC_OscConfig+0x4d2>
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e4:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 80027e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027e8:	6b6d      	ldr	r5, [r5, #52]	; 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ea:	f43f ad69 	beq.w	80022c0 <HAL_RCC_OscConfig+0x410>
 80027ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80027f0:	f003 0103 	and.w	r1, r3, #3
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f4:	4291      	cmp	r1, r2
 80027f6:	f47f ad62 	bne.w	80022be <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80027fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80027fc:	f3c3 2103 	ubfx	r1, r3, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002800:	3a01      	subs	r2, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	4291      	cmp	r1, r2
 8002804:	f47f ad5b 	bne.w	80022be <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002808:	6c62      	ldr	r2, [r4, #68]	; 0x44
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800280a:	f3c3 3303 	ubfx	r3, r3, #12, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800280e:	4293      	cmp	r3, r2
 8002810:	f47f ad55 	bne.w	80022be <HAL_RCC_OscConfig+0x40e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002814:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002816:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800281a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	f47f ad4e 	bne.w	80022be <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002822:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002824:	f3c5 2246 	ubfx	r2, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002828:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	f47f ad47 	bne.w	80022be <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002830:	6d23      	ldr	r3, [r4, #80]	; 0x50
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002832:	f3c5 4206 	ubfx	r2, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002836:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	f47f ad40 	bne.w	80022be <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800283e:	6d60      	ldr	r0, [r4, #84]	; 0x54
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002840:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002844:	3801      	subs	r0, #1
  return HAL_OK;
 8002846:	1a28      	subs	r0, r5, r0
 8002848:	bf18      	it	ne
 800284a:	2001      	movne	r0, #1
 800284c:	e538      	b.n	80022c0 <HAL_RCC_OscConfig+0x410>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800284e:	6a21      	ldr	r1, [r4, #32]
 8002850:	f422 2278 	bic.w	r2, r2, #1015808	; 0xf8000
 8002854:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	e595      	b.n	8002388 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800285c:	6a22      	ldr	r2, [r4, #32]
 800285e:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8002862:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002866:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	f7ff bb64 	b.w	8001f36 <HAL_RCC_OscConfig+0x86>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800286e:	68ea      	ldr	r2, [r5, #12]
 8002870:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002874:	60ea      	str	r2, [r5, #12]
 8002876:	e6c0      	b.n	80025fa <HAL_RCC_OscConfig+0x74a>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	6a21      	ldr	r1, [r4, #32]
 800287c:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8002880:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	e485      	b.n	8002194 <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002888:	6a22      	ldr	r2, [r4, #32]
 800288a:	f423 2378 	bic.w	r3, r3, #1015808	; 0xf8000
 800288e:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
 8002892:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	f7ff bb4e 	b.w	8001f36 <HAL_RCC_OscConfig+0x86>
 800289a:	bf00      	nop
 800289c:	46020c00 	.word	0x46020c00

080028a0 <HAL_RCC_GetHCLKFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a0:	4a49      	ldr	r2, [pc, #292]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x128>)
{
 80028a2:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a4:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028a8:	f013 030c 	ands.w	r3, r3, #12
 80028ac:	d05c      	beq.n	8002968 <HAL_RCC_GetHCLKFreq+0xc8>
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d06d      	beq.n	800298e <HAL_RCC_GetHCLKFreq+0xee>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b2:	69d2      	ldr	r2, [r2, #28]
 80028b4:	f002 020c 	and.w	r2, r2, #12
 80028b8:	2a04      	cmp	r2, #4
 80028ba:	d066      	beq.n	800298a <HAL_RCC_GetHCLKFreq+0xea>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d064      	beq.n	800298a <HAL_RCC_GetHCLKFreq+0xea>
  uint32_t msirange = 0U;
 80028c0:	2000      	movs	r0, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d17e      	bne.n	80029c4 <HAL_RCC_GetHCLKFreq+0x124>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80028c6:	4940      	ldr	r1, [pc, #256]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x128>)
 80028c8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80028ca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80028cc:	f004 0c03 	and.w	ip, r4, #3
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80028d0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80028d2:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80028d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80028d8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
 80028dc:	fb04 f303 	mul.w	r3, r4, r3
 80028e0:	ee07 3a90 	vmov	s15, r3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80028e4:	f3c2 2203 	ubfx	r2, r2, #8, #4
      switch (pllsource)
 80028e8:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80028ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80028f0:	f102 0201 	add.w	r2, r2, #1
      switch (pllsource)
 80028f4:	d002      	beq.n	80028fc <HAL_RCC_GetHCLKFreq+0x5c>
 80028f6:	f1bc 0f03 	cmp.w	ip, #3
 80028fa:	d14f      	bne.n	800299c <HAL_RCC_GetHCLKFreq+0xfc>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028fc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80028fe:	ee07 2a10 	vmov	s14, r2
 8002902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002906:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800290a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800290e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002912:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80029cc <HAL_RCC_GetHCLKFreq+0x12c>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002916:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800291a:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 80029d0 <HAL_RCC_GetHCLKFreq+0x130>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800291e:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002922:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002926:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x128>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800292c:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002932:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002936:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800293a:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800293c:	ee07 3a90 	vmov	s15, r3
 8002940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002944:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002948:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800294c:	ee17 0a90 	vmov	r0, s15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x128>)
 8002952:	4920      	ldr	r1, [pc, #128]	; (80029d4 <HAL_RCC_GetHCLKFreq+0x134>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a20      	ldr	r2, [pc, #128]	; (80029d8 <HAL_RCC_GetHCLKFreq+0x138>)
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	5ccb      	ldrb	r3, [r1, r3]
}
 800295e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002962:	40d8      	lsrs	r0, r3
 8002964:	6010      	str	r0, [r2, #0]
}
 8002966:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002968:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x128>)
 800296a:	6891      	ldr	r1, [r2, #8]
 800296c:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800296e:	bf54      	ite	pl
 8002970:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002974:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8002976:	4919      	ldr	r1, [pc, #100]	; (80029dc <HAL_RCC_GetHCLKFreq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002978:	bf54      	ite	pl
 800297a:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800297e:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8002980:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0e3      	beq.n	8002950 <HAL_RCC_GetHCLKFreq+0xb0>
 8002988:	e79b      	b.n	80028c2 <HAL_RCC_GetHCLKFreq+0x22>
    sysclockfreq = HSE_VALUE;
 800298a:	4815      	ldr	r0, [pc, #84]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x140>)
 800298c:	e7e0      	b.n	8002950 <HAL_RCC_GetHCLKFreq+0xb0>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800298e:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002992:	2901      	cmp	r1, #1
 8002994:	d0e8      	beq.n	8002968 <HAL_RCC_GetHCLKFreq+0xc8>
  uint32_t msirange = 0U;
 8002996:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002998:	69d3      	ldr	r3, [r2, #28]
 800299a:	e794      	b.n	80028c6 <HAL_RCC_GetHCLKFreq+0x26>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800299c:	ee07 0a10 	vmov	s14, r0
 80029a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80029a2:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 80029a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029aa:	ee06 3a10 	vmov	s12, r3
 80029ae:	ee07 2a10 	vmov	s14, r2
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80029b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80029ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80029be:	eddf 5a03 	vldr	s11, [pc, #12]	; 80029cc <HAL_RCC_GetHCLKFreq+0x12c>
 80029c2:	e7ac      	b.n	800291e <HAL_RCC_GetHCLKFreq+0x7e>
 80029c4:	2000      	movs	r0, #0
 80029c6:	e7c3      	b.n	8002950 <HAL_RCC_GetHCLKFreq+0xb0>
 80029c8:	46020c00 	.word	0x46020c00
 80029cc:	39000000 	.word	0x39000000
 80029d0:	4b742400 	.word	0x4b742400
 80029d4:	08007ad8 	.word	0x08007ad8
 80029d8:	20000040 	.word	0x20000040
 80029dc:	08007af0 	.word	0x08007af0
 80029e0:	00f42400 	.word	0x00f42400

080029e4 <HAL_RCC_GetPCLK1Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e4:	494c      	ldr	r1, [pc, #304]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x134>)
{
 80029e6:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e8:	69cb      	ldr	r3, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ea:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029ec:	f013 030c 	ands.w	r3, r3, #12
 80029f0:	d061      	beq.n	8002ab6 <HAL_RCC_GetPCLK1Freq+0xd2>
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d072      	beq.n	8002adc <HAL_RCC_GetPCLK1Freq+0xf8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f6:	69ca      	ldr	r2, [r1, #28]
 80029f8:	f002 020c 	and.w	r2, r2, #12
 80029fc:	2a04      	cmp	r2, #4
 80029fe:	d06b      	beq.n	8002ad8 <HAL_RCC_GetPCLK1Freq+0xf4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d069      	beq.n	8002ad8 <HAL_RCC_GetPCLK1Freq+0xf4>
  uint32_t msirange = 0U;
 8002a04:	2200      	movs	r2, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	f040 8083 	bne.w	8002b12 <HAL_RCC_GetPCLK1Freq+0x12e>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002a0c:	4842      	ldr	r0, [pc, #264]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x134>)
 8002a0e:	6a84      	ldr	r4, [r0, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002a10:	6a81      	ldr	r1, [r0, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002a12:	6a83      	ldr	r3, [r0, #40]	; 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a14:	6b85      	ldr	r5, [r0, #56]	; 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002a16:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a1a:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8002a1e:	fb0c f303 	mul.w	r3, ip, r3
 8002a22:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002a26:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002a2a:	f3c1 2103 	ubfx	r1, r1, #8, #4
      switch (pllsource)
 8002a2e:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002a34:	f101 0101 	add.w	r1, r1, #1
      switch (pllsource)
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_GetPCLK1Freq+0x5a>
 8002a3a:	2c03      	cmp	r4, #3
 8002a3c:	d155      	bne.n	8002aea <HAL_RCC_GetPCLK1Freq+0x106>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a40:	ee07 1a10 	vmov	s14, r1
 8002a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a48:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a50:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a54:	eddf 5a31 	vldr	s11, [pc, #196]	; 8002b1c <HAL_RCC_GetPCLK1Freq+0x138>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a5c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8002b20 <HAL_RCC_GetPCLK1Freq+0x13c>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a60:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a64:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a68:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x134>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a6e:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a74:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002a78:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002a7c:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a8a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002a8e:	ee17 2a90 	vmov	r2, s15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a92:	4921      	ldr	r1, [pc, #132]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x134>)
 8002a94:	4823      	ldr	r0, [pc, #140]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x140>)
 8002a96:	6a0b      	ldr	r3, [r1, #32]
 8002a98:	4c23      	ldr	r4, [pc, #140]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x144>)
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	5cc0      	ldrb	r0, [r0, r3]
 8002aa0:	fa22 f000 	lsr.w	r0, r2, r0
 8002aa4:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002aa6:	6a0b      	ldr	r3, [r1, #32]
 8002aa8:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x148>)
 8002aaa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
}
 8002ab0:	bc30      	pop	{r4, r5}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002ab2:	40d8      	lsrs	r0, r3
}
 8002ab4:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002ab6:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x134>)
 8002ab8:	6891      	ldr	r1, [r2, #8]
 8002aba:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002abc:	bf54      	ite	pl
 8002abe:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002ac2:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8002ac4:	491a      	ldr	r1, [pc, #104]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x14c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002ac6:	bf54      	ite	pl
 8002ac8:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002acc:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8002ace:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0dd      	beq.n	8002a92 <HAL_RCC_GetPCLK1Freq+0xae>
 8002ad6:	e796      	b.n	8002a06 <HAL_RCC_GetPCLK1Freq+0x22>
    sysclockfreq = HSE_VALUE;
 8002ad8:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x150>)
 8002ada:	e7da      	b.n	8002a92 <HAL_RCC_GetPCLK1Freq+0xae>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002adc:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ae0:	2a01      	cmp	r2, #1
 8002ae2:	d0e8      	beq.n	8002ab6 <HAL_RCC_GetPCLK1Freq+0xd2>
  uint32_t msirange = 0U;
 8002ae4:	2200      	movs	r2, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae6:	69cb      	ldr	r3, [r1, #28]
 8002ae8:	e790      	b.n	8002a0c <HAL_RCC_GetPCLK1Freq+0x28>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002aea:	ee07 2a10 	vmov	s14, r2
 8002aee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002af0:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8002af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af8:	ee06 3a10 	vmov	s12, r3
 8002afc:	ee07 1a10 	vmov	s14, r1
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b04:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002b08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b0c:	eddf 5a03 	vldr	s11, [pc, #12]	; 8002b1c <HAL_RCC_GetPCLK1Freq+0x138>
 8002b10:	e7a6      	b.n	8002a60 <HAL_RCC_GetPCLK1Freq+0x7c>
 8002b12:	2200      	movs	r2, #0
 8002b14:	e7bd      	b.n	8002a92 <HAL_RCC_GetPCLK1Freq+0xae>
 8002b16:	bf00      	nop
 8002b18:	46020c00 	.word	0x46020c00
 8002b1c:	39000000 	.word	0x39000000
 8002b20:	4b742400 	.word	0x4b742400
 8002b24:	08007ad8 	.word	0x08007ad8
 8002b28:	20000040 	.word	0x20000040
 8002b2c:	08007ae8 	.word	0x08007ae8
 8002b30:	08007af0 	.word	0x08007af0
 8002b34:	00f42400 	.word	0x00f42400

08002b38 <HAL_RCC_GetPCLK2Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b38:	494c      	ldr	r1, [pc, #304]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x134>)
{
 8002b3a:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3c:	69cb      	ldr	r3, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b3e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b40:	f013 030c 	ands.w	r3, r3, #12
 8002b44:	d061      	beq.n	8002c0a <HAL_RCC_GetPCLK2Freq+0xd2>
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d072      	beq.n	8002c30 <HAL_RCC_GetPCLK2Freq+0xf8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4a:	69ca      	ldr	r2, [r1, #28]
 8002b4c:	f002 020c 	and.w	r2, r2, #12
 8002b50:	2a04      	cmp	r2, #4
 8002b52:	d06b      	beq.n	8002c2c <HAL_RCC_GetPCLK2Freq+0xf4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d069      	beq.n	8002c2c <HAL_RCC_GetPCLK2Freq+0xf4>
  uint32_t msirange = 0U;
 8002b58:	2200      	movs	r2, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	f040 8083 	bne.w	8002c66 <HAL_RCC_GetPCLK2Freq+0x12e>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002b60:	4842      	ldr	r0, [pc, #264]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x134>)
 8002b62:	6a84      	ldr	r4, [r0, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002b64:	6a81      	ldr	r1, [r0, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002b66:	6a83      	ldr	r3, [r0, #40]	; 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b68:	6b85      	ldr	r5, [r0, #56]	; 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002b6a:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b6e:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8002b72:	fb0c f303 	mul.w	r3, ip, r3
 8002b76:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002b7a:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002b7e:	f3c1 2103 	ubfx	r1, r1, #8, #4
      switch (pllsource)
 8002b82:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002b88:	f101 0101 	add.w	r1, r1, #1
      switch (pllsource)
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_GetPCLK2Freq+0x5a>
 8002b8e:	2c03      	cmp	r4, #3
 8002b90:	d155      	bne.n	8002c3e <HAL_RCC_GetPCLK2Freq+0x106>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b94:	ee07 1a10 	vmov	s14, r1
 8002b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9c:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ba4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ba8:	eddf 5a31 	vldr	s11, [pc, #196]	; 8002c70 <HAL_RCC_GetPCLK2Freq+0x138>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bb0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8002c74 <HAL_RCC_GetPCLK2Freq+0x13c>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bb4:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bb8:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bbc:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002bc0:	4b2a      	ldr	r3, [pc, #168]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x134>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bc2:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bc8:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002bcc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002bd0:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bda:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bde:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002be2:	ee17 2a90 	vmov	r2, s15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002be6:	4921      	ldr	r1, [pc, #132]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x134>)
 8002be8:	4823      	ldr	r0, [pc, #140]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x140>)
 8002bea:	6a0b      	ldr	r3, [r1, #32]
 8002bec:	4c23      	ldr	r4, [pc, #140]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x144>)
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	5cc0      	ldrb	r0, [r0, r3]
 8002bf4:	fa22 f000 	lsr.w	r0, r2, r0
 8002bf8:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002bfa:	6a0b      	ldr	r3, [r1, #32]
 8002bfc:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x148>)
 8002bfe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c04:	bc30      	pop	{r4, r5}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002c06:	40d8      	lsrs	r0, r3
}
 8002c08:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002c0a:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x134>)
 8002c0c:	6891      	ldr	r1, [r2, #8]
 8002c0e:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002c10:	bf54      	ite	pl
 8002c12:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002c16:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8002c18:	491a      	ldr	r1, [pc, #104]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x14c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002c1a:	bf54      	ite	pl
 8002c1c:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002c20:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8002c22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0dd      	beq.n	8002be6 <HAL_RCC_GetPCLK2Freq+0xae>
 8002c2a:	e796      	b.n	8002b5a <HAL_RCC_GetPCLK2Freq+0x22>
    sysclockfreq = HSE_VALUE;
 8002c2c:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x150>)
 8002c2e:	e7da      	b.n	8002be6 <HAL_RCC_GetPCLK2Freq+0xae>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c30:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c34:	2a01      	cmp	r2, #1
 8002c36:	d0e8      	beq.n	8002c0a <HAL_RCC_GetPCLK2Freq+0xd2>
  uint32_t msirange = 0U;
 8002c38:	2200      	movs	r2, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c3a:	69cb      	ldr	r3, [r1, #28]
 8002c3c:	e790      	b.n	8002b60 <HAL_RCC_GetPCLK2Freq+0x28>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c3e:	ee07 2a10 	vmov	s14, r2
 8002c42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c44:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8002c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4c:	ee06 3a10 	vmov	s12, r3
 8002c50:	ee07 1a10 	vmov	s14, r1
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c58:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002c5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002c60:	eddf 5a03 	vldr	s11, [pc, #12]	; 8002c70 <HAL_RCC_GetPCLK2Freq+0x138>
 8002c64:	e7a6      	b.n	8002bb4 <HAL_RCC_GetPCLK2Freq+0x7c>
 8002c66:	2200      	movs	r2, #0
 8002c68:	e7bd      	b.n	8002be6 <HAL_RCC_GetPCLK2Freq+0xae>
 8002c6a:	bf00      	nop
 8002c6c:	46020c00 	.word	0x46020c00
 8002c70:	39000000 	.word	0x39000000
 8002c74:	4b742400 	.word	0x4b742400
 8002c78:	08007ad8 	.word	0x08007ad8
 8002c7c:	20000040 	.word	0x20000040
 8002c80:	08007ae8 	.word	0x08007ae8
 8002c84:	08007af0 	.word	0x08007af0
 8002c88:	00f42400 	.word	0x00f42400

08002c8c <HAL_RCC_GetPCLK3Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8c:	494c      	ldr	r1, [pc, #304]	; (8002dc0 <HAL_RCC_GetPCLK3Freq+0x134>)
{
 8002c8e:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c90:	69cb      	ldr	r3, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c92:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c94:	f013 030c 	ands.w	r3, r3, #12
 8002c98:	d061      	beq.n	8002d5e <HAL_RCC_GetPCLK3Freq+0xd2>
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d072      	beq.n	8002d84 <HAL_RCC_GetPCLK3Freq+0xf8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c9e:	69ca      	ldr	r2, [r1, #28]
 8002ca0:	f002 020c 	and.w	r2, r2, #12
 8002ca4:	2a04      	cmp	r2, #4
 8002ca6:	d06b      	beq.n	8002d80 <HAL_RCC_GetPCLK3Freq+0xf4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d069      	beq.n	8002d80 <HAL_RCC_GetPCLK3Freq+0xf4>
  uint32_t msirange = 0U;
 8002cac:	2200      	movs	r2, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	f040 8083 	bne.w	8002dba <HAL_RCC_GetPCLK3Freq+0x12e>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002cb4:	4842      	ldr	r0, [pc, #264]	; (8002dc0 <HAL_RCC_GetPCLK3Freq+0x134>)
 8002cb6:	6a84      	ldr	r4, [r0, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002cb8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002cba:	6a83      	ldr	r3, [r0, #40]	; 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cbc:	6b85      	ldr	r5, [r0, #56]	; 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002cbe:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cc2:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8002cc6:	fb0c f303 	mul.w	r3, ip, r3
 8002cca:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002cce:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002cd2:	f3c1 2103 	ubfx	r1, r1, #8, #4
      switch (pllsource)
 8002cd6:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002cdc:	f101 0101 	add.w	r1, r1, #1
      switch (pllsource)
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_GetPCLK3Freq+0x5a>
 8002ce2:	2c03      	cmp	r4, #3
 8002ce4:	d155      	bne.n	8002d92 <HAL_RCC_GetPCLK3Freq+0x106>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ce6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ce8:	ee07 1a10 	vmov	s14, r1
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002cf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cf8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002cfc:	eddf 5a31 	vldr	s11, [pc, #196]	; 8002dc4 <HAL_RCC_GetPCLK3Freq+0x138>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d04:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8002dc8 <HAL_RCC_GetPCLK3Freq+0x13c>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d08:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d0c:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d10:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_RCC_GetPCLK3Freq+0x134>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d16:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d1c:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002d20:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002d24:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d32:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002d36:	ee17 2a90 	vmov	r2, s15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d3a:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <HAL_RCC_GetPCLK3Freq+0x134>)
 8002d3c:	4823      	ldr	r0, [pc, #140]	; (8002dcc <HAL_RCC_GetPCLK3Freq+0x140>)
 8002d3e:	6a0b      	ldr	r3, [r1, #32]
 8002d40:	4c23      	ldr	r4, [pc, #140]	; (8002dd0 <HAL_RCC_GetPCLK3Freq+0x144>)
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	5cc0      	ldrb	r0, [r0, r3]
 8002d48:	fa22 f000 	lsr.w	r0, r2, r0
 8002d4c:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002d4e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002d50:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <HAL_RCC_GetPCLK3Freq+0x148>)
 8002d52:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d58:	bc30      	pop	{r4, r5}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002d5a:	40d8      	lsrs	r0, r3
}
 8002d5c:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002d5e:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_RCC_GetPCLK3Freq+0x134>)
 8002d60:	6891      	ldr	r1, [r2, #8]
 8002d62:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002d64:	bf54      	ite	pl
 8002d66:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002d6a:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8002d6c:	491a      	ldr	r1, [pc, #104]	; (8002dd8 <HAL_RCC_GetPCLK3Freq+0x14c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002d6e:	bf54      	ite	pl
 8002d70:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002d74:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8002d76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0dd      	beq.n	8002d3a <HAL_RCC_GetPCLK3Freq+0xae>
 8002d7e:	e796      	b.n	8002cae <HAL_RCC_GetPCLK3Freq+0x22>
    sysclockfreq = HSE_VALUE;
 8002d80:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <HAL_RCC_GetPCLK3Freq+0x150>)
 8002d82:	e7da      	b.n	8002d3a <HAL_RCC_GetPCLK3Freq+0xae>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d84:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d88:	2a01      	cmp	r2, #1
 8002d8a:	d0e8      	beq.n	8002d5e <HAL_RCC_GetPCLK3Freq+0xd2>
  uint32_t msirange = 0U;
 8002d8c:	2200      	movs	r2, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d8e:	69cb      	ldr	r3, [r1, #28]
 8002d90:	e790      	b.n	8002cb4 <HAL_RCC_GetPCLK3Freq+0x28>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d92:	ee07 2a10 	vmov	s14, r2
 8002d96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d98:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8002d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da0:	ee06 3a10 	vmov	s12, r3
 8002da4:	ee07 1a10 	vmov	s14, r1
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002db0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002db4:	eddf 5a03 	vldr	s11, [pc, #12]	; 8002dc4 <HAL_RCC_GetPCLK3Freq+0x138>
 8002db8:	e7a6      	b.n	8002d08 <HAL_RCC_GetPCLK3Freq+0x7c>
 8002dba:	2200      	movs	r2, #0
 8002dbc:	e7bd      	b.n	8002d3a <HAL_RCC_GetPCLK3Freq+0xae>
 8002dbe:	bf00      	nop
 8002dc0:	46020c00 	.word	0x46020c00
 8002dc4:	39000000 	.word	0x39000000
 8002dc8:	4b742400 	.word	0x4b742400
 8002dcc:	08007ad8 	.word	0x08007ad8
 8002dd0:	20000040 	.word	0x20000040
 8002dd4:	08007ae8 	.word	0x08007ae8
 8002dd8:	08007af0 	.word	0x08007af0
 8002ddc:	00f42400 	.word	0x00f42400

08002de0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8002de0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8002de2:	4c34      	ldr	r4, [pc, #208]	; (8002eb4 <RCCEx_PLL3_Config+0xd4>)
{
 8002de4:	4606      	mov	r6, r0
  __HAL_RCC_PLL3_DISABLE();
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002dee:	f7fe f97d 	bl	80010ec <HAL_GetTick>
 8002df2:	4605      	mov	r5, r0

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002df4:	e004      	b.n	8002e00 <RCCEx_PLL3_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8002df6:	f7fe f979 	bl	80010ec <HAL_GetTick>
 8002dfa:	1b43      	subs	r3, r0, r5
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d856      	bhi.n	8002eae <RCCEx_PLL3_Config+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	d4f7      	bmi.n	8002df6 <RCCEx_PLL3_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8002e06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e08:	e9d6 1200 	ldrd	r1, r2, [r6]
 8002e0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e10:	f023 0303 	bic.w	r3, r3, #3
 8002e14:	430b      	orrs	r3, r1
 8002e16:	3a01      	subs	r2, #1
 8002e18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e1c:	6323      	str	r3, [r4, #48]	; 0x30
 8002e1e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002e20:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8002e24:	4d24      	ldr	r5, [pc, #144]	; (8002eb8 <RCCEx_PLL3_Config+0xd8>)
 8002e26:	1e51      	subs	r1, r2, #1
 8002e28:	6932      	ldr	r2, [r6, #16]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	4005      	ands	r5, r0
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	0249      	lsls	r1, r1, #9
 8002e34:	3a01      	subs	r2, #1
 8002e36:	b289      	uxth	r1, r1
 8002e38:	432b      	orrs	r3, r5
 8002e3a:	0412      	lsls	r2, r2, #16
 8002e3c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002e40:	430b      	orrs	r3, r1
 8002e42:	4313      	orrs	r3, r2
 8002e44:	6972      	ldr	r2, [r6, #20]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002e46:	4d1b      	ldr	r5, [pc, #108]	; (8002eb4 <RCCEx_PLL3_Config+0xd4>)
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8002e48:	3a01      	subs	r2, #1
 8002e4a:	0612      	lsls	r2, r2, #24
 8002e4c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002e50:	4313      	orrs	r3, r2
 8002e52:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8002e54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e56:	69b2      	ldr	r2, [r6, #24]
 8002e58:	f023 030c 	bic.w	r3, r3, #12
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	6323      	str	r3, [r4, #48]	; 0x30
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8002e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e62:	6a32      	ldr	r2, [r6, #32]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	6323      	str	r3, [r4, #48]	; 0x30
  __HAL_RCC_PLL3FRACN_DISABLE();
 8002e68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e6a:	f023 0310 	bic.w	r3, r3, #16
 8002e6e:	6323      	str	r3, [r4, #48]	; 0x30
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002e70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e72:	69f2      	ldr	r2, [r6, #28]
 8002e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002e80:	64a3      	str	r3, [r4, #72]	; 0x48
  __HAL_RCC_PLL3FRACN_ENABLE();
 8002e82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e84:	f043 0310 	orr.w	r3, r3, #16
 8002e88:	6323      	str	r3, [r4, #48]	; 0x30
  __HAL_RCC_PLL3_ENABLE();
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002e92:	f7fe f92b 	bl	80010ec <HAL_GetTick>
 8002e96:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002e98:	e004      	b.n	8002ea4 <RCCEx_PLL3_Config+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8002e9a:	f7fe f927 	bl	80010ec <HAL_GetTick>
 8002e9e:	1b00      	subs	r0, r0, r4
 8002ea0:	2802      	cmp	r0, #2
 8002ea2:	d804      	bhi.n	8002eae <RCCEx_PLL3_Config+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	d5f7      	bpl.n	8002e9a <RCCEx_PLL3_Config+0xba>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002eaa:	2000      	movs	r0, #0
}
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8002eae:	2003      	movs	r0, #3
}
 8002eb0:	bd70      	pop	{r4, r5, r6, pc}
 8002eb2:	bf00      	nop
 8002eb4:	46020c00 	.word	0x46020c00
 8002eb8:	80800000 	.word	0x80800000

08002ebc <RCCEx_PLL2_Config>:
{
 8002ebc:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLL2_DISABLE();
 8002ebe:	4c34      	ldr	r4, [pc, #208]	; (8002f90 <RCCEx_PLL2_Config+0xd4>)
{
 8002ec0:	4606      	mov	r6, r0
  __HAL_RCC_PLL2_DISABLE();
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ec8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002eca:	f7fe f90f 	bl	80010ec <HAL_GetTick>
 8002ece:	4605      	mov	r5, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002ed0:	e004      	b.n	8002edc <RCCEx_PLL2_Config+0x20>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002ed2:	f7fe f90b 	bl	80010ec <HAL_GetTick>
 8002ed6:	1b43      	subs	r3, r0, r5
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d856      	bhi.n	8002f8a <RCCEx_PLL2_Config+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	011a      	lsls	r2, r3, #4
 8002ee0:	d4f7      	bmi.n	8002ed2 <RCCEx_PLL2_Config+0x16>
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8002ee2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ee4:	e9d6 1200 	ldrd	r1, r2, [r6]
 8002ee8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002eec:	f023 0303 	bic.w	r3, r3, #3
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	3a01      	subs	r2, #1
 8002ef4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002efa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002efc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8002f00:	4d24      	ldr	r5, [pc, #144]	; (8002f94 <RCCEx_PLL2_Config+0xd8>)
 8002f02:	1e51      	subs	r1, r2, #1
 8002f04:	6932      	ldr	r2, [r6, #16]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	4005      	ands	r5, r0
 8002f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0e:	0249      	lsls	r1, r1, #9
 8002f10:	3a01      	subs	r2, #1
 8002f12:	b289      	uxth	r1, r1
 8002f14:	432b      	orrs	r3, r5
 8002f16:	0412      	lsls	r2, r2, #16
 8002f18:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	6972      	ldr	r2, [r6, #20]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002f22:	4d1b      	ldr	r5, [pc, #108]	; (8002f90 <RCCEx_PLL2_Config+0xd4>)
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0612      	lsls	r2, r2, #24
 8002f28:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	63e3      	str	r3, [r4, #60]	; 0x3c
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8002f30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f32:	69b2      	ldr	r2, [r6, #24]
 8002f34:	f023 030c 	bic.w	r3, r3, #12
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8002f3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f3e:	6a32      	ldr	r2, [r6, #32]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_PLL2FRACN_DISABLE();
 8002f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f46:	f023 0310 	bic.w	r3, r3, #16
 8002f4a:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f4e:	69f2      	ldr	r2, [r6, #28]
 8002f50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002f5c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_RCC_PLL2FRACN_ENABLE();
 8002f5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f60:	f043 0310 	orr.w	r3, r3, #16
 8002f64:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_PLL2_ENABLE();
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f6c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002f6e:	f7fe f8bd 	bl	80010ec <HAL_GetTick>
 8002f72:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002f74:	e004      	b.n	8002f80 <RCCEx_PLL2_Config+0xc4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f76:	f7fe f8b9 	bl	80010ec <HAL_GetTick>
 8002f7a:	1b00      	subs	r0, r0, r4
 8002f7c:	2802      	cmp	r0, #2
 8002f7e:	d804      	bhi.n	8002f8a <RCCEx_PLL2_Config+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	d5f7      	bpl.n	8002f76 <RCCEx_PLL2_Config+0xba>
  return HAL_OK;
 8002f86:	2000      	movs	r0, #0
}
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8002f8a:	2003      	movs	r0, #3
}
 8002f8c:	bd70      	pop	{r4, r5, r6, pc}
 8002f8e:	bf00      	nop
 8002f90:	46020c00 	.word	0x46020c00
 8002f94:	80800000 	.word	0x80800000

08002f98 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9c:	6803      	ldr	r3, [r0, #0]
{
 8002f9e:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa0:	07dd      	lsls	r5, r3, #31
{
 8002fa2:	b082      	sub	sp, #8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa4:	d508      	bpl.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002fa6:	49a7      	ldr	r1, [pc, #668]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002fa8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002faa:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8002fae:	f022 0203 	bic.w	r2, r2, #3
 8002fb2:	4302      	orrs	r2, r0
 8002fb4:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fb8:	0798      	lsls	r0, r3, #30
 8002fba:	d508      	bpl.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002fbc:	49a1      	ldr	r1, [pc, #644]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fc0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8002fc4:	f022 020c 	bic.w	r2, r2, #12
 8002fc8:	4302      	orrs	r2, r0
 8002fca:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fce:	0759      	lsls	r1, r3, #29
 8002fd0:	d508      	bpl.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002fd2:	499c      	ldr	r1, [pc, #624]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fd6:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8002fda:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002fde:	4302      	orrs	r2, r0
 8002fe0:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fe4:	071a      	lsls	r2, r3, #28
 8002fe6:	d508      	bpl.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002fe8:	4996      	ldr	r1, [pc, #600]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002fea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002fec:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8002ff0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ff4:	4302      	orrs	r2, r0
 8002ff6:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ffa:	06df      	lsls	r7, r3, #27
 8002ffc:	d508      	bpl.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x78>
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002ffe:	4991      	ldr	r1, [pc, #580]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003000:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003002:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003006:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800300a:	4302      	orrs	r2, r0
 800300c:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003010:	069e      	lsls	r6, r3, #26
 8003012:	d508      	bpl.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003014:	498b      	ldr	r1, [pc, #556]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003016:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003018:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 800301c:	f022 0207 	bic.w	r2, r2, #7
 8003020:	4302      	orrs	r2, r0
 8003022:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003026:	065d      	lsls	r5, r3, #25
 8003028:	d508      	bpl.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800302a:	4986      	ldr	r1, [pc, #536]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800302c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800302e:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003032:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003036:	4302      	orrs	r2, r0
 8003038:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800303c:	0618      	lsls	r0, r3, #24
 800303e:	d508      	bpl.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003040:	4980      	ldr	r1, [pc, #512]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003042:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003044:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003048:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800304c:	4302      	orrs	r2, r0
 800304e:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003052:	05d9      	lsls	r1, r3, #23
 8003054:	d508      	bpl.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003056:	497b      	ldr	r1, [pc, #492]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003058:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800305a:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 800305e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003062:	4302      	orrs	r2, r0
 8003064:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003068:	025a      	lsls	r2, r3, #9
 800306a:	d508      	bpl.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800306c:	4975      	ldr	r1, [pc, #468]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800306e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003070:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003074:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003078:	4302      	orrs	r2, r0
 800307a:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800307e:	059f      	lsls	r7, r3, #22
 8003080:	d508      	bpl.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003082:	4970      	ldr	r1, [pc, #448]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003084:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003086:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 800308a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800308e:	4302      	orrs	r2, r0
 8003090:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003094:	055e      	lsls	r6, r3, #21
 8003096:	d508      	bpl.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003098:	496a      	ldr	r1, [pc, #424]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800309a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800309c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 80030a0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80030a4:	4302      	orrs	r2, r0
 80030a6:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80030aa:	051d      	lsls	r5, r3, #20
 80030ac:	d509      	bpl.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80030ae:	4965      	ldr	r1, [pc, #404]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80030b0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80030b4:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 80030b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030bc:	4302      	orrs	r2, r0
 80030be:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030c2:	0498      	lsls	r0, r3, #18
 80030c4:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 80030c8:	d525      	bpl.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80030ca:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80030ce:	2a40      	cmp	r2, #64	; 0x40
 80030d0:	f000 8265 	beq.w	800359e <HAL_RCCEx_PeriphCLKConfig+0x606>
 80030d4:	d811      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x162>
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	f000 8206 	beq.w	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80030dc:	2a20      	cmp	r2, #32
 80030de:	f040 8275 	bne.w	80035cc <HAL_RCCEx_PeriphCLKConfig+0x634>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80030e6:	f7ff fe7b 	bl	8002de0 <RCCEx_PLL3_Config>
 80030ea:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80030ec:	2d00      	cmp	r5, #0
 80030ee:	f040 8254 	bne.w	800359a <HAL_RCCEx_PeriphCLKConfig+0x602>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80030f2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	e004      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80030fa:	2a60      	cmp	r2, #96	; 0x60
 80030fc:	d002      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80030fe:	2a80      	cmp	r2, #128	; 0x80
 8003100:	f040 8264 	bne.w	80035cc <HAL_RCCEx_PeriphCLKConfig+0x634>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003104:	2500      	movs	r5, #0
 8003106:	484f      	ldr	r0, [pc, #316]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003108:	f8d0 10e4 	ldr.w	r1, [r0, #228]	; 0xe4
 800310c:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8003110:	430a      	orrs	r2, r1
 8003112:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003116:	0459      	lsls	r1, r3, #17
 8003118:	d52b      	bpl.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch (pPeriphClkInit->Sai2ClockSelection)
 800311a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800311e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003122:	f000 8245 	beq.w	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003126:	d818      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003128:	2a00      	cmp	r2, #0
 800312a:	f000 81e6 	beq.w	80034fa <HAL_RCCEx_PeriphCLKConfig+0x562>
 800312e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003132:	f040 8248 	bne.w	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003136:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800313a:	f7ff fe51 	bl	8002de0 <RCCEx_PLL3_Config>
 800313e:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003140:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8003142:	b9a6      	cbnz	r6, 800316e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003144:	493f      	ldr	r1, [pc, #252]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003146:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800314a:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 800314e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003152:	4302      	orrs	r2, r0
 8003154:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
 8003158:	e00c      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (pPeriphClkInit->Sai2ClockSelection)
 800315a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800315e:	d003      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8003160:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003164:	f040 822f 	bne.w	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8003168:	462e      	mov	r6, r5
    if (ret == HAL_OK)
 800316a:	2e00      	cmp	r6, #0
 800316c:	d0ea      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800316e:	4635      	mov	r5, r6
 8003170:	e000      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003172:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003174:	041a      	lsls	r2, r3, #16
 8003176:	d510      	bpl.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8003178:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800317c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003180:	f000 81d6 	beq.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003184:	d917      	bls.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003186:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800318a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800318e:	d015      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x224>
 8003190:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003194:	d012      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x224>
 8003196:	2501      	movs	r5, #1
 8003198:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800319a:	03df      	lsls	r7, r3, #15
 800319c:	d51e      	bpl.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 800319e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80031a2:	2a04      	cmp	r2, #4
 80031a4:	f200 8214 	bhi.w	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80031a8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80031ac:	01ef0160 	.word	0x01ef0160
 80031b0:	0160015a 	.word	0x0160015a
 80031b4:	0160      	.short	0x0160
    switch (pPeriphClkInit->AdcDacClockSelection)
 80031b6:	f432 5280 	bics.w	r2, r2, #4096	; 0x1000
 80031ba:	d1ec      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    if (ret == HAL_OK)
 80031bc:	2e00      	cmp	r6, #0
 80031be:	f040 81c0 	bne.w	8003542 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80031c2:	4920      	ldr	r1, [pc, #128]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80031c4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80031c8:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80031cc:	03df      	lsls	r7, r3, #15
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80031ce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80031d2:	ea42 0200 	orr.w	r2, r2, r0
 80031d6:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80031da:	d4e0      	bmi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x206>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80031dc:	0398      	lsls	r0, r3, #14
 80031de:	d51e      	bpl.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch (pPeriphClkInit->Adf1ClockSelection)
 80031e0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80031e4:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80031e8:	f000 81b5 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80031ec:	f200 8126 	bhi.w	800343c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80031f0:	b142      	cbz	r2, 8003204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031f2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80031f6:	f040 8129 	bne.w	800344c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031fa:	4912      	ldr	r1, [pc, #72]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80031fc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80031fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003202:	628a      	str	r2, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8003204:	2e00      	cmp	r6, #0
 8003206:	f040 817f 	bne.w	8003508 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800320a:	490e      	ldr	r1, [pc, #56]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800320c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003210:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 8003214:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003218:	4302      	orrs	r2, r0
 800321a:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800321e:	0359      	lsls	r1, r3, #13
 8003220:	d566      	bpl.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003224:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003228:	0752      	lsls	r2, r2, #29
 800322a:	f140 812c 	bpl.w	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    FlagStatus       pwrclkchanged = RESET;
 800322e:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003232:	4f05      	ldr	r7, [pc, #20]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
    tickstart = HAL_GetTick();
 800323c:	f7fd ff56 	bl	80010ec <HAL_GetTick>
 8003240:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003242:	e00a      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003244:	46020c00 	.word	0x46020c00
 8003248:	46020800 	.word	0x46020800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324c:	f7fd ff4e 	bl	80010ec <HAL_GetTick>
 8003250:	eba0 0308 	sub.w	r3, r0, r8
 8003254:	2b02      	cmp	r3, #2
 8003256:	f200 8142 	bhi.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x546>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	07db      	lsls	r3, r3, #31
 800325e:	d5f5      	bpl.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    if (ret == HAL_OK)
 8003260:	2e00      	cmp	r6, #0
 8003262:	f040 81ac 	bne.w	80035be <HAL_RCCEx_PeriphCLKConfig+0x626>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003266:	f8df a344 	ldr.w	sl, [pc, #836]	; 80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>
 800326a:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800326e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003272:	d028      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003274:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 8003278:	429a      	cmp	r2, r3
 800327a:	d026      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x332>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800327c:	f8da 10f0 	ldr.w	r1, [sl, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 8003280:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003284:	07c8      	lsls	r0, r1, #31
        __HAL_RCC_BACKUPRESET_FORCE();
 8003286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328a:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800328e:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
 8003292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003296:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800329a:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 800329e:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032a2:	f140 818e 	bpl.w	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
        tickstart = HAL_GetTick();
 80032a6:	f7fd ff21 	bl	80010ec <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80032ae:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b0:	e005      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x326>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fd ff1b 	bl	80010ec <HAL_GetTick>
 80032b6:	1bc0      	subs	r0, r0, r7
 80032b8:	4540      	cmp	r0, r8
 80032ba:	f200 8110 	bhi.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x546>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032be:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
 80032c2:	0799      	lsls	r1, r3, #30
 80032c4:	d5f5      	bpl.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80032c6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80032ca:	49b8      	ldr	r1, [pc, #736]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80032cc:	f8d1 20f0 	ldr.w	r2, [r1, #240]	; 0xf0
 80032d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
    if (pwrclkchanged == SET)
 80032da:	f1b9 0f00 	cmp.w	r9, #0
 80032de:	d006      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e0:	4ab2      	ldr	r2, [pc, #712]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80032e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80032e6:	f023 0304 	bic.w	r3, r3, #4
 80032ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	02da      	lsls	r2, r3, #11
 80032f2:	d51f      	bpl.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch (pPeriphClkInit->IclkClockSelection)
 80032f4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80032f8:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80032fc:	f000 8134 	beq.w	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003300:	f200 80a7 	bhi.w	8003452 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003304:	b14a      	cbz	r2, 800331a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003306:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800330a:	f040 80a6 	bne.w	800345a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800330e:	f104 0008 	add.w	r0, r4, #8
 8003312:	f7ff fdd3 	bl	8002ebc <RCCEx_PLL2_Config>
 8003316:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003318:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 800331a:	2e00      	cmp	r6, #0
 800331c:	f040 80f6 	bne.w	800350c <HAL_RCCEx_PeriphCLKConfig+0x574>
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003320:	49a2      	ldr	r1, [pc, #648]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003322:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003326:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 800332a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800332e:	4302      	orrs	r2, r0
 8003330:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003334:	031f      	lsls	r7, r3, #12
 8003336:	d50b      	bpl.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch (pPeriphClkInit->RngClockSelection)
 8003338:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800333c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003340:	f000 80c2 	beq.w	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8003344:	f432 5180 	bics.w	r1, r2, #4096	; 0x1000
 8003348:	f000 80be 	beq.w	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
 800334c:	2501      	movs	r5, #1
 800334e:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003350:	04d8      	lsls	r0, r3, #19
 8003352:	d509      	bpl.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003354:	4995      	ldr	r1, [pc, #596]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003356:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800335a:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 800335e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003362:	4302      	orrs	r2, r0
 8003364:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003368:	0299      	lsls	r1, r3, #10
 800336a:	d50d      	bpl.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800336c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8003370:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003374:	f000 80d6 	beq.w	8003524 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003378:	498c      	ldr	r1, [pc, #560]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800337a:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 800337e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003382:	4302      	orrs	r2, r0
 8003384:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003388:	021a      	lsls	r2, r3, #8
 800338a:	d509      	bpl.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800338c:	4987      	ldr	r1, [pc, #540]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800338e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8003392:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003396:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800339a:	4302      	orrs	r2, r0
 800339c:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80033a0:	01df      	lsls	r7, r3, #7
 80033a2:	d509      	bpl.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80033a4:	4981      	ldr	r1, [pc, #516]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80033a6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80033aa:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 80033ae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80033b2:	4302      	orrs	r2, r0
 80033b4:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80033b8:	0198      	lsls	r0, r3, #6
 80033ba:	d509      	bpl.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80033bc:	497b      	ldr	r1, [pc, #492]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80033be:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 80033c2:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 80033c6:	f022 0218 	bic.w	r2, r2, #24
 80033ca:	4302      	orrs	r2, r0
 80033cc:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033d0:	0159      	lsls	r1, r3, #5
 80033d2:	d515      	bpl.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x468>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80033d4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80033d8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80033dc:	f000 809c 	beq.w	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80033e0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80033e4:	f000 80ca 	beq.w	800357c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    if (ret == HAL_OK)
 80033e8:	2e00      	cmp	r6, #0
 80033ea:	d17b      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80033ec:	496f      	ldr	r1, [pc, #444]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80033ee:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80033f2:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 80033f6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80033fa:	4302      	orrs	r2, r0
 80033fc:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003400:	011a      	lsls	r2, r3, #4
 8003402:	d50b      	bpl.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x484>
    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003404:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003408:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800340c:	f000 809b 	beq.w	8003546 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 8003410:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8003414:	d046      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003416:	2a00      	cmp	r2, #0
 8003418:	d04a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800341a:	2501      	movs	r5, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	d509      	bpl.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003420:	4a62      	ldr	r2, [pc, #392]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003422:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003426:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800342a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800342e:	430b      	orrs	r3, r1
 8003430:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8003434:	4628      	mov	r0, r5
 8003436:	b002      	add	sp, #8
 8003438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (pPeriphClkInit->Adf1ClockSelection)
 800343c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8003440:	f43f aee0 	beq.w	8003204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003444:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8003448:	f43f aedc 	beq.w	8003204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800344c:	2501      	movs	r5, #1
 800344e:	462e      	mov	r6, r5
 8003450:	e6e5      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch (pPeriphClkInit->IclkClockSelection)
 8003452:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8003456:	f43f af60 	beq.w	800331a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800345a:	2501      	movs	r5, #1
 800345c:	462e      	mov	r6, r5
 800345e:	e769      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x39c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003460:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8003464:	f7ff fcbc 	bl	8002de0 <RCCEx_PLL3_Config>
 8003468:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800346a:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 800346c:	2e00      	cmp	r6, #0
 800346e:	d14f      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003470:	494e      	ldr	r1, [pc, #312]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003472:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003476:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 800347a:	f022 0207 	bic.w	r2, r2, #7
 800347e:	4302      	orrs	r2, r0
 8003480:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
 8003484:	e6aa      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
      pwrclkchanged = SET;
 800348a:	f04f 0901 	mov.w	r9, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	f042 0204 	orr.w	r2, r2, #4
 8003492:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80034a2:	e6c6      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034a4:	f104 0008 	add.w	r0, r4, #8
 80034a8:	f7ff fd08 	bl	8002ebc <RCCEx_PLL2_Config>
 80034ac:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80034ae:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80034b0:	bb86      	cbnz	r6, 8003514 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80034b2:	493e      	ldr	r1, [pc, #248]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80034b4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80034b8:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 80034bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034c0:	4302      	orrs	r2, r0
 80034c2:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
 80034c6:	e7a9      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x484>
    if (ret == HAL_OK)
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	d155      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80034cc:	4837      	ldr	r0, [pc, #220]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80034ce:	f8d0 10e4 	ldr.w	r1, [r0, #228]	; 0xe4
 80034d2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80034d6:	430a      	orrs	r2, r1
 80034d8:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 80034dc:	e738      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
        ret = HAL_TIMEOUT;
 80034de:	2503      	movs	r5, #3
 80034e0:	462e      	mov	r6, r5
 80034e2:	e6fa      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80034e4:	4635      	mov	r5, r6
 80034e6:	e78b      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x468>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034e8:	f104 0008 	add.w	r0, r4, #8
 80034ec:	f7ff fce6 	bl	8002ebc <RCCEx_PLL2_Config>
 80034f0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80034f2:	2d00      	cmp	r5, #0
 80034f4:	f43f adfd 	beq.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80034f8:	e04f      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x602>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034fa:	f104 0008 	add.w	r0, r4, #8
 80034fe:	f7ff fcdd 	bl	8002ebc <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003502:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003504:	4606      	mov	r6, r0
        break;
 8003506:	e61c      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003508:	4635      	mov	r5, r6
 800350a:	e688      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800350c:	4635      	mov	r5, r6
 800350e:	e711      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8003510:	4635      	mov	r5, r6
 8003512:	e663      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003514:	4635      	mov	r5, r6
 8003516:	e781      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x484>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003518:	4924      	ldr	r1, [pc, #144]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800351a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800351c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003520:	628a      	str	r2, [r1, #40]	; 0x28
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003522:	e761      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x450>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003524:	4921      	ldr	r1, [pc, #132]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003526:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003528:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800352c:	628a      	str	r2, [r1, #40]	; 0x28
 800352e:	e723      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003530:	f104 0008 	add.w	r0, r4, #8
 8003534:	f7ff fcc2 	bl	8002ebc <RCCEx_PLL2_Config>
 8003538:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800353a:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 800353c:	2e00      	cmp	r6, #0
 800353e:	f43f ae40 	beq.w	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003542:	4635      	mov	r5, r6
 8003544:	e629      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x202>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003546:	4919      	ldr	r1, [pc, #100]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003548:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800354a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800354e:	628a      	str	r2, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8003550:	2e00      	cmp	r6, #0
 8003552:	d1df      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003554:	e7ad      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003556:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800355a:	f7ff fc41 	bl	8002de0 <RCCEx_PLL3_Config>
 800355e:	4606      	mov	r6, r0
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003560:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8003562:	2e00      	cmp	r6, #0
 8003564:	d1d0      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003566:	e650      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x272>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003568:	4910      	ldr	r1, [pc, #64]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800356a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800356c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003570:	628a      	str	r2, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8003572:	2e00      	cmp	r6, #0
 8003574:	d1ca      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x574>
 8003576:	e6d3      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003578:	4635      	mov	r5, r6
 800357a:	e6e9      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800357c:	f104 0008 	add.w	r0, r4, #8
 8003580:	f7ff fc9c 	bl	8002ebc <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003584:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003586:	4606      	mov	r6, r0
 8003588:	e72e      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x450>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800358a:	4908      	ldr	r1, [pc, #32]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800358c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800358e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003592:	628a      	str	r2, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8003594:	2e00      	cmp	r6, #0
 8003596:	d1bb      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8003598:	e76a      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	e5bb      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800359e:	4803      	ldr	r0, [pc, #12]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80035a0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80035a2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80035a6:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 80035a8:	e5ac      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035aa:	bf00      	nop
 80035ac:	46020c00 	.word	0x46020c00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035b0:	4909      	ldr	r1, [pc, #36]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
        break;
 80035b2:	462e      	mov	r6, r5
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035b4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80035b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035ba:	628a      	str	r2, [r1, #40]	; 0x28
        break;
 80035bc:	e5c1      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035be:	4635      	mov	r5, r6
 80035c0:	e68b      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80035c2:	4613      	mov	r3, r2
 80035c4:	e681      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch (pPeriphClkInit->Sai2ClockSelection)
 80035c6:	2501      	movs	r5, #1
 80035c8:	462e      	mov	r6, r5
 80035ca:	e5d3      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80035cc:	2501      	movs	r5, #1
 80035ce:	e5a2      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 80035d0:	2501      	movs	r5, #1
 80035d2:	462e      	mov	r6, r5
 80035d4:	e602      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x244>
 80035d6:	bf00      	nop
 80035d8:	46020c00 	.word	0x46020c00

080035dc <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80035dc:	b530      	push	{r4, r5, lr}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80035de:	4d52      	ldr	r5, [pc, #328]	; (8003728 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 80035e0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80035e2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80035e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80035e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80035e8:	f001 0103 	and.w	r1, r1, #3
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80035ec:	f004 0e10 	and.w	lr, r4, #16
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80035f0:	6bac      	ldr	r4, [r5, #56]	; 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80035f2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80035f6:	f3c4 0ccc 	ubfx	ip, r4, #3, #13
 80035fa:	fb0e fc0c 	mul.w	ip, lr, ip
 80035fe:	ee07 ca90 	vmov	s15, ip
    switch (pll1source)
 8003602:	2902      	cmp	r1, #2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003604:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003608:	f3c2 0208 	ubfx	r2, r2, #0, #9
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800360c:	f103 0301 	add.w	r3, r3, #1
    switch (pll1source)
 8003610:	d06d      	beq.n	80036ee <HAL_RCCEx_GetPLL1ClockFreq+0x112>
 8003612:	2903      	cmp	r1, #3
 8003614:	d06b      	beq.n	80036ee <HAL_RCCEx_GetPLL1ClockFreq+0x112>
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003616:	ee07 2a90 	vmov	s15, r2
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800361a:	68a9      	ldr	r1, [r5, #8]
 800361c:	4a43      	ldr	r2, [pc, #268]	; (800372c <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 800361e:	0209      	lsls	r1, r1, #8
 8003620:	bf4b      	itete	mi
 8003622:	68a9      	ldrmi	r1, [r5, #8]
 8003624:	f8d5 10f4 	ldrpl.w	r1, [r5, #244]	; 0xf4
 8003628:	0f09      	lsrmi	r1, r1, #28
 800362a:	f3c1 3103 	ubfxpl	r1, r1, #12, #4
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800362e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eb02 0381 	add.w	r3, r2, r1, lsl #2
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800363a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800363e:	edd3 5a00 	vldr	s11, [r3]
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003642:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364a:	eef8 5a65 	vcvt.f32.u32	s11, s11
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800364e:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8003730 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003652:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003656:	eef0 7a47 	vmov.f32	s15, s14
 800365a:	eee6 7a85 	vfma.f32	s15, s13, s10
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800365e:	ee26 7a27 	vmul.f32	s14, s12, s15
    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003662:	4a31      	ldr	r2, [pc, #196]	; (8003728 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 8003664:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003666:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800366a:	d010      	beq.n	800368e <HAL_RCCEx_GetPLL1ClockFreq+0xb2>
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800366c:	6b53      	ldr	r3, [r2, #52]	; 0x34
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800366e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003672:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003676:	ee06 3a90 	vmov	s13, r3
 800367a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800367e:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003682:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800368a:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800368e:	4a26      	ldr	r2, [pc, #152]	; (8003728 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 8003690:	6003      	str	r3, [r0, #0]
 8003692:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003694:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8003698:	d010      	beq.n	80036bc <HAL_RCCEx_GetPLL1ClockFreq+0xe0>
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800369a:	6b53      	ldr	r3, [r2, #52]	; 0x34
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800369c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80036a0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80036a4:	ee06 3a90 	vmov	s13, r3
 80036a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80036ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80036b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036b8:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80036bc:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 80036be:	6043      	str	r3, [r0, #4]
 80036c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80036c2:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
 80036c6:	d010      	beq.n	80036ea <HAL_RCCEx_GetPLL1ClockFreq+0x10e>
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80036c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80036ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80036ce:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80036d2:	ee06 3a90 	vmov	s13, r3
 80036d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80036da:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80036de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036e6:	ee17 3a90 	vmov	r3, s15
 80036ea:	6083      	str	r3, [r0, #8]
}
 80036ec:	bd30      	pop	{r4, r5, pc}
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036ee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80036f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f8:	ee07 2a10 	vmov	s14, r2
 80036fc:	ee07 3a90 	vmov	s15, r3
 8003700:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003708:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800370c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8003734 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003710:	eddf 5a07 	vldr	s11, [pc, #28]	; 8003730 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003714:	ee85 6a27 	vdiv.f32	s12, s10, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003718:	eef0 7a47 	vmov.f32	s15, s14
 800371c:	eee6 7aa5 	vfma.f32	s15, s13, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003720:	ee26 7a27 	vmul.f32	s14, s12, s15
        break;
 8003724:	e79d      	b.n	8003662 <HAL_RCCEx_GetPLL1ClockFreq+0x86>
 8003726:	bf00      	nop
 8003728:	46020c00 	.word	0x46020c00
 800372c:	08007af0 	.word	0x08007af0
 8003730:	39000000 	.word	0x39000000
 8003734:	4b742400 	.word	0x4b742400

08003738 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8003738:	b530      	push	{r4, r5, lr}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800373a:	4d52      	ldr	r5, [pc, #328]	; (8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 800373c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800373e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003740:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003742:	6aec      	ldr	r4, [r5, #44]	; 0x2c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003744:	f001 0103 	and.w	r1, r1, #3
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003748:	f004 0e10 	and.w	lr, r4, #16
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800374c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800374e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003752:	f3c4 0ccc 	ubfx	ip, r4, #3, #13
 8003756:	fb0e fc0c 	mul.w	ip, lr, ip
 800375a:	ee07 ca90 	vmov	s15, ip
    switch (pll2source)
 800375e:	2902      	cmp	r1, #2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003760:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003764:	f3c2 0208 	ubfx	r2, r2, #0, #9
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003768:	f103 0301 	add.w	r3, r3, #1
    switch (pll2source)
 800376c:	d06d      	beq.n	800384a <HAL_RCCEx_GetPLL2ClockFreq+0x112>
 800376e:	2903      	cmp	r1, #3
 8003770:	d06b      	beq.n	800384a <HAL_RCCEx_GetPLL2ClockFreq+0x112>
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003772:	ee07 2a90 	vmov	s15, r2
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003776:	68a9      	ldr	r1, [r5, #8]
 8003778:	4a43      	ldr	r2, [pc, #268]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 800377a:	0209      	lsls	r1, r1, #8
 800377c:	bf4b      	itete	mi
 800377e:	68a9      	ldrmi	r1, [r5, #8]
 8003780:	f8d5 10f4 	ldrpl.w	r1, [r5, #244]	; 0xf4
 8003784:	0f09      	lsrmi	r1, r1, #28
 8003786:	f3c1 3103 	ubfxpl	r1, r1, #12, #4
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800378a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eb02 0381 	add.w	r3, r2, r1, lsl #2
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003796:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800379a:	edd3 5a00 	vldr	s11, [r3]
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800379e:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80037a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a6:	eef8 5a65 	vcvt.f32.u32	s11, s11
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037aa:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800388c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80037ae:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037b2:	eef0 7a47 	vmov.f32	s15, s14
 80037b6:	eee6 7a85 	vfma.f32	s15, s13, s10
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80037ba:	ee26 7a27 	vmul.f32	s14, s12, s15
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80037be:	4a31      	ldr	r2, [pc, #196]	; (8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 80037c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80037c2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80037c6:	d010      	beq.n	80037ea <HAL_RCCEx_GetPLL2ClockFreq+0xb2>
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037c8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80037ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037ce:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80037d2:	ee06 3a90 	vmov	s13, r3
 80037d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80037da:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037e6:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80037ea:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 80037ec:	6003      	str	r3, [r0, #0]
 80037ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80037f0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80037f4:	d010      	beq.n	8003818 <HAL_RCCEx_GetPLL2ClockFreq+0xe0>
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037f6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80037f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037fc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003800:	ee06 3a90 	vmov	s13, r3
 8003804:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003808:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800380c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003814:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003818:	4a1a      	ldr	r2, [pc, #104]	; (8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 800381a:	6043      	str	r3, [r0, #4]
 800381c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800381e:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
 8003822:	d010      	beq.n	8003846 <HAL_RCCEx_GetPLL2ClockFreq+0x10e>
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003824:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003826:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800382a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800382e:	ee06 3a90 	vmov	s13, r3
 8003832:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003836:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800383a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800383e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003842:	ee17 3a90 	vmov	r3, s15
 8003846:	6083      	str	r3, [r0, #8]
}
 8003848:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800384a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800384c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003854:	ee07 2a10 	vmov	s14, r2
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003864:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003868:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800386c:	eddf 5a07 	vldr	s11, [pc, #28]	; 800388c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003870:	ee85 6a27 	vdiv.f32	s12, s10, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003874:	eef0 7a47 	vmov.f32	s15, s14
 8003878:	eee6 7aa5 	vfma.f32	s15, s13, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800387c:	ee26 7a27 	vmul.f32	s14, s12, s15
        break;
 8003880:	e79d      	b.n	80037be <HAL_RCCEx_GetPLL2ClockFreq+0x86>
 8003882:	bf00      	nop
 8003884:	46020c00 	.word	0x46020c00
 8003888:	08007af0 	.word	0x08007af0
 800388c:	39000000 	.word	0x39000000
 8003890:	4b742400 	.word	0x4b742400

08003894 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8003894:	b530      	push	{r4, r5, lr}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003896:	4d52      	ldr	r5, [pc, #328]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8003898:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800389a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800389c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800389e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80038a0:	f001 0103 	and.w	r1, r1, #3
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80038a4:	f004 0e10 	and.w	lr, r4, #16
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80038a8:	6cac      	ldr	r4, [r5, #72]	; 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80038aa:	f3c3 2303 	ubfx	r3, r3, #8, #4
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80038ae:	f3c4 0ccc 	ubfx	ip, r4, #3, #13
 80038b2:	fb0e fc0c 	mul.w	ip, lr, ip
 80038b6:	ee07 ca90 	vmov	s15, ip
    switch (pll3source)
 80038ba:	2902      	cmp	r1, #2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80038bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80038c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80038c4:	f103 0301 	add.w	r3, r3, #1
    switch (pll3source)
 80038c8:	d06d      	beq.n	80039a6 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
 80038ca:	2903      	cmp	r1, #3
 80038cc:	d06b      	beq.n	80039a6 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80038ce:	ee07 2a90 	vmov	s15, r2
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80038d2:	68a9      	ldr	r1, [r5, #8]
 80038d4:	4a43      	ldr	r2, [pc, #268]	; (80039e4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 80038d6:	0209      	lsls	r1, r1, #8
 80038d8:	bf4b      	itete	mi
 80038da:	68a9      	ldrmi	r1, [r5, #8]
 80038dc:	f8d5 10f4 	ldrpl.w	r1, [r5, #244]	; 0xf4
 80038e0:	0f09      	lsrmi	r1, r1, #28
 80038e2:	f3c1 3103 	ubfxpl	r1, r1, #12, #4
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80038e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eb02 0381 	add.w	r3, r2, r1, lsl #2
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80038f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80038f6:	edd3 5a00 	vldr	s11, [r3]
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80038fa:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80038fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003902:	eef8 5a65 	vcvt.f32.u32	s11, s11
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003906:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800390a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800390e:	eef0 7a47 	vmov.f32	s15, s14
 8003912:	eee6 7a85 	vfma.f32	s15, s13, s10
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003916:	ee26 7a27 	vmul.f32	s14, s12, s15
    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800391a:	4a31      	ldr	r2, [pc, #196]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 800391c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800391e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003922:	d010      	beq.n	8003946 <HAL_RCCEx_GetPLL3ClockFreq+0xb2>
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003924:	6c53      	ldr	r3, [r2, #68]	; 0x44
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003926:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800392a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800392e:	ee06 3a90 	vmov	s13, r3
 8003932:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003936:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800393a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800393e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003942:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003946:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8003948:	6003      	str	r3, [r0, #0]
 800394a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800394c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8003950:	d010      	beq.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0xe0>
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003952:	6c53      	ldr	r3, [r2, #68]	; 0x44
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003954:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003958:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800395c:	ee06 3a90 	vmov	s13, r3
 8003960:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003964:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800396c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003970:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003974:	4a1a      	ldr	r2, [pc, #104]	; (80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8003976:	6043      	str	r3, [r0, #4]
 8003978:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800397a:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
 800397e:	d010      	beq.n	80039a2 <HAL_RCCEx_GetPLL3ClockFreq+0x10e>
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003980:	6c53      	ldr	r3, [r2, #68]	; 0x44
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003982:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003986:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800398a:	ee06 3a90 	vmov	s13, r3
 800398e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003992:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800399a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399e:	ee17 3a90 	vmov	r3, s15
 80039a2:	6083      	str	r3, [r0, #8]
}
 80039a4:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80039a6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80039a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80039ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b0:	ee07 2a10 	vmov	s14, r2
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80039bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80039c0:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80039c4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80039ec <HAL_RCCEx_GetPLL3ClockFreq+0x158>
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80039c8:	eddf 5a07 	vldr	s11, [pc, #28]	; 80039e8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80039cc:	ee85 6a27 	vdiv.f32	s12, s10, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80039d0:	eef0 7a47 	vmov.f32	s15, s14
 80039d4:	eee6 7aa5 	vfma.f32	s15, s13, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80039d8:	ee26 7a27 	vmul.f32	s14, s12, s15
        break;
 80039dc:	e79d      	b.n	800391a <HAL_RCCEx_GetPLL3ClockFreq+0x86>
 80039de:	bf00      	nop
 80039e0:	46020c00 	.word	0x46020c00
 80039e4:	08007af0 	.word	0x08007af0
 80039e8:	39000000 	.word	0x39000000
 80039ec:	4b742400 	.word	0x4b742400

080039f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80039f0:	f5a0 2380 	sub.w	r3, r0, #262144	; 0x40000
 80039f4:	430b      	orrs	r3, r1
 80039f6:	f000 80ab 	beq.w	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
{
 80039fa:	b500      	push	{lr}
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80039fc:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8003a00:	430b      	orrs	r3, r1
{
 8003a02:	b085      	sub	sp, #20
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003a04:	f000 8084 	beq.w	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003a08:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	f000 80fb 	beq.w	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8003a12:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8003a16:	430b      	orrs	r3, r1
 8003a18:	f000 80c4 	beq.w	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8003a1c:	f5a0 1380 	sub.w	r3, r0, #1048576	; 0x100000
 8003a20:	430b      	orrs	r3, r1
 8003a22:	f000 8110 	beq.w	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003a26:	f5a0 1300 	sub.w	r3, r0, #2097152	; 0x200000
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	f000 8168 	beq.w	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8003a30:	1e43      	subs	r3, r0, #1
 8003a32:	430b      	orrs	r3, r1
 8003a34:	f000 818d 	beq.w	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8003a38:	1e83      	subs	r3, r0, #2
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	f000 8143 	beq.w	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8003a40:	1f03      	subs	r3, r0, #4
 8003a42:	430b      	orrs	r3, r1
 8003a44:	f000 81bf 	beq.w	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8003a48:	f1a0 0308 	sub.w	r3, r0, #8
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	f000 81f2 	beq.w	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8003a52:	f1a0 0310 	sub.w	r3, r0, #16
 8003a56:	430b      	orrs	r3, r1
 8003a58:	f000 8210 	beq.w	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8003a5c:	f1a0 0320 	sub.w	r3, r0, #32
 8003a60:	430b      	orrs	r3, r1
 8003a62:	f000 8229 	beq.w	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8003a66:	f5a0 4300 	sub.w	r3, r0, #32768	; 0x8000
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	f000 8245 	beq.w	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8003a70:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8003a74:	430b      	orrs	r3, r1
 8003a76:	f000 8266 	beq.w	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8003a7a:	f5a0 3300 	sub.w	r3, r0, #131072	; 0x20000
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	f000 80aa 	beq.w	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8003a84:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	f000 82ac 	beq.w	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8003a8e:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
 8003a92:	430b      	orrs	r3, r1
 8003a94:	f000 82d1 	beq.w	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8003a98:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	f000 81ae 	beq.w	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8003aa2:	f5a0 0380 	sub.w	r3, r0, #4194304	; 0x400000
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	f000 8324 	beq.w	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8003aac:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	f000 833e 	beq.w	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8003ab6:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8003aba:	430b      	orrs	r3, r1
 8003abc:	f000 8389 	beq.w	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8003ac0:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	f000 835f 	beq.w	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8003aca:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	f000 83f4 	beq.w	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8003ad4:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	f000 83da 	beq.w	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8003ade:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	f000 84b6 	beq.w	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8003ae8:	f100 437e 	add.w	r3, r0, #4261412864	; 0xfe000000
 8003aec:	430b      	orrs	r3, r1
 8003aee:	f000 846f 	beq.w	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8003af2:	f100 437c 	add.w	r3, r0, #4227858432	; 0xfc000000
 8003af6:	430b      	orrs	r3, r1
 8003af8:	f000 8446 	beq.w	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8003afc:	f100 4070 	add.w	r0, r0, #4026531840	; 0xf0000000
 8003b00:	ea50 0301 	orrs.w	r3, r0, r1
 8003b04:	f000 8422 	beq.w	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
      frequency = 0U;
 8003b08:	2000      	movs	r0, #0
}
 8003b0a:	b005      	add	sp, #20
 8003b0c:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003b10:	4aa4      	ldr	r2, [pc, #656]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003b12:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8003b16:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    switch (srcclk)
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d06f      	beq.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8003b1e:	d90c      	bls.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003b20:	2b60      	cmp	r3, #96	; 0x60
 8003b22:	d051      	beq.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8003b24:	2b80      	cmp	r3, #128	; 0x80
 8003b26:	bf18      	it	ne
 8003b28:	2000      	movne	r0, #0
 8003b2a:	d1ee      	bne.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b2c:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 8003b2e:	4b9e      	ldr	r3, [pc, #632]	; (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 8003b30:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003b34:	bf18      	it	ne
 8003b36:	4618      	movne	r0, r3
 8003b38:	e7e7      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d047      	beq.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	bf18      	it	ne
 8003b42:	2000      	movne	r0, #0
 8003b44:	d1e1      	bne.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b46:	a801      	add	r0, sp, #4
 8003b48:	f7ff fea4 	bl	8003894 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003b4c:	9801      	ldr	r0, [sp, #4]
        break;
 8003b4e:	e7dc      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003b50:	4a94      	ldr	r2, [pc, #592]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003b52:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003b56:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003b5e:	0792      	lsls	r2, r2, #30
 8003b60:	d503      	bpl.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	f000 80a2 	beq.w	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003b6a:	4a8e      	ldr	r2, [pc, #568]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003b6c:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8003b70:	0109      	lsls	r1, r1, #4
 8003b72:	d50b      	bpl.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b78:	d108      	bne.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003b7a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
        frequency = LSI_VALUE;
 8003b7e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003b82:	bf14      	ite	ne
 8003b84:	20fa      	movne	r0, #250	; 0xfa
 8003b86:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 8003b8a:	4770      	bx	lr
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003b8c:	4a85      	ldr	r2, [pc, #532]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003b8e:	6810      	ldr	r0, [r2, #0]
 8003b90:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003b94:	d005      	beq.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
      frequency = HSE_VALUE / 32U;
 8003b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9a:	4884      	ldr	r0, [pc, #528]	; (8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>)
 8003b9c:	bf18      	it	ne
 8003b9e:	2000      	movne	r0, #0
 8003ba0:	4770      	bx	lr
}
 8003ba2:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003ba4:	4b7f      	ldr	r3, [pc, #508]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003ba6:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003baa:	681a      	ldr	r2, [r3, #0]
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003bac:	f400 6000 	and.w	r0, r0, #2048	; 0x800
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003bb0:	0552      	lsls	r2, r2, #21
 8003bb2:	d573      	bpl.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	f000 80ee 	beq.w	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003bba:	6818      	ldr	r0, [r3, #0]
      frequency = HSI_VALUE >> 1U;
 8003bbc:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>)
 8003bbe:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003bc2:	bf18      	it	ne
 8003bc4:	4618      	movne	r0, r3
 8003bc6:	e7a0      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003bc8:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8003bcc:	e79d      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bce:	a801      	add	r0, sp, #4
 8003bd0:	f7ff fdb2 	bl	8003738 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8003bd4:	9801      	ldr	r0, [sp, #4]
        break;
 8003bd6:	e798      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8003bd8:	4a72      	ldr	r2, [pc, #456]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003bda:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8003bde:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8003be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003be6:	f000 81c8 	beq.w	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
 8003bea:	f200 81e5 	bhi.w	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 81be 	beq.w	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	bf18      	it	ne
 8003bfa:	2000      	movne	r0, #0
 8003bfc:	d185      	bne.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003bfe:	a801      	add	r0, sp, #4
 8003c00:	f7ff fcec 	bl	80035dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8003c04:	9801      	ldr	r0, [sp, #4]
        break;
 8003c06:	e780      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003c08:	4a66      	ldr	r2, [pc, #408]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003c0a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8003c0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    switch (srcclk)
 8003c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c16:	d0f2      	beq.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8003c18:	d807      	bhi.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0d7      	beq.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8003c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c22:	bf18      	it	ne
 8003c24:	2000      	movne	r0, #0
 8003c26:	d08e      	beq.n	8003b46 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8003c28:	e76f      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2e:	d032      	beq.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c34:	f040 835f 	bne.w	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c38:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 8003c3a:	4b5b      	ldr	r3, [pc, #364]	; (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 8003c3c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003c40:	bf18      	it	ne
 8003c42:	4618      	movne	r0, r3
 8003c44:	e761      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003c46:	4a57      	ldr	r2, [pc, #348]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003c48:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8003c4c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
    switch (srcclk)
 8003c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c54:	f000 809a 	beq.w	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003c58:	d80b      	bhi.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8003c5a:	b35b      	cbz	r3, 8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c60:	bf18      	it	ne
 8003c62:	2000      	movne	r0, #0
 8003c64:	f47f af51 	bne.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c68:	a801      	add	r0, sp, #4
 8003c6a:	f7ff fd65 	bl	8003738 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c6e:	9802      	ldr	r0, [sp, #8]
        break;
 8003c70:	e74b      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8003c72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c76:	d124      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003c78:	6893      	ldr	r3, [r2, #8]
 8003c7a:	0218      	lsls	r0, r3, #8
 8003c7c:	bf4c      	ite	mi
 8003c7e:	6893      	ldrmi	r3, [r2, #8]
 8003c80:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8003c84:	4a4b      	ldr	r2, [pc, #300]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>)
 8003c86:	bf4c      	ite	mi
 8003c88:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8003c8c:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8003c90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8003c94:	e739      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003c96:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8003c9a:	e736      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8003ca2:	d071      	beq.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
      frequency = HSI_VALUE >> 1U;
 8003ca4:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>)
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	bf18      	it	ne
 8003caa:	4618      	movne	r0, r3
 8003cac:	e72d      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8003cae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003cb2:	4770      	bx	lr
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003cb4:	6810      	ldr	r0, [r2, #0]
          frequency = HSI48_VALUE;
 8003cb6:	4b40      	ldr	r3, [pc, #256]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>)
 8003cb8:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8003cbc:	bf18      	it	ne
 8003cbe:	4618      	movne	r0, r3
 8003cc0:	e723      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	e721      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003cc6:	4b37      	ldr	r3, [pc, #220]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003ccc:	f013 030c 	ands.w	r3, r3, #12
 8003cd0:	d063      	beq.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	f000 80a5 	beq.w	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003cd8:	4a32      	ldr	r2, [pc, #200]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	0550      	lsls	r0, r2, #21
 8003cde:	d502      	bpl.n	8003ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	f000 8167 	beq.w	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003ce6:	4a2f      	ldr	r2, [pc, #188]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003ce8:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8003cec:	f010 0002 	ands.w	r0, r0, #2
 8003cf0:	f43f af0b 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8003cf4:	2b0c      	cmp	r3, #12
 8003cf6:	bf14      	ite	ne
 8003cf8:	2000      	movne	r0, #0
 8003cfa:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8003cfe:	e704      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003d00:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003d02:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8003d06:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8003d0a:	d157      	bne.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d10:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
      switch (srcclk)
 8003d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d18:	d038      	beq.n	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003d1a:	d806      	bhi.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80a5 	beq.w	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8003d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d26:	d09f      	beq.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8003d28:	e6ef      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003d2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d2e:	f47f aeec 	bne.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003d32:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	0211      	lsls	r1, r2, #8
 8003d38:	bf4c      	ite	mi
 8003d3a:	689b      	ldrmi	r3, [r3, #8]
 8003d3c:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>)
 8003d42:	bf4c      	ite	mi
 8003d44:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8003d48:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8003d4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
          break;
 8003d50:	e6db      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d52:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003d54:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003d58:	f013 0303 	ands.w	r3, r3, #3
 8003d5c:	d066      	beq.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d05f      	beq.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	0552      	lsls	r2, r2, #21
 8003d66:	d502      	bpl.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	f000 80ea 	beq.w	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003d6e:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8003d70:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8003d74:	f010 0002 	ands.w	r0, r0, #2
 8003d78:	f43f aec7 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	bf14      	ite	ne
 8003d80:	2000      	movne	r0, #0
 8003d82:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8003d86:	e6c0      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = 0U;
 8003d88:	4618      	mov	r0, r3
 8003d8a:	e6be      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d8c:	a801      	add	r0, sp, #4
 8003d8e:	f7ff fc25 	bl	80035dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d92:	9802      	ldr	r0, [sp, #8]
        break;
 8003d94:	e6b9      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8003d96:	4804      	ldr	r0, [pc, #16]	; (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 8003d98:	e6b7      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
}
 8003d9a:	b005      	add	sp, #20
 8003d9c:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8003da0:	f7fe be20 	b.w	80029e4 <HAL_RCC_GetPCLK1Freq>
 8003da4:	46020c00 	.word	0x46020c00
 8003da8:	00f42400 	.word	0x00f42400
 8003dac:	0007a120 	.word	0x0007a120
 8003db0:	007a1200 	.word	0x007a1200
 8003db4:	08007af0 	.word	0x08007af0
 8003db8:	02dc6c00 	.word	0x02dc6c00
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003dbc:	a801      	add	r0, sp, #4
 8003dbe:	f7ff fc0d 	bl	80035dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8003dc2:	9801      	ldr	r0, [sp, #4]
 8003dc4:	e6a1      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003dc6:	4bac      	ldr	r3, [pc, #688]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003dcc:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 8003dd0:	d0e3      	beq.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d025      	beq.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003dd6:	4aa8      	ldr	r2, [pc, #672]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	0551      	lsls	r1, r2, #21
 8003ddc:	d502      	bpl.n	8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	f000 811f 	beq.w	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003de4:	4aa4      	ldr	r2, [pc, #656]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003de6:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8003dea:	f010 0002 	ands.w	r0, r0, #2
 8003dee:	f43f ae8c 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8003df2:	2b30      	cmp	r3, #48	; 0x30
 8003df4:	bf14      	ite	ne
 8003df6:	2000      	movne	r0, #0
 8003df8:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8003dfc:	e685      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003dfe:	4a9e      	ldr	r2, [pc, #632]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003e00:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8003e04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    switch (srcclk)
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	f000 81b6 	beq.w	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8003e0e:	f200 815a 	bhi.w	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80c9 	beq.w	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	bf18      	it	ne
 8003e1c:	2000      	movne	r0, #0
 8003e1e:	f47f ae74 	bne.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
}
 8003e22:	b005      	add	sp, #20
 8003e24:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetSysClockFreq();
 8003e28:	f7fd be4a 	b.w	8001ac0 <HAL_RCC_GetSysClockFreq>
}
 8003e2c:	b005      	add	sp, #20
 8003e2e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK2Freq();
 8003e32:	f7fe be81 	b.w	8002b38 <HAL_RCC_GetPCLK2Freq>
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003e36:	4a90      	ldr	r2, [pc, #576]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003e38:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003e3c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 8003e40:	d0ab      	beq.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d0ed      	beq.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	0552      	lsls	r2, r2, #21
 8003e4a:	d502      	bpl.n	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	f000 80ea 	beq.w	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003e52:	4a89      	ldr	r2, [pc, #548]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003e54:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8003e58:	f010 0002 	ands.w	r0, r0, #2
 8003e5c:	f43f ae55 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8003e60:	2bc0      	cmp	r3, #192	; 0xc0
 8003e62:	bf14      	ite	ne
 8003e64:	2000      	movne	r0, #0
 8003e66:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8003e6a:	e64e      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003e6c:	4a82      	ldr	r2, [pc, #520]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
          frequency = HSI48_VALUE;
 8003e6e:	4b83      	ldr	r3, [pc, #524]	; (800407c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003e70:	6810      	ldr	r0, [r2, #0]
          frequency = HSI48_VALUE;
 8003e72:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8003e76:	bf18      	it	ne
 8003e78:	4618      	movne	r0, r3
 8003e7a:	e646      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003e7c:	4a7e      	ldr	r2, [pc, #504]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003e7e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003e82:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003e86:	d088      	beq.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8c:	d0c9      	beq.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	0550      	lsls	r0, r2, #21
 8003e92:	d503      	bpl.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	f000 8113 	beq.w	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003e9c:	4a76      	ldr	r2, [pc, #472]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003e9e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8003ea2:	f010 0002 	ands.w	r0, r0, #2
 8003ea6:	f43f ae30 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8003eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eae:	bf14      	ite	ne
 8003eb0:	2000      	movne	r0, #0
 8003eb2:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8003eb6:	e628      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003eb8:	4a6f      	ldr	r2, [pc, #444]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003eba:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003ebe:	f013 0307 	ands.w	r3, r3, #7
 8003ec2:	d072      	beq.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d0ac      	beq.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	0551      	lsls	r1, r2, #21
 8003ecc:	d502      	bpl.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	f000 810e 	beq.w	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003ed4:	4a68      	ldr	r2, [pc, #416]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003ed6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8003eda:	0792      	lsls	r2, r2, #30
 8003edc:	d502      	bpl.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	f000 8103 	beq.w	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8003ee4:	4a64      	ldr	r2, [pc, #400]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003ee6:	6810      	ldr	r0, [r2, #0]
 8003ee8:	f010 0020 	ands.w	r0, r0, #32
 8003eec:	f43f ae0d 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	f000 80d7 	beq.w	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
      frequency = 0U;
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	e607      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003efa:	4a5f      	ldr	r2, [pc, #380]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003efc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8003f00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f08:	d08b      	beq.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0e:	f000 808c 	beq.w	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003f12:	b36b      	cbz	r3, 8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8003f14:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003f18:	f000 80b6 	beq.w	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	0391      	lsls	r1, r2, #14
 8003f20:	d503      	bpl.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 8003f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f26:	f000 8169 	beq.w	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8003f2a:	4a53      	ldr	r2, [pc, #332]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003f2c:	6810      	ldr	r0, [r2, #0]
 8003f2e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003f32:	f43f adea 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8003f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f3a:	4851      	ldr	r0, [pc, #324]	; (8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8003f3c:	bf18      	it	ne
 8003f3e:	2000      	movne	r0, #0
 8003f40:	e5e3      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003f42:	484f      	ldr	r0, [pc, #316]	; (8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8003f44:	e5e1      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8003f46:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003f48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f4c:	f003 0307 	and.w	r3, r3, #7
    switch (srcclk)
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	f200 831e 	bhi.w	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f71 	.word	0x08003f71
 8003f60:	08003bff 	.word	0x08003bff
 8003f64:	08003f7b 	.word	0x08003f7b
 8003f68:	08003fa5 	.word	0x08003fa5
 8003f6c:	08003f85 	.word	0x08003f85
}
 8003f70:	b005      	add	sp, #20
 8003f72:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetHCLKFreq();
 8003f76:	f7fe bc93 	b.w	80028a0 <HAL_RCC_GetHCLKFreq>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f7a:	a801      	add	r0, sp, #4
 8003f7c:	f7ff fc8a 	bl	8003894 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8003f80:	9802      	ldr	r0, [sp, #8]
        break;
 8003f82:	e5c2      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003f84:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	0212      	lsls	r2, r2, #8
 8003f8a:	bf4c      	ite	mi
 8003f8c:	689b      	ldrmi	r3, [r3, #8]
 8003f8e:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 8003f92:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x694>)
 8003f94:	bf4c      	ite	mi
 8003f96:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8003f9a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8003f9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8003fa2:	e5b2      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003fa4:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8003fa8:	e5af      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
}
 8003faa:	b005      	add	sp, #20
 8003fac:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK3Freq();
 8003fb0:	f7fe be6c 	b.w	8002c8c <HAL_RCC_GetPCLK3Freq>
          frequency = HSI_VALUE;
 8003fb4:	4832      	ldr	r0, [pc, #200]	; (8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8003fb6:	e5a8      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8003fb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fbc:	d03a      	beq.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8003fbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fc2:	f040 82a8 	bne.w	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003fc6:	6893      	ldr	r3, [r2, #8]
 8003fc8:	4a2e      	ldr	r2, [pc, #184]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x694>)
 8003fca:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003fd0:	bf15      	itete	ne
 8003fd2:	689b      	ldrne	r3, [r3, #8]
 8003fd4:	f8d3 30f4 	ldreq.w	r3, [r3, #244]	; 0xf4
 8003fd8:	f3c3 6303 	ubfxne	r3, r3, #24, #4
 8003fdc:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 8003fe0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8003fe4:	e591      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003fe6:	4a24      	ldr	r2, [pc, #144]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8003fe8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003fec:	f413 6340 	ands.w	r3, r3, #3072	; 0xc00
 8003ff0:	f43f aed3 	beq.w	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8003ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff8:	f43f af13 	beq.w	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	0550      	lsls	r0, r2, #21
 8004000:	d503      	bpl.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8004002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004006:	f000 8289 	beq.w	800451c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800400a:	4a1b      	ldr	r2, [pc, #108]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800400c:	6810      	ldr	r0, [r2, #0]
 800400e:	f010 0020 	ands.w	r0, r0, #32
 8004012:	f43f ad7a 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401a:	f000 809f 	beq.w	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
      frequency = 0U;
 800401e:	2000      	movs	r0, #0
 8004020:	e573      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004022:	4817      	ldr	r0, [pc, #92]	; (8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004024:	e571      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004026:	4816      	ldr	r0, [pc, #88]	; (8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004028:	e56f      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800402a:	a801      	add	r0, sp, #4
 800402c:	f7ff fb84 	bl	8003738 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004030:	9803      	ldr	r0, [sp, #12]
 8004032:	e56a      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004034:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8004038:	e567      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800403a:	4a0f      	ldr	r2, [pc, #60]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800403c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004040:	f413 5340 	ands.w	r3, r3, #12288	; 0x3000
 8004044:	f43f aea9 	beq.w	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	f43f aee9 	beq.w	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	0552      	lsls	r2, r2, #21
 8004054:	d503      	bpl.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405a:	f000 810d 	beq.w	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800405e:	4a06      	ldr	r2, [pc, #24]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004060:	6810      	ldr	r0, [r2, #0]
 8004062:	f010 0020 	ands.w	r0, r0, #32
 8004066:	f43f ad50 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800406a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800406e:	f000 8144 	beq.w	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
      frequency = 0U;
 8004072:	2000      	movs	r0, #0
 8004074:	e549      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004076:	bf00      	nop
 8004078:	46020c00 	.word	0x46020c00
 800407c:	02dc6c00 	.word	0x02dc6c00
 8004080:	00f42400 	.word	0x00f42400
 8004084:	08007af0 	.word	0x08007af0
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004088:	6893      	ldr	r3, [r2, #8]
 800408a:	0218      	lsls	r0, r3, #8
 800408c:	bf4c      	ite	mi
 800408e:	6893      	ldrmi	r3, [r2, #8]
 8004090:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004094:	4aa2      	ldr	r2, [pc, #648]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 8004096:	bf4c      	ite	mi
 8004098:	0f1b      	lsrmi	r3, r3, #28
 800409a:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
 800409e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040a2:	e532      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80040a4:	6893      	ldr	r3, [r2, #8]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	bf4c      	ite	mi
 80040aa:	6893      	ldrmi	r3, [r2, #8]
 80040ac:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 80040b0:	4a9b      	ldr	r2, [pc, #620]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 80040b2:	bf4c      	ite	mi
 80040b4:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80040b8:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80040bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040c0:	e523      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 80040c2:	4898      	ldr	r0, [pc, #608]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 80040c4:	e521      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 80040c6:	2bc0      	cmp	r3, #192	; 0xc0
 80040c8:	f040 80b8 	bne.w	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80040cc:	4b96      	ldr	r3, [pc, #600]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	0211      	lsls	r1, r2, #8
 80040d2:	bf4c      	ite	mi
 80040d4:	689b      	ldrmi	r3, [r3, #8]
 80040d6:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 80040da:	4a91      	ldr	r2, [pc, #580]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 80040dc:	bf4c      	ite	mi
 80040de:	0f1b      	lsrmi	r3, r3, #28
 80040e0:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
 80040e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 80040e8:	e50f      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 80040ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80040ee:	e50c      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 80040f0:	488c      	ldr	r0, [pc, #560]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 80040f2:	e50a      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80040f4:	4b8c      	ldr	r3, [pc, #560]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 80040f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80040fa:	f413 4340 	ands.w	r3, r3, #49152	; 0xc000
 80040fe:	f43f ae4c 	beq.w	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004106:	f43f ae8c 	beq.w	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800410a:	4a87      	ldr	r2, [pc, #540]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	0552      	lsls	r2, r2, #21
 8004110:	d503      	bpl.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004116:	f000 8100 	beq.w	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800411a:	4a83      	ldr	r2, [pc, #524]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 800411c:	6810      	ldr	r0, [r2, #0]
 800411e:	f010 0020 	ands.w	r0, r0, #32
 8004122:	f43f acf2 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004126:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800412a:	f000 80ff 	beq.w	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
      frequency = 0U;
 800412e:	2000      	movs	r0, #0
 8004130:	e4eb      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004132:	4a7d      	ldr	r2, [pc, #500]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004134:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004138:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800413c:	d160      	bne.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800413e:	6893      	ldr	r3, [r2, #8]
 8004140:	0218      	lsls	r0, r3, #8
 8004142:	bf4c      	ite	mi
 8004144:	6893      	ldrmi	r3, [r2, #8]
 8004146:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 800414a:	4a75      	ldr	r2, [pc, #468]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 800414c:	bf4c      	ite	mi
 800414e:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004152:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004156:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800415a:	e4d6      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800415c:	6893      	ldr	r3, [r2, #8]
 800415e:	0219      	lsls	r1, r3, #8
 8004160:	bf4c      	ite	mi
 8004162:	6893      	ldrmi	r3, [r2, #8]
 8004164:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004168:	4a6d      	ldr	r2, [pc, #436]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 800416a:	bf4c      	ite	mi
 800416c:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004170:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004174:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004178:	e4c7      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800417a:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 800417c:	4b69      	ldr	r3, [pc, #420]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 800417e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004182:	bf18      	it	ne
 8004184:	4618      	movne	r0, r3
 8004186:	e4c0      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004188:	4a67      	ldr	r2, [pc, #412]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 800418a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800418e:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 8004192:	f43f ae02 	beq.w	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004196:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800419a:	0109      	lsls	r1, r1, #4
 800419c:	d503      	bpl.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800419e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041a2:	f000 81be 	beq.w	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80041a6:	4a60      	ldr	r2, [pc, #384]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	0552      	lsls	r2, r2, #21
 80041ac:	d503      	bpl.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80041ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041b2:	f000 81c0 	beq.w	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80041b6:	4a5c      	ldr	r2, [pc, #368]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 80041b8:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80041bc:	f010 0002 	ands.w	r0, r0, #2
 80041c0:	f43f aca3 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 80041c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041c8:	bf14      	ite	ne
 80041ca:	2000      	movne	r0, #0
 80041cc:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80041d0:	e49b      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80041d2:	4a55      	ldr	r2, [pc, #340]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 80041d4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80041d8:	f413 6340 	ands.w	r3, r3, #3072	; 0xc00
 80041dc:	d130      	bne.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80041de:	6893      	ldr	r3, [r2, #8]
 80041e0:	0218      	lsls	r0, r3, #8
 80041e2:	bf4c      	ite	mi
 80041e4:	6893      	ldrmi	r3, [r2, #8]
 80041e6:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 80041ea:	4a4d      	ldr	r2, [pc, #308]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 80041ec:	bf4c      	ite	mi
 80041ee:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80041f2:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80041f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041fa:	e486      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 80041fc:	4849      	ldr	r0, [pc, #292]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 80041fe:	e484      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004200:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8004204:	0109      	lsls	r1, r1, #4
 8004206:	d503      	bpl.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420c:	f000 8196 	beq.w	800453c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004210:	4a45      	ldr	r2, [pc, #276]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	0552      	lsls	r2, r2, #21
 8004216:	d503      	bpl.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800421c:	f000 8198 	beq.w	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004220:	4a41      	ldr	r2, [pc, #260]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004222:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8004226:	f010 0002 	ands.w	r0, r0, #2
 800422a:	f43f ac6e 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 800422e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004232:	bf14      	ite	ne
 8004234:	2000      	movne	r0, #0
 8004236:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800423a:	e466      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 800423c:	2000      	movs	r0, #0
 800423e:	e464      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004240:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8004244:	0109      	lsls	r1, r1, #4
 8004246:	d502      	bpl.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424c:	d016      	beq.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800424e:	4a36      	ldr	r2, [pc, #216]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	0550      	lsls	r0, r2, #21
 8004254:	d502      	bpl.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
 8004256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425a:	d018      	beq.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800425c:	4a32      	ldr	r2, [pc, #200]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 800425e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8004262:	f010 0002 	ands.w	r0, r0, #2
 8004266:	f43f ac50 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 800426a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800426e:	bf14      	ite	ne
 8004270:	2000      	movne	r0, #0
 8004272:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8004276:	e448      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004278:	482a      	ldr	r0, [pc, #168]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 800427a:	e446      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800427c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
        frequency = LSI_VALUE / 128U;
 8004280:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004284:	bf0c      	ite	eq
 8004286:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 800428a:	20fa      	movne	r0, #250	; 0xfa
 800428c:	e43d      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 800428e:	4825      	ldr	r0, [pc, #148]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 8004290:	e43b      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004292:	4a25      	ldr	r2, [pc, #148]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004294:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8004298:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (srcclk)
 800429c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a0:	f000 816c 	beq.w	800457c <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 80042a4:	f200 8157 	bhi.w	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f43f adbf 	beq.w	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80042ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b2:	bf18      	it	ne
 80042b4:	2000      	movne	r0, #0
 80042b6:	f43f adb4 	beq.w	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80042ba:	e426      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80042bc:	4a1a      	ldr	r2, [pc, #104]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 80042be:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80042c2:	6812      	ldr	r2, [r2, #0]
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80042c4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80042c8:	0390      	lsls	r0, r2, #14
 80042ca:	d500      	bpl.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80042cc:	b13b      	cbz	r3, 80042de <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80042ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d2:	d00b      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80042d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042d8:	d003      	beq.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      frequency = 0U;
 80042da:	2000      	movs	r0, #0
 80042dc:	e415      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 80042de:	4811      	ldr	r0, [pc, #68]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 80042e0:	e413      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042e2:	a801      	add	r0, sp, #4
 80042e4:	f7ff fa28 	bl	8003738 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80042e8:	9801      	ldr	r0, [sp, #4]
 80042ea:	e40e      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042ec:	a801      	add	r0, sp, #4
 80042ee:	f7ff f975 	bl	80035dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80042f2:	9802      	ldr	r0, [sp, #8]
 80042f4:	e409      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 80042f6:	2000      	movs	r0, #0
 80042f8:	e407      	b.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042fa:	6893      	ldr	r3, [r2, #8]
 80042fc:	0218      	lsls	r0, r3, #8
 80042fe:	bf4c      	ite	mi
 8004300:	6893      	ldrmi	r3, [r2, #8]
 8004302:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004306:	4a06      	ldr	r2, [pc, #24]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 8004308:	bf4c      	ite	mi
 800430a:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 800430e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004312:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004316:	f7ff bbf8 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 800431a:	4802      	ldr	r0, [pc, #8]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 800431c:	f7ff bbf5 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004320:	08007af0 	.word	0x08007af0
 8004324:	00f42400 	.word	0x00f42400
 8004328:	46020c00 	.word	0x46020c00
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800432c:	6893      	ldr	r3, [r2, #8]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	bf4c      	ite	mi
 8004332:	6893      	ldrmi	r3, [r2, #8]
 8004334:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004338:	4a97      	ldr	r2, [pc, #604]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 800433a:	bf4c      	ite	mi
 800433c:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004340:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004344:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004348:	f7ff bbdf 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800434c:	4b93      	ldr	r3, [pc, #588]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 800434e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004352:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004356:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800435a:	0792      	lsls	r2, r2, #30
 800435c:	f140 80b3 	bpl.w	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8004360:	2800      	cmp	r0, #0
 8004362:	d073      	beq.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004364:	4b8d      	ldr	r3, [pc, #564]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004366:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 800436a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800436e:	f43f abcc 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004372:	4b8a      	ldr	r3, [pc, #552]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
        frequency = LSI_VALUE / 128U;
 8004378:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800437c:	bf0c      	ite	eq
 800437e:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 8004382:	20fa      	movne	r0, #250	; 0xfa
 8004384:	f7ff bbc1 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004388:	4b84      	ldr	r3, [pc, #528]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 800438a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800438e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (srcclk)
 8004392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004396:	f43f acf9 	beq.w	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800439a:	d86f      	bhi.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
 800439c:	2b00      	cmp	r3, #0
 800439e:	f43f ad40 	beq.w	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80043a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a6:	bf18      	it	ne
 80043a8:	2000      	movne	r0, #0
 80043aa:	f47f abae 	bne.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80043ae:	4b7b      	ldr	r3, [pc, #492]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	0211      	lsls	r1, r2, #8
 80043b4:	bf4c      	ite	mi
 80043b6:	689b      	ldrmi	r3, [r3, #8]
 80043b8:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 80043bc:	4a76      	ldr	r2, [pc, #472]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 80043be:	bf4c      	ite	mi
 80043c0:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80043c4:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80043c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 80043cc:	f7ff bb9d 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80043d0:	4b72      	ldr	r3, [pc, #456]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 80043d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043d6:	f003 0318 	and.w	r3, r3, #24
    switch (srcclk)
 80043da:	2b18      	cmp	r3, #24
 80043dc:	f200 8095 	bhi.w	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xb1a>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	08003fab 	.word	0x08003fab
 80043ec:	0800450b 	.word	0x0800450b
 80043f0:	0800450b 	.word	0x0800450b
 80043f4:	0800450b 	.word	0x0800450b
 80043f8:	0800450b 	.word	0x0800450b
 80043fc:	0800450b 	.word	0x0800450b
 8004400:	0800450b 	.word	0x0800450b
 8004404:	0800450b 	.word	0x0800450b
 8004408:	08003e23 	.word	0x08003e23
 800440c:	0800450b 	.word	0x0800450b
 8004410:	0800450b 	.word	0x0800450b
 8004414:	0800450b 	.word	0x0800450b
 8004418:	0800450b 	.word	0x0800450b
 800441c:	0800450b 	.word	0x0800450b
 8004420:	0800450b 	.word	0x0800450b
 8004424:	0800450b 	.word	0x0800450b
 8004428:	080044f9 	.word	0x080044f9
 800442c:	0800450b 	.word	0x0800450b
 8004430:	0800450b 	.word	0x0800450b
 8004434:	0800450b 	.word	0x0800450b
 8004438:	0800450b 	.word	0x0800450b
 800443c:	0800450b 	.word	0x0800450b
 8004440:	0800450b 	.word	0x0800450b
 8004444:	0800450b 	.word	0x0800450b
 8004448:	080044d7 	.word	0x080044d7
      frequency = LSE_VALUE;
 800444c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004450:	f7ff bb5b 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004454:	4a51      	ldr	r2, [pc, #324]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004456:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 800445a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800445e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004462:	d025      	beq.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004464:	d811      	bhi.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xa9a>
 8004466:	2b00      	cmp	r3, #0
 8004468:	f43f ac97 	beq.w	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	bf18      	it	ne
 8004472:	2000      	movne	r0, #0
 8004474:	f43f acd5 	beq.w	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004478:	f7ff bb47 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 800447c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004480:	f43f abf2 	beq.w	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8004484:	2000      	movs	r0, #0
 8004486:	f7ff bb40 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 800448a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800448e:	d117      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004490:	6893      	ldr	r3, [r2, #8]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	bf4c      	ite	mi
 8004496:	6893      	ldrmi	r3, [r2, #8]
 8004498:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 800449c:	4a3e      	ldr	r2, [pc, #248]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 800449e:	bf4c      	ite	mi
 80044a0:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80044a4:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80044a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 80044ac:	f7ff bb2d 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044b0:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 80044b2:	4b3b      	ldr	r3, [pc, #236]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 80044b4:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80044b8:	bf18      	it	ne
 80044ba:	4618      	movne	r0, r3
 80044bc:	f7ff bb25 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 80044c0:	2000      	movs	r0, #0
 80044c2:	f7ff bb22 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80044c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	d520      	bpl.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	f43f ab1b 	beq.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80044d4:	e74d      	b.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80044d6:	4b31      	ldr	r3, [pc, #196]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	0210      	lsls	r0, r2, #8
 80044dc:	bf4c      	ite	mi
 80044de:	689b      	ldrmi	r3, [r3, #8]
 80044e0:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 80044e4:	4a2c      	ldr	r2, [pc, #176]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 80044e6:	bf4c      	ite	mi
 80044e8:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80044ec:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80044f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 80044f4:	f7ff bb09 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044f8:	4a28      	ldr	r2, [pc, #160]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
          frequency = HSI_VALUE;
 80044fa:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044fc:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 80044fe:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004502:	bf18      	it	ne
 8004504:	4618      	movne	r0, r3
 8004506:	f7ff bb00 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 800450a:	2000      	movs	r0, #0
 800450c:	f7ff bafd 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = 0U;
 8004510:	2000      	movs	r0, #0
 8004512:	f7ff bafa 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004516:	2000      	movs	r0, #0
 8004518:	f7ff baf7 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 800451c:	4820      	ldr	r0, [pc, #128]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 800451e:	f7ff baf4 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004522:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
        frequency = LSI_VALUE / 128U;
 8004526:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800452a:	bf0c      	ite	eq
 800452c:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 8004530:	20fa      	movne	r0, #250	; 0xfa
 8004532:	f7ff baea 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004536:	481a      	ldr	r0, [pc, #104]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 8004538:	f7ff bae7 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800453c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
        frequency = LSI_VALUE / 128U;
 8004540:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004544:	bf0c      	ite	eq
 8004546:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 800454a:	20fa      	movne	r0, #250	; 0xfa
 800454c:	f7ff badd 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004550:	4813      	ldr	r0, [pc, #76]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 8004552:	f7ff bada 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004556:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800455a:	d117      	bne.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800455c:	6893      	ldr	r3, [r2, #8]
 800455e:	0219      	lsls	r1, r3, #8
 8004560:	bf4c      	ite	mi
 8004562:	6893      	ldrmi	r3, [r2, #8]
 8004564:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004568:	4a0b      	ldr	r2, [pc, #44]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 800456a:	bf4c      	ite	mi
 800456c:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004570:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004574:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8004578:	f7ff bac7 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800457c:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 8004580:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004584:	bf18      	it	ne
 8004586:	4618      	movne	r0, r3
 8004588:	f7ff babf 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 800458c:	2000      	movs	r0, #0
 800458e:	f7ff babc 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004592:	2000      	movs	r0, #0
 8004594:	f7ff bab9 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004598:	08007af0 	.word	0x08007af0
 800459c:	46020c00 	.word	0x46020c00
 80045a0:	00f42400 	.word	0x00f42400

080045a4 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80045a4:	b378      	cbz	r0, 8004606 <HAL_SRAM_Init+0x62>
{
 80045a6:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80045a8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80045ac:	4615      	mov	r5, r2
 80045ae:	4604      	mov	r4, r0
 80045b0:	460e      	mov	r6, r1
 80045b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045b6:	b30b      	cbz	r3, 80045fc <HAL_SRAM_Init+0x58>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80045b8:	4621      	mov	r1, r4
 80045ba:	f851 0b08 	ldr.w	r0, [r1], #8
 80045be:	f000 fecf 	bl	8005360 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80045c2:	4631      	mov	r1, r6
 80045c4:	68a2      	ldr	r2, [r4, #8]
 80045c6:	6820      	ldr	r0, [r4, #0]
 80045c8:	f000 ff48 	bl	800545c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80045cc:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 80045d0:	4629      	mov	r1, r5
 80045d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045d4:	f000 ff72 	bl	80054bc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80045d8:	6821      	ldr	r1, [r4, #0]
 80045da:	68a0      	ldr	r0, [r4, #8]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80045dc:	4a0b      	ldr	r2, [pc, #44]	; (800460c <HAL_SRAM_Init+0x68>)
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80045de:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80045ea:	2101      	movs	r1, #1
  __FMC_ENABLE();
 80045ec:	6813      	ldr	r3, [r2, #0]

  return HAL_OK;
 80045ee:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80045f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045f4:	6013      	str	r3, [r2, #0]
  hsram->State = HAL_SRAM_STATE_READY;
 80045f6:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
}
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80045fc:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 8004600:	f7fc fc1a 	bl	8000e38 <HAL_SRAM_MspInit>
 8004604:	e7d8      	b.n	80045b8 <HAL_SRAM_Init+0x14>
    return HAL_ERROR;
 8004606:	2001      	movs	r0, #1
}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	420d0400 	.word	0x420d0400

08004610 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004610:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004614:	2b20      	cmp	r3, #32
 8004616:	d168      	bne.n	80046ea <HAL_UART_Receive_IT+0xda>
  {
    if ((pData == NULL) || (Size == 0U))
 8004618:	2900      	cmp	r1, #0
 800461a:	d064      	beq.n	80046e6 <HAL_UART_Receive_IT+0xd6>
 800461c:	2a00      	cmp	r2, #0
 800461e:	d062      	beq.n	80046e6 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8004620:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004624:	2b01      	cmp	r3, #1
 8004626:	d060      	beq.n	80046ea <HAL_UART_Receive_IT+0xda>
{
 8004628:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 800462a:	2501      	movs	r5, #1

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462c:	2400      	movs	r4, #0

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462e:	6803      	ldr	r3, [r0, #0]
    __HAL_LOCK(huart);
 8004630:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004634:	66c4      	str	r4, [r0, #108]	; 0x6c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004636:	689c      	ldr	r4, [r3, #8]
 8004638:	0665      	lsls	r5, r4, #25
 800463a:	d503      	bpl.n	8004644 <HAL_UART_Receive_IT+0x34>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800463c:	689c      	ldr	r4, [r3, #8]
 800463e:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8004642:	609c      	str	r4, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004644:	4c5d      	ldr	r4, [pc, #372]	; (80047bc <HAL_UART_Receive_IT+0x1ac>)
 8004646:	42a3      	cmp	r3, r4
 8004648:	d00e      	beq.n	8004668 <HAL_UART_Receive_IT+0x58>
 800464a:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
 800464e:	42a3      	cmp	r3, r4
 8004650:	d00a      	beq.n	8004668 <HAL_UART_Receive_IT+0x58>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004652:	685c      	ldr	r4, [r3, #4]
 8004654:	0224      	lsls	r4, r4, #8
 8004656:	d507      	bpl.n	8004668 <HAL_UART_Receive_IT+0x58>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	e853 4f00 	ldrex	r4, [r3]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800465c:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	e843 4500 	strex	r5, r4, [r3]
 8004664:	2d00      	cmp	r5, #0
 8004666:	d1f7      	bne.n	8004658 <HAL_UART_Receive_IT+0x48>
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr  = pData;
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;
 8004668:	2400      	movs	r4, #0
  huart->pRxBuffPtr  = pData;
 800466a:	6581      	str	r1, [r0, #88]	; 0x58

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800466c:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 800466e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  UART_MASK_COMPUTATION(huart);
 8004672:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
 8004676:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800467a:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800467c:	d037      	beq.n	80046ee <HAL_UART_Receive_IT+0xde>
 800467e:	2900      	cmp	r1, #0
 8004680:	d17c      	bne.n	800477c <HAL_UART_Receive_IT+0x16c>
 8004682:	6901      	ldr	r1, [r0, #16]
 8004684:	2900      	cmp	r1, #0
 8004686:	d152      	bne.n	800472e <HAL_UART_Receive_IT+0x11e>
 8004688:	21ff      	movs	r1, #255	; 0xff
 800468a:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468e:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004690:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004692:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004696:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	f103 0108 	add.w	r1, r3, #8
 800469e:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a2:	f041 0101 	orr.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	f103 0508 	add.w	r5, r3, #8
 80046aa:	e845 1400 	strex	r4, r1, [r5]
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d1f3      	bne.n	800469a <HAL_UART_Receive_IT+0x8a>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80046b2:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80046b4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80046b8:	d03d      	beq.n	8004736 <HAL_UART_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ba:	6882      	ldr	r2, [r0, #8]
 80046bc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80046c0:	d01d      	beq.n	80046fe <HAL_UART_Receive_IT+0xee>
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
    }

    __HAL_UNLOCK(huart);
 80046c2:	2100      	movs	r1, #0
 80046c4:	4c3e      	ldr	r4, [pc, #248]	; (80047c0 <HAL_UART_Receive_IT+0x1b0>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c6:	6902      	ldr	r2, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT;
 80046c8:	6704      	str	r4, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80046ca:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046ce:	b1ea      	cbz	r2, 800470c <HAL_UART_Receive_IT+0xfc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80046d4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	e843 2100 	strex	r1, r2, [r3]
 80046dc:	2900      	cmp	r1, #0
 80046de:	d1f7      	bne.n	80046d0 <HAL_UART_Receive_IT+0xc0>
}
 80046e0:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80046e2:	2000      	movs	r0, #0
}
 80046e4:	4770      	bx	lr
      return HAL_ERROR;
 80046e6:	2001      	movs	r0, #1
 80046e8:	4770      	bx	lr
    return HAL_BUSY;
 80046ea:	2002      	movs	r0, #2
}
 80046ec:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80046ee:	6901      	ldr	r1, [r0, #16]
 80046f0:	2900      	cmp	r1, #0
 80046f2:	d1c9      	bne.n	8004688 <HAL_UART_Receive_IT+0x78>
 80046f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046f8:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 80046fc:	e7c7      	b.n	800468e <HAL_UART_Receive_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fe:	6902      	ldr	r2, [r0, #16]
 8004700:	2a00      	cmp	r2, #0
 8004702:	d141      	bne.n	8004788 <HAL_UART_Receive_IT+0x178>
 8004704:	492f      	ldr	r1, [pc, #188]	; (80047c4 <HAL_UART_Receive_IT+0x1b4>)
    __HAL_UNLOCK(huart);
 8004706:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
 800470a:	6701      	str	r1, [r0, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004710:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	e843 2100 	strex	r1, r2, [r3]
 8004718:	2900      	cmp	r1, #0
 800471a:	d0e1      	beq.n	80046e0 <HAL_UART_Receive_IT+0xd0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	e853 2f00 	ldrex	r2, [r3]
 8004720:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	e843 2100 	strex	r1, r2, [r3]
 8004728:	2900      	cmp	r1, #0
 800472a:	d1ef      	bne.n	800470c <HAL_UART_Receive_IT+0xfc>
 800472c:	e7d8      	b.n	80046e0 <HAL_UART_Receive_IT+0xd0>
  UART_MASK_COMPUTATION(huart);
 800472e:	217f      	movs	r1, #127	; 0x7f
 8004730:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 8004734:	e7ab      	b.n	800468e <HAL_UART_Receive_IT+0x7e>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004736:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 800473a:	4291      	cmp	r1, r2
 800473c:	d8bd      	bhi.n	80046ba <HAL_UART_Receive_IT+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800473e:	6882      	ldr	r2, [r0, #8]
 8004740:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004744:	d02d      	beq.n	80047a2 <HAL_UART_Receive_IT+0x192>
 8004746:	4920      	ldr	r1, [pc, #128]	; (80047c8 <HAL_UART_Receive_IT+0x1b8>)
 8004748:	6902      	ldr	r2, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800474a:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800474c:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004750:	b13a      	cbz	r2, 8004762 <HAL_UART_Receive_IT+0x152>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	e843 2100 	strex	r1, r2, [r3]
 800475e:	2900      	cmp	r1, #0
 8004760:	d1f7      	bne.n	8004752 <HAL_UART_Receive_IT+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	f103 0208 	add.w	r2, r3, #8
 8004766:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800476a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	f103 0008 	add.w	r0, r3, #8
 8004772:	e840 2100 	strex	r1, r2, [r0]
 8004776:	2900      	cmp	r1, #0
 8004778:	d1f3      	bne.n	8004762 <HAL_UART_Receive_IT+0x152>
 800477a:	e7b1      	b.n	80046e0 <HAL_UART_Receive_IT+0xd0>
  UART_MASK_COMPUTATION(huart);
 800477c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8004780:	d008      	beq.n	8004794 <HAL_UART_Receive_IT+0x184>
 8004782:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
 8004786:	e782      	b.n	800468e <HAL_UART_Receive_IT+0x7e>
    __HAL_UNLOCK(huart);
 8004788:	2200      	movs	r2, #0
 800478a:	490d      	ldr	r1, [pc, #52]	; (80047c0 <HAL_UART_Receive_IT+0x1b0>)
 800478c:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
 8004790:	6701      	str	r1, [r0, #112]	; 0x70
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004792:	e79d      	b.n	80046d0 <HAL_UART_Receive_IT+0xc0>
  UART_MASK_COMPUTATION(huart);
 8004794:	6901      	ldr	r1, [r0, #16]
 8004796:	2900      	cmp	r1, #0
 8004798:	d0c9      	beq.n	800472e <HAL_UART_Receive_IT+0x11e>
 800479a:	213f      	movs	r1, #63	; 0x3f
 800479c:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 80047a0:	e775      	b.n	800468e <HAL_UART_Receive_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a2:	6902      	ldr	r2, [r0, #16]
 80047a4:	b922      	cbnz	r2, 80047b0 <HAL_UART_Receive_IT+0x1a0>
 80047a6:	4909      	ldr	r1, [pc, #36]	; (80047cc <HAL_UART_Receive_IT+0x1bc>)
    __HAL_UNLOCK(huart);
 80047a8:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
 80047ac:	6701      	str	r1, [r0, #112]	; 0x70
    if (huart->Init.Parity != UART_PARITY_NONE)
 80047ae:	e7d8      	b.n	8004762 <HAL_UART_Receive_IT+0x152>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80047b0:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <HAL_UART_Receive_IT+0x1b8>)
    __HAL_UNLOCK(huart);
 80047b2:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
 80047b6:	6702      	str	r2, [r0, #112]	; 0x70
    if (huart->Init.Parity != UART_PARITY_NONE)
 80047b8:	e7cb      	b.n	8004752 <HAL_UART_Receive_IT+0x142>
 80047ba:	bf00      	nop
 80047bc:	46002400 	.word	0x46002400
 80047c0:	08004881 	.word	0x08004881
 80047c4:	08004841 	.word	0x08004841
 80047c8:	080048c5 	.word	0x080048c5
 80047cc:	08004a6d 	.word	0x08004a6d

080047d0 <HAL_UART_ErrorCallback>:
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop

080047d4 <HAL_UARTEx_RxEventCallback>:
}
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop

080047d8 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 80047d8:	b508      	push	{r3, lr}
 80047da:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	e843 2100 	strex	r1, r2, [r3]
 80047e8:	2900      	cmp	r1, #0
 80047ea:	d1f7      	bne.n	80047dc <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	f103 0208 	add.w	r2, r3, #8
 80047f0:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	f103 0c08 	add.w	ip, r3, #8
 80047fc:	e84c 2100 	strex	r1, r2, [ip]
 8004800:	2900      	cmp	r1, #0
 8004802:	d1f3      	bne.n	80047ec <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004804:	2220      	movs	r2, #32
 8004806:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 800480c:	6701      	str	r1, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480e:	2a01      	cmp	r2, #1
 8004810:	d112      	bne.n	8004838 <UART_RxISR_16BIT.part.0+0x60>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004812:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004818:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	e843 2100 	strex	r1, r2, [r3]
 8004820:	2900      	cmp	r1, #0
 8004822:	d1f7      	bne.n	8004814 <UART_RxISR_16BIT.part.0+0x3c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004824:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004826:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800482a:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800482c:	bf44      	itt	mi
 800482e:	2210      	movmi	r2, #16
 8004830:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004832:	f7ff ffcf 	bl	80047d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004836:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8004838:	f7fb fec2 	bl	80005c0 <HAL_UART_RxCpltCallback>
}
 800483c:	bd08      	pop	{r3, pc}
 800483e:	bf00      	nop

08004840 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004840:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004844:	2a22      	cmp	r2, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004846:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004848:	d004      	beq.n	8004854 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800484a:	6993      	ldr	r3, [r2, #24]
 800484c:	f043 0308 	orr.w	r3, r3, #8
 8004850:	6193      	str	r3, [r2, #24]
  }
}
 8004852:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004854:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8004856:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
 800485a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800485c:	ea02 020c 	and.w	r2, r2, ip
 8004860:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8004864:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8004868:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800486a:	3a01      	subs	r2, #1
 800486c:	b292      	uxth	r2, r2
 800486e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8004872:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ea      	bne.n	8004852 <UART_RxISR_16BIT+0x12>
 800487c:	f7ff bfac 	b.w	80047d8 <UART_RxISR_16BIT.part.0>

08004880 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004880:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004884:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004886:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004888:	d004      	beq.n	8004894 <UART_RxISR_8BIT+0x14>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800488a:	6993      	ldr	r3, [r2, #24]
 800488c:	f043 0308 	orr.w	r3, r3, #8
 8004890:	6193      	str	r3, [r2, #24]
}
 8004892:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004894:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004896:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
 800489a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800489c:	ea02 020c 	and.w	r2, r2, ip
 80048a0:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 80048a2:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 80048a6:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80048a8:	3a01      	subs	r2, #1
 80048aa:	b292      	uxth	r2, r2
 80048ac:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80048b0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 80048b4:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 80048b6:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 80048b8:	6581      	str	r1, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	d1e9      	bne.n	8004892 <UART_RxISR_8BIT+0x12>
 80048be:	f7ff bf8b 	b.w	80047d8 <UART_RxISR_16BIT.part.0>
 80048c2:	bf00      	nop

080048c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c8:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80048ca:	6802      	ldr	r2, [r0, #0]
 80048cc:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80048ce:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80048d0:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80048d6:	2922      	cmp	r1, #34	; 0x22
 80048d8:	d006      	beq.n	80048e8 <UART_RxISR_8BIT_FIFOEN+0x24>
 80048da:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048dc:	6992      	ldr	r2, [r2, #24]
 80048de:	f042 0208 	orr.w	r2, r2, #8
 80048e2:	619a      	str	r2, [r3, #24]
  }
}
 80048e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80048e8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80b6 	beq.w	8004a5e <UART_RxISR_8BIT_FIFOEN+0x19a>
 80048f2:	0685      	lsls	r5, r0, #26
 80048f4:	d57b      	bpl.n	80049ee <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f6:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048fa:	f04f 0904 	mov.w	r9, #4
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048fe:	f894 b060 	ldrb.w	fp, [r4, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004902:	f8df a164 	ldr.w	sl, [pc, #356]	; 8004a68 <UART_RxISR_8BIT_FIFOEN+0x1a4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004906:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800490a:	f006 0601 	and.w	r6, r6, #1
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800490e:	6a52      	ldr	r2, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004912:	ea0b 0202 	and.w	r2, fp, r2
 8004916:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
 8004918:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800491c:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
 800491e:	3901      	subs	r1, #1
 8004920:	b289      	uxth	r1, r1
 8004922:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 8004926:	6da2      	ldr	r2, [r4, #88]	; 0x58
      isrflags = READ_REG(huart->Instance->ISR);
 8004928:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 800492a:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800492c:	0768      	lsls	r0, r5, #29
      huart->pRxBuffPtr++;
 800492e:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004930:	d01a      	beq.n	8004968 <UART_RxISR_8BIT_FIFOEN+0xa4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004932:	07e9      	lsls	r1, r5, #31
 8004934:	d508      	bpl.n	8004948 <UART_RxISR_8BIT_FIFOEN+0x84>
 8004936:	b13f      	cbz	r7, 8004948 <UART_RxISR_8BIT_FIFOEN+0x84>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004938:	2201      	movs	r2, #1
 800493a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800493c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004940:	f042 0201 	orr.w	r2, r2, #1
 8004944:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004948:	07aa      	lsls	r2, r5, #30
 800494a:	d515      	bpl.n	8004978 <UART_RxISR_8BIT_FIFOEN+0xb4>
 800494c:	b14e      	cbz	r6, 8004962 <UART_RxISR_8BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800494e:	2202      	movs	r2, #2
 8004950:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004952:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004956:	0768      	lsls	r0, r5, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004958:	f042 0204 	orr.w	r2, r2, #4
 800495c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004960:	d40e      	bmi.n	8004980 <UART_RxISR_8BIT_FIFOEN+0xbc>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004962:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004966:	b9bb      	cbnz	r3, 8004998 <UART_RxISR_8BIT_FIFOEN+0xd4>
      if (huart->RxXferCount == 0U)
 8004968:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800496c:	b29b      	uxth	r3, r3
 800496e:	b1eb      	cbz	r3, 80049ac <UART_RxISR_8BIT_FIFOEN+0xe8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004970:	06ab      	lsls	r3, r5, #26
 8004972:	d53c      	bpl.n	80049ee <UART_RxISR_8BIT_FIFOEN+0x12a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004974:	6822      	ldr	r2, [r4, #0]
 8004976:	e7ca      	b.n	800490e <UART_RxISR_8BIT_FIFOEN+0x4a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004978:	0769      	lsls	r1, r5, #29
 800497a:	d5f2      	bpl.n	8004962 <UART_RxISR_8BIT_FIFOEN+0x9e>
 800497c:	2e00      	cmp	r6, #0
 800497e:	d0f0      	beq.n	8004962 <UART_RxISR_8BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004980:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004984:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004988:	f043 0302 	orr.w	r3, r3, #2
 800498c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004990:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0e7      	beq.n	8004968 <UART_RxISR_8BIT_FIFOEN+0xa4>
          HAL_UART_ErrorCallback(huart);
 8004998:	4620      	mov	r0, r4
 800499a:	f7ff ff19 	bl	80047d0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499e:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 80049a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e1      	bne.n	8004970 <UART_RxISR_8BIT_FIFOEN+0xac>
 80049ac:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	e843 2100 	strex	r1, r2, [r3]
 80049ba:	2900      	cmp	r1, #0
 80049bc:	d1f7      	bne.n	80049ae <UART_RxISR_8BIT_FIFOEN+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	f103 0208 	add.w	r2, r3, #8
 80049c2:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049c6:	ea02 020a 	and.w	r2, r2, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	f103 0008 	add.w	r0, r3, #8
 80049ce:	e840 2100 	strex	r1, r2, [r0]
 80049d2:	2900      	cmp	r1, #0
 80049d4:	d1f3      	bne.n	80049be <UART_RxISR_8BIT_FIFOEN+0xfa>
        huart->RxState = HAL_UART_STATE_READY;
 80049d6:	2220      	movs	r2, #32
 80049d8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049dc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80049de:	6721      	str	r1, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e0:	2a01      	cmp	r2, #1
 80049e2:	d027      	beq.n	8004a34 <UART_RxISR_8BIT_FIFOEN+0x170>
          HAL_UART_RxCpltCallback(huart);
 80049e4:	4620      	mov	r0, r4
 80049e6:	f7fb fdeb 	bl	80005c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80049ea:	06ab      	lsls	r3, r5, #26
 80049ec:	d4c2      	bmi.n	8004974 <UART_RxISR_8BIT_FIFOEN+0xb0>
    rxdatacount = huart->RxXferCount;
 80049ee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80049f2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f43f af75 	beq.w	80048e4 <UART_RxISR_8BIT_FIFOEN+0x20>
 80049fa:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80049fe:	429a      	cmp	r2, r3
 8004a00:	f67f af70 	bls.w	80048e4 <UART_RxISR_8BIT_FIFOEN+0x20>
 8004a04:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	f103 0208 	add.w	r2, r3, #8
 8004a0a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	f103 0008 	add.w	r0, r3, #8
 8004a16:	e840 2100 	strex	r1, r2, [r0]
 8004a1a:	2900      	cmp	r1, #0
 8004a1c:	d1f3      	bne.n	8004a06 <UART_RxISR_8BIT_FIFOEN+0x142>
      huart->RxISR = UART_RxISR_8BIT;
 8004a1e:	4a11      	ldr	r2, [pc, #68]	; (8004a64 <UART_RxISR_8BIT_FIFOEN+0x1a0>)
 8004a20:	6722      	str	r2, [r4, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a26:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	e843 2100 	strex	r1, r2, [r3]
 8004a2e:	2900      	cmp	r1, #0
 8004a30:	d1f7      	bne.n	8004a22 <UART_RxISR_8BIT_FIFOEN+0x15e>
 8004a32:	e757      	b.n	80048e4 <UART_RxISR_8BIT_FIFOEN+0x20>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a34:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	e843 2100 	strex	r1, r2, [r3]
 8004a42:	2900      	cmp	r1, #0
 8004a44:	d1f7      	bne.n	8004a36 <UART_RxISR_8BIT_FIFOEN+0x172>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a46:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a48:	4620      	mov	r0, r4
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a4a:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a4c:	bf48      	it	mi
 8004a4e:	2210      	movmi	r2, #16
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a50:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a54:	bf48      	it	mi
 8004a56:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a58:	f7ff febc 	bl	80047d4 <HAL_UARTEx_RxEventCallback>
 8004a5c:	e788      	b.n	8004970 <UART_RxISR_8BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 8004a5e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004a62:	e73f      	b.n	80048e4 <UART_RxISR_8BIT_FIFOEN+0x20>
 8004a64:	08004881 	.word	0x08004881
 8004a68:	effffffe 	.word	0xeffffffe

08004a6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004a70:	6803      	ldr	r3, [r0, #0]
 8004a72:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004a74:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004a76:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a78:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004a7c:	2a22      	cmp	r2, #34	; 0x22
 8004a7e:	d005      	beq.n	8004a8c <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	f042 0208 	orr.w	r2, r2, #8
 8004a86:	619a      	str	r2, [r3, #24]
  }
}
 8004a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a8c:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8004a90:	4683      	mov	fp, r0
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	f000 80bc 	beq.w	8004c10 <UART_RxISR_16BIT_FIFOEN+0x1a4>
 8004a98:	068c      	lsls	r4, r1, #26
 8004a9a:	d57e      	bpl.n	8004b9a <UART_RxISR_16BIT_FIFOEN+0x12e>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a9e:	f04f 0804 	mov.w	r8, #4
  uint16_t  uhMask = huart->Mask;
 8004aa2:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004aa6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8004c1c <UART_RxISR_16BIT_FIFOEN+0x1b0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aaa:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aae:	f005 0501 	and.w	r5, r5, #1
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8004ab4:	f8db 1058 	ldr.w	r1, [fp, #88]	; 0x58
 8004ab8:	ea0a 0202 	and.w	r2, sl, r2
 8004abc:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 8004ac0:	f8bb 205e 	ldrh.w	r2, [fp, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8004ac4:	f8cb 1058 	str.w	r1, [fp, #88]	; 0x58
      huart->RxXferCount--;
 8004ac8:	3a01      	subs	r2, #1
 8004aca:	b292      	uxth	r2, r2
 8004acc:	f8ab 205e 	strh.w	r2, [fp, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004ad0:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004ad2:	0760      	lsls	r0, r4, #29
 8004ad4:	d01a      	beq.n	8004b0c <UART_RxISR_16BIT_FIFOEN+0xa0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ad6:	07e1      	lsls	r1, r4, #31
 8004ad8:	d508      	bpl.n	8004aec <UART_RxISR_16BIT_FIFOEN+0x80>
 8004ada:	b13e      	cbz	r6, 8004aec <UART_RxISR_16BIT_FIFOEN+0x80>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004adc:	2201      	movs	r2, #1
 8004ade:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae0:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aec:	07a2      	lsls	r2, r4, #30
 8004aee:	d516      	bpl.n	8004b1e <UART_RxISR_16BIT_FIFOEN+0xb2>
 8004af0:	b14d      	cbz	r5, 8004b06 <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004af2:	2202      	movs	r2, #2
 8004af4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004af6:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004afa:	0760      	lsls	r0, r4, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004afc:	f042 0204 	orr.w	r2, r2, #4
 8004b00:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b04:	d40f      	bmi.n	8004b26 <UART_RxISR_16BIT_FIFOEN+0xba>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b06:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8004b0a:	b9c3      	cbnz	r3, 8004b3e <UART_RxISR_16BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8004b0c:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	b1f3      	cbz	r3, 8004b52 <UART_RxISR_16BIT_FIFOEN+0xe6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b14:	06a3      	lsls	r3, r4, #26
 8004b16:	d540      	bpl.n	8004b9a <UART_RxISR_16BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b18:	f8db 3000 	ldr.w	r3, [fp]
 8004b1c:	e7c9      	b.n	8004ab2 <UART_RxISR_16BIT_FIFOEN+0x46>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b1e:	0761      	lsls	r1, r4, #29
 8004b20:	d5f1      	bpl.n	8004b06 <UART_RxISR_16BIT_FIFOEN+0x9a>
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	d0ef      	beq.n	8004b06 <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b26:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b2a:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8004b2e:	f043 0302 	orr.w	r3, r3, #2
 8004b32:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b36:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0e6      	beq.n	8004b0c <UART_RxISR_16BIT_FIFOEN+0xa0>
          HAL_UART_ErrorCallback(huart);
 8004b3e:	4658      	mov	r0, fp
 8004b40:	f7ff fe46 	bl	80047d0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8004b48:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e0      	bne.n	8004b14 <UART_RxISR_16BIT_FIFOEN+0xa8>
 8004b52:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	e843 2100 	strex	r1, r2, [r3]
 8004b62:	2900      	cmp	r1, #0
 8004b64:	d1f7      	bne.n	8004b56 <UART_RxISR_16BIT_FIFOEN+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	f103 0208 	add.w	r2, r3, #8
 8004b6a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b6e:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	f103 0008 	add.w	r0, r3, #8
 8004b76:	e840 2100 	strex	r1, r2, [r0]
 8004b7a:	2900      	cmp	r1, #0
 8004b7c:	d1f3      	bne.n	8004b66 <UART_RxISR_16BIT_FIFOEN+0xfa>
        huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8cb 2088 	str.w	r2, [fp, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
        huart->RxISR = NULL;
 8004b88:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	2a01      	cmp	r2, #1
 8004b8e:	d029      	beq.n	8004be4 <UART_RxISR_16BIT_FIFOEN+0x178>
          HAL_UART_RxCpltCallback(huart);
 8004b90:	4658      	mov	r0, fp
 8004b92:	f7fb fd15 	bl	80005c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b96:	06a3      	lsls	r3, r4, #26
 8004b98:	d4be      	bmi.n	8004b18 <UART_RxISR_16BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 8004b9a:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8004b9e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f43f af71 	beq.w	8004a88 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8004ba6:	f8bb 2068 	ldrh.w	r2, [fp, #104]	; 0x68
 8004baa:	429a      	cmp	r2, r3
 8004bac:	f67f af6c 	bls.w	8004a88 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8004bb0:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	f103 0208 	add.w	r2, r3, #8
 8004bb8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bbc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	f103 0008 	add.w	r0, r3, #8
 8004bc4:	e840 2100 	strex	r1, r2, [r0]
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	d1f3      	bne.n	8004bb4 <UART_RxISR_16BIT_FIFOEN+0x148>
      huart->RxISR = UART_RxISR_16BIT;
 8004bcc:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <UART_RxISR_16BIT_FIFOEN+0x1ac>)
 8004bce:	f8cb 2070 	str.w	r2, [fp, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bd6:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	e843 2100 	strex	r1, r2, [r3]
 8004bde:	2900      	cmp	r1, #0
 8004be0:	d1f7      	bne.n	8004bd2 <UART_RxISR_16BIT_FIFOEN+0x166>
 8004be2:	e751      	b.n	8004a88 <UART_RxISR_16BIT_FIFOEN+0x1c>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be4:	f8cb 106c 	str.w	r1, [fp, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	e843 2100 	strex	r1, r2, [r3]
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	d1f7      	bne.n	8004be8 <UART_RxISR_16BIT_FIFOEN+0x17c>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bf8:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bfa:	4658      	mov	r0, fp
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bfc:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bfe:	bf48      	it	mi
 8004c00:	2210      	movmi	r2, #16
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c02:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c06:	bf48      	it	mi
 8004c08:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c0a:	f7ff fde3 	bl	80047d4 <HAL_UARTEx_RxEventCallback>
 8004c0e:	e781      	b.n	8004b14 <UART_RxISR_16BIT_FIFOEN+0xa8>
    rxdatacount = huart->RxXferCount;
 8004c10:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004c14:	e738      	b.n	8004a88 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8004c16:	bf00      	nop
 8004c18:	08004841 	.word	0x08004841
 8004c1c:	effffffe 	.word	0xeffffffe

08004c20 <UART_SetConfig>:
{
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c24:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c26:	69c5      	ldr	r5, [r0, #28]
 8004c28:	6882      	ldr	r2, [r0, #8]
 8004c2a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c2c:	496c      	ldr	r1, [pc, #432]	; (8004de0 <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c2e:	4302      	orrs	r2, r0
 8004c30:	6960      	ldr	r0, [r4, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c32:	4e6c      	ldr	r6, [pc, #432]	; (8004de4 <UART_SetConfig+0x1c4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c34:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c36:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c38:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c3a:	4001      	ands	r1, r0
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	68e1      	ldr	r1, [r4, #12]
 8004c44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c48:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c4a:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c4c:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4e:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c50:	f000 809e 	beq.w	8004d90 <UART_SetConfig+0x170>
 8004c54:	4964      	ldr	r1, [pc, #400]	; (8004de8 <UART_SetConfig+0x1c8>)
 8004c56:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c58:	6899      	ldr	r1, [r3, #8]
 8004c5a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8004c5e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c62:	d02a      	beq.n	8004cba <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 8004c64:	6a20      	ldr	r0, [r4, #32]
 8004c66:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c70:	f022 020f 	bic.w	r2, r2, #15
 8004c74:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c76:	495d      	ldr	r1, [pc, #372]	; (8004dec <UART_SetConfig+0x1cc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c78:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c7a:	428b      	cmp	r3, r1
 8004c7c:	d17a      	bne.n	8004d74 <UART_SetConfig+0x154>
 8004c7e:	2001      	movs	r0, #1
 8004c80:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c82:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8004c86:	d05d      	beq.n	8004d44 <UART_SetConfig+0x124>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004c88:	f7fe feb2 	bl	80039f0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d051      	beq.n	8004d34 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c92:	4b57      	ldr	r3, [pc, #348]	; (8004df0 <UART_SetConfig+0x1d0>)
 8004c94:	6862      	ldr	r2, [r4, #4]
 8004c96:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9a:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004ca6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004caa:	f1a3 0210 	sub.w	r2, r3, #16
 8004cae:	428a      	cmp	r2, r1
 8004cb0:	d85e      	bhi.n	8004d70 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cb2:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb4:	2000      	movs	r0, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cb6:	60d3      	str	r3, [r2, #12]
 8004cb8:	e03d      	b.n	8004d36 <UART_SetConfig+0x116>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004cc2:	f022 020f 	bic.w	r2, r2, #15
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cca:	4a47      	ldr	r2, [pc, #284]	; (8004de8 <UART_SetConfig+0x1c8>)
 8004ccc:	2000      	movs	r0, #0
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	f04f 0100 	mov.w	r1, #0
 8004cd4:	d1d5      	bne.n	8004c82 <UART_SetConfig+0x62>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004cd6:	f7fe fe8b 	bl	80039f0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8004cda:	b358      	cbz	r0, 8004d34 <UART_SetConfig+0x114>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004cde:	4a44      	ldr	r2, [pc, #272]	; (8004df0 <UART_SetConfig+0x1d0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ce0:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ce2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ce6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cea:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cee:	4299      	cmp	r1, r3
 8004cf0:	d83e      	bhi.n	8004d70 <UART_SetConfig+0x150>
 8004cf2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004cf6:	d83b      	bhi.n	8004d70 <UART_SetConfig+0x150>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f7fb fabc 	bl	8000278 <__aeabi_uldivmod>
 8004d00:	4606      	mov	r6, r0
 8004d02:	462a      	mov	r2, r5
 8004d04:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8004d08:	0209      	lsls	r1, r1, #8
 8004d0a:	0235      	lsls	r5, r6, #8
 8004d0c:	eb15 000c 	adds.w	r0, r5, ip
 8004d10:	ea41 6116 	orr.w	r1, r1, r6, lsr #24
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	f141 0100 	adc.w	r1, r1, #0
 8004d1c:	f7fb faac 	bl	8000278 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d20:	4a34      	ldr	r2, [pc, #208]	; (8004df4 <UART_SetConfig+0x1d4>)
 8004d22:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8004d26:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d28:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d2a:	d821      	bhi.n	8004d70 <UART_SetConfig+0x150>
          huart->Instance->BRR = usartdiv;
 8004d2c:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d2e:	2000      	movs	r0, #0
          huart->Instance->BRR = usartdiv;
 8004d30:	60d3      	str	r3, [r2, #12]
 8004d32:	e000      	b.n	8004d36 <UART_SetConfig+0x116>
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d34:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8004d36:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8004d38:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8004d3c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8004d3e:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004d40:	6763      	str	r3, [r4, #116]	; 0x74
}
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004d44:	f7fe fe54 	bl	80039f0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d0f3      	beq.n	8004d34 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d4c:	4b28      	ldr	r3, [pc, #160]	; (8004df0 <UART_SetConfig+0x1d0>)
 8004d4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d50:	6862      	ldr	r2, [r4, #4]
 8004d52:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8004d56:	0853      	lsrs	r3, r2, #1
 8004d58:	fbb0 f0f1 	udiv	r0, r0, r1
 8004d5c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004d60:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d64:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004d68:	f1a0 0310 	sub.w	r3, r0, #16
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	d92c      	bls.n	8004dca <UART_SetConfig+0x1aa>
        ret = HAL_ERROR;
 8004d70:	2001      	movs	r0, #1
 8004d72:	e7e0      	b.n	8004d36 <UART_SetConfig+0x116>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d74:	4a20      	ldr	r2, [pc, #128]	; (8004df8 <UART_SetConfig+0x1d8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01a      	beq.n	8004db0 <UART_SetConfig+0x190>
 8004d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d019      	beq.n	8004db6 <UART_SetConfig+0x196>
 8004d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d118      	bne.n	8004dbc <UART_SetConfig+0x19c>
 8004d8a:	2008      	movs	r0, #8
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	e778      	b.n	8004c82 <UART_SetConfig+0x62>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d90:	6899      	ldr	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d92:	2020      	movs	r0, #32
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d94:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8004d98:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004da4:	f022 020f 	bic.w	r2, r2, #15
 8004da8:	430a      	orrs	r2, r1
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dac:	2100      	movs	r1, #0
 8004dae:	e792      	b.n	8004cd6 <UART_SetConfig+0xb6>
 8004db0:	2002      	movs	r0, #2
 8004db2:	2100      	movs	r1, #0
 8004db4:	e765      	b.n	8004c82 <UART_SetConfig+0x62>
 8004db6:	2004      	movs	r0, #4
 8004db8:	2100      	movs	r1, #0
 8004dba:	e762      	b.n	8004c82 <UART_SetConfig+0x62>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d182      	bne.n	8004cca <UART_SetConfig+0xaa>
 8004dc4:	2010      	movs	r0, #16
 8004dc6:	2100      	movs	r1, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dc8:	e75b      	b.n	8004c82 <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dca:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8004dce:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd0:	f3c0 0042 	ubfx	r0, r0, #1, #3
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dd4:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8004dd6:	4303      	orrs	r3, r0
 8004dd8:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dda:	2000      	movs	r0, #0
 8004ddc:	e7ab      	b.n	8004d36 <UART_SetConfig+0x116>
 8004dde:	bf00      	nop
 8004de0:	cfff69f3 	.word	0xcfff69f3
 8004de4:	46002400 	.word	0x46002400
 8004de8:	56002400 	.word	0x56002400
 8004dec:	40013800 	.word	0x40013800
 8004df0:	08007bb0 	.word	0x08007bb0
 8004df4:	000ffcff 	.word	0x000ffcff
 8004df8:	40004400 	.word	0x40004400

08004dfc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8004dfe:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e00:	07da      	lsls	r2, r3, #31
 8004e02:	d506      	bpl.n	8004e12 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e04:	6801      	ldr	r1, [r0, #0]
 8004e06:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004e08:	684a      	ldr	r2, [r1, #4]
 8004e0a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004e0e:	4322      	orrs	r2, r4
 8004e10:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e12:	079c      	lsls	r4, r3, #30
 8004e14:	d506      	bpl.n	8004e24 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e16:	6801      	ldr	r1, [r0, #0]
 8004e18:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004e1a:	684a      	ldr	r2, [r1, #4]
 8004e1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e20:	4322      	orrs	r2, r4
 8004e22:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e24:	0759      	lsls	r1, r3, #29
 8004e26:	d506      	bpl.n	8004e36 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e28:	6801      	ldr	r1, [r0, #0]
 8004e2a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004e2c:	684a      	ldr	r2, [r1, #4]
 8004e2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e32:	4322      	orrs	r2, r4
 8004e34:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e36:	071a      	lsls	r2, r3, #28
 8004e38:	d506      	bpl.n	8004e48 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e3a:	6801      	ldr	r1, [r0, #0]
 8004e3c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004e3e:	684a      	ldr	r2, [r1, #4]
 8004e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e44:	4322      	orrs	r2, r4
 8004e46:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e48:	06dc      	lsls	r4, r3, #27
 8004e4a:	d506      	bpl.n	8004e5a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e4c:	6801      	ldr	r1, [r0, #0]
 8004e4e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004e50:	688a      	ldr	r2, [r1, #8]
 8004e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e56:	4322      	orrs	r2, r4
 8004e58:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e5a:	0699      	lsls	r1, r3, #26
 8004e5c:	d506      	bpl.n	8004e6c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5e:	6801      	ldr	r1, [r0, #0]
 8004e60:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004e62:	688a      	ldr	r2, [r1, #8]
 8004e64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e68:	4322      	orrs	r2, r4
 8004e6a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e6c:	065a      	lsls	r2, r3, #25
 8004e6e:	d50a      	bpl.n	8004e86 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e70:	6801      	ldr	r1, [r0, #0]
 8004e72:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004e74:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e76:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e7a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004e7e:	ea42 0204 	orr.w	r2, r2, r4
 8004e82:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e84:	d00b      	beq.n	8004e9e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	d506      	bpl.n	8004e98 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8a:	6802      	ldr	r2, [r0, #0]
 8004e8c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004e8e:	6853      	ldr	r3, [r2, #4]
 8004e90:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6053      	str	r3, [r2, #4]
}
 8004e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e9c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9e:	684a      	ldr	r2, [r1, #4]
 8004ea0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004ea2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004ea6:	4322      	orrs	r2, r4
 8004ea8:	604a      	str	r2, [r1, #4]
 8004eaa:	e7ec      	b.n	8004e86 <UART_AdvFeatureConfig+0x8a>

08004eac <UART_WaitOnFlagUntilTimeout>:
{
 8004eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	460e      	mov	r6, r1
 8004eb4:	4615      	mov	r5, r2
 8004eb6:	4699      	mov	r9, r3
 8004eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ebc:	6804      	ldr	r4, [r0, #0]
 8004ebe:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004ec2:	d10a      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ec4:	69e3      	ldr	r3, [r4, #28]
 8004ec6:	ea36 0303 	bics.w	r3, r6, r3
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	429d      	cmp	r5, r3
 8004ed2:	d0f7      	beq.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8004ed4:	2000      	movs	r0, #0
}
 8004ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eda:	69e3      	ldr	r3, [r4, #28]
 8004edc:	ea36 0303 	bics.w	r3, r6, r3
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	42ab      	cmp	r3, r5
 8004ee8:	d1f4      	bne.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	f7fc f8ff 	bl	80010ec <HAL_GetTick>
 8004eee:	eba0 0009 	sub.w	r0, r0, r9
 8004ef2:	4540      	cmp	r0, r8
 8004ef4:	d833      	bhi.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ef6:	f1b8 0f00 	cmp.w	r8, #0
 8004efa:	d030      	beq.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004efc:	683c      	ldr	r4, [r7, #0]
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	4622      	mov	r2, r4
 8004f02:	0759      	lsls	r1, r3, #29
 8004f04:	d5db      	bpl.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f06:	69e3      	ldr	r3, [r4, #28]
 8004f08:	051b      	lsls	r3, r3, #20
 8004f0a:	d5d8      	bpl.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f10:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	e844 3100 	strex	r1, r3, [r4]
 8004f1e:	b139      	cbz	r1, 8004f30 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	e852 3f00 	ldrex	r3, [r2]
 8004f24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	e842 3100 	strex	r1, r3, [r2]
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d1f7      	bne.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	f102 0308 	add.w	r3, r2, #8
 8004f34:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f38:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	f102 0008 	add.w	r0, r2, #8
 8004f40:	e840 3100 	strex	r1, r3, [r0]
 8004f44:	2900      	cmp	r1, #0
 8004f46:	d1f3      	bne.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8004f48:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8004f4a:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8004f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8004f50:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8004f5c:	e7bb      	b.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x2a>
 8004f5e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	e842 3100 	strex	r1, r3, [r2]
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d1f7      	bne.n	8004f60 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	f102 0308 	add.w	r3, r2, #8
 8004f74:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f78:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	f102 0008 	add.w	r0, r2, #8
 8004f80:	e840 3100 	strex	r1, r3, [r0]
 8004f84:	2900      	cmp	r1, #0
 8004f86:	d1f3      	bne.n	8004f70 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8004f88:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8004f8a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8004f90:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8004f98:	e79d      	b.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x2a>
 8004f9a:	bf00      	nop

08004f9c <HAL_UART_Transmit>:
{
 8004f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fa0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004fa2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8004fa6:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	f040 8098 	bne.w	80050de <HAL_UART_Transmit+0x142>
    if ((pData == NULL) || (Size == 0U))
 8004fae:	4689      	mov	r9, r1
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d050      	beq.n	8005056 <HAL_UART_Transmit+0xba>
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	2a00      	cmp	r2, #0
 8004fb8:	d04d      	beq.n	8005056 <HAL_UART_Transmit+0xba>
    __HAL_LOCK(huart);
 8004fba:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	f000 808c 	beq.w	80050de <HAL_UART_Transmit+0x142>
 8004fc6:	2201      	movs	r2, #1
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004fc8:	6803      	ldr	r3, [r0, #0]
    __HAL_LOCK(huart);
 8004fca:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	0611      	lsls	r1, r2, #24
 8004fd2:	f100 8088 	bmi.w	80050e6 <HAL_UART_Transmit+0x14a>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fd6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	f04f 0800 	mov.w	r8, #0
 8004fdc:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fe0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 8004fe4:	f7fc f882 	bl	80010ec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe8:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8004fea:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8004ff0:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ff4:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff8:	f000 809a 	beq.w	8005130 <HAL_UART_Transmit+0x194>
    __HAL_UNLOCK(huart);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8005002:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8005006:	b29b      	uxth	r3, r3
 8005008:	b1b3      	cbz	r3, 8005038 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500a:	682c      	ldr	r4, [r5, #0]
 800500c:	1c71      	adds	r1, r6, #1
 800500e:	d126      	bne.n	800505e <HAL_UART_Transmit+0xc2>
 8005010:	69e2      	ldr	r2, [r4, #28]
 8005012:	0612      	lsls	r2, r2, #24
 8005014:	d5fc      	bpl.n	8005010 <HAL_UART_Transmit+0x74>
      if (pdata8bits == NULL)
 8005016:	f1b9 0f00 	cmp.w	r9, #0
 800501a:	d05b      	beq.n	80050d4 <HAL_UART_Transmit+0x138>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800501c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005020:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8005022:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8005026:	3b01      	subs	r3, #1
 8005028:	b29b      	uxth	r3, r3
 800502a:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800502e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e9      	bne.n	800500c <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005038:	463b      	mov	r3, r7
 800503a:	2200      	movs	r2, #0
 800503c:	2140      	movs	r1, #64	; 0x40
 800503e:	4628      	mov	r0, r5
 8005040:	9600      	str	r6, [sp, #0]
 8005042:	f7ff ff33 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 8005046:	2800      	cmp	r0, #0
 8005048:	d179      	bne.n	800513e <HAL_UART_Transmit+0x1a2>
    huart->gState = HAL_UART_STATE_READY;
 800504a:	2320      	movs	r3, #32
 800504c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8005050:	b003      	add	sp, #12
 8005052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8005056:	2001      	movs	r0, #1
}
 8005058:	b003      	add	sp, #12
 800505a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505e:	69e3      	ldr	r3, [r4, #28]
 8005060:	061b      	lsls	r3, r3, #24
 8005062:	d4d8      	bmi.n	8005016 <HAL_UART_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005064:	f7fc f842 	bl	80010ec <HAL_GetTick>
 8005068:	1bc0      	subs	r0, r0, r7
 800506a:	4286      	cmp	r6, r0
 800506c:	d340      	bcc.n	80050f0 <HAL_UART_Transmit+0x154>
 800506e:	2e00      	cmp	r6, #0
 8005070:	d03e      	beq.n	80050f0 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005072:	682c      	ldr	r4, [r5, #0]
 8005074:	6822      	ldr	r2, [r4, #0]
 8005076:	4623      	mov	r3, r4
 8005078:	0752      	lsls	r2, r2, #29
 800507a:	d5c7      	bpl.n	800500c <HAL_UART_Transmit+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800507c:	69e2      	ldr	r2, [r4, #28]
 800507e:	0510      	lsls	r0, r2, #20
 8005080:	d5c4      	bpl.n	800500c <HAL_UART_Transmit+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005086:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800508c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	e844 2100 	strex	r1, r2, [r4]
 8005094:	b139      	cbz	r1, 80050a6 <HAL_UART_Transmit+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	e853 2f00 	ldrex	r2, [r3]
 800509a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	e843 2100 	strex	r1, r2, [r3]
 80050a2:	2900      	cmp	r1, #0
 80050a4:	d1f7      	bne.n	8005096 <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	f103 0208 	add.w	r2, r3, #8
 80050aa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	f103 0008 	add.w	r0, r3, #8
 80050b6:	e840 2100 	strex	r1, r2, [r0]
 80050ba:	2900      	cmp	r1, #0
 80050bc:	d1f3      	bne.n	80050a6 <HAL_UART_Transmit+0x10a>
          huart->gState = HAL_UART_STATE_READY;
 80050be:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80050c0:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 80050c2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80050c6:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80050ca:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ce:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 80050d2:	e7c1      	b.n	8005058 <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050d4:	f838 3b02 	ldrh.w	r3, [r8], #2
 80050d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050dc:	e7a0      	b.n	8005020 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80050de:	2002      	movs	r0, #2
}
 80050e0:	b003      	add	sp, #12
 80050e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	e772      	b.n	8004fd6 <HAL_UART_Transmit+0x3a>
 80050f0:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	e843 2100 	strex	r1, r2, [r3]
 80050fe:	2900      	cmp	r1, #0
 8005100:	d1f7      	bne.n	80050f2 <HAL_UART_Transmit+0x156>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	f103 0208 	add.w	r2, r3, #8
 8005106:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	f103 0008 	add.w	r0, r3, #8
 8005112:	e840 2100 	strex	r1, r2, [r0]
 8005116:	2900      	cmp	r1, #0
 8005118:	d1f3      	bne.n	8005102 <HAL_UART_Transmit+0x166>
        huart->gState = HAL_UART_STATE_READY;
 800511a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800511c:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800511e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8005122:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005126:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800512a:	b003      	add	sp, #12
 800512c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005130:	692b      	ldr	r3, [r5, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f47f af62 	bne.w	8004ffc <HAL_UART_Transmit+0x60>
 8005138:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800513a:	4699      	mov	r9, r3
 800513c:	e75e      	b.n	8004ffc <HAL_UART_Transmit+0x60>
      return HAL_TIMEOUT;
 800513e:	2003      	movs	r0, #3
 8005140:	e78a      	b.n	8005058 <HAL_UART_Transmit+0xbc>
 8005142:	bf00      	nop

08005144 <HAL_UART_Init>:
  if (huart == NULL)
 8005144:	2800      	cmp	r0, #0
 8005146:	d066      	beq.n	8005216 <HAL_UART_Init+0xd2>
{
 8005148:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800514a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800514e:	4604      	mov	r4, r0
{
 8005150:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_RESET)
 8005152:	2b00      	cmp	r3, #0
 8005154:	d04c      	beq.n	80051f0 <HAL_UART_Init+0xac>
  huart->gState = HAL_UART_STATE_BUSY;
 8005156:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005158:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800515a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800515e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005160:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005168:	f7ff fd5a 	bl	8004c20 <UART_SetConfig>
 800516c:	2801      	cmp	r0, #1
 800516e:	d03c      	beq.n	80051ea <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	d135      	bne.n	80051e2 <HAL_UART_Init+0x9e>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005176:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8005180:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005182:	6899      	ldr	r1, [r3, #8]
 8005184:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8005188:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800518a:	6819      	ldr	r1, [r3, #0]
 800518c:	f041 0101 	orr.w	r1, r1, #1
 8005190:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005196:	f7fb ffa9 	bl	80010ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800519a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800519c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	0712      	lsls	r2, r2, #28
 80051a2:	d40e      	bmi.n	80051c2 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	075b      	lsls	r3, r3, #29
 80051a8:	d427      	bmi.n	80051fa <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80051ac:	2220      	movs	r2, #32
  return HAL_OK;
 80051ae:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80051b0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80051b4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80051b8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051bc:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80051be:	b003      	add	sp, #12
 80051c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c2:	f06f 477e 	mvn.w	r7, #4261412864	; 0xfe000000
 80051c6:	4603      	mov	r3, r0
 80051c8:	462a      	mov	r2, r5
 80051ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051ce:	4620      	mov	r0, r4
 80051d0:	9700      	str	r7, [sp, #0]
 80051d2:	f7ff fe6b 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 80051d6:	b9e0      	cbnz	r0, 8005212 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	075b      	lsls	r3, r3, #29
 80051de:	d40c      	bmi.n	80051fa <HAL_UART_Init+0xb6>
 80051e0:	e7e3      	b.n	80051aa <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80051e2:	4620      	mov	r0, r4
 80051e4:	f7ff fe0a 	bl	8004dfc <UART_AdvFeatureConfig>
 80051e8:	e7c5      	b.n	8005176 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 80051ea:	2001      	movs	r0, #1
}
 80051ec:	b003      	add	sp, #12
 80051ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80051f0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80051f4:	f7fb fdc8 	bl	8000d88 <HAL_UART_MspInit>
 80051f8:	e7ad      	b.n	8005156 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051fa:	f06f 457e 	mvn.w	r5, #4261412864	; 0xfe000000
 80051fe:	4633      	mov	r3, r6
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005206:	4620      	mov	r0, r4
 8005208:	9500      	str	r5, [sp, #0]
 800520a:	f7ff fe4f 	bl	8004eac <UART_WaitOnFlagUntilTimeout>
 800520e:	2800      	cmp	r0, #0
 8005210:	d0cb      	beq.n	80051aa <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8005212:	2003      	movs	r0, #3
 8005214:	e7d3      	b.n	80051be <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8005216:	2001      	movs	r0, #1
}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop

0800521c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800521c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005220:	2a01      	cmp	r2, #1
 8005222:	d017      	beq.n	8005254 <HAL_UARTEx_DisableFifoMode+0x38>
 8005224:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8005226:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005228:	2100      	movs	r1, #0
{
 800522a:	b430      	push	{r4, r5}

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800522c:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800522e:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005230:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005234:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005236:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005238:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800523c:	f024 0401 	bic.w	r4, r4, #1
 8005240:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005242:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005244:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005246:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 800524a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800524c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005250:	bc30      	pop	{r4, r5}
 8005252:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005254:	2002      	movs	r0, #2
}
 8005256:	4770      	bx	lr

08005258 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005258:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800525c:	2a01      	cmp	r2, #1
 800525e:	d037      	beq.n	80052d0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	4603      	mov	r3, r0
 8005262:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005264:	681a      	ldr	r2, [r3, #0]
{
 8005266:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005268:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800526c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800526e:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005270:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8005272:	f020 0001 	bic.w	r0, r0, #1
 8005276:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005278:	6890      	ldr	r0, [r2, #8]
 800527a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800527e:	4301      	orrs	r1, r0
 8005280:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005282:	b315      	cbz	r5, 80052ca <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005284:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005286:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005288:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800528c:	4911      	ldr	r1, [pc, #68]	; (80052d4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800528e:	4d12      	ldr	r5, [pc, #72]	; (80052d8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005290:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005294:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005298:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800529c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80052a0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052a4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052a6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052a8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ac:	fbb1 f1f5 	udiv	r1, r1, r5
 80052b0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80052b4:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80052b6:	2520      	movs	r5, #32
 80052b8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052bc:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80052be:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80052c2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80052c4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80052c8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80052ca:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80052cc:	4608      	mov	r0, r1
 80052ce:	e7ef      	b.n	80052b0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80052d0:	2002      	movs	r0, #2
}
 80052d2:	4770      	bx	lr
 80052d4:	08007bd0 	.word	0x08007bd0
 80052d8:	08007bc8 	.word	0x08007bc8

080052dc <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80052dc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80052e0:	2a01      	cmp	r2, #1
 80052e2:	d037      	beq.n	8005354 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80052e4:	4603      	mov	r3, r0
 80052e6:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052e8:	681a      	ldr	r2, [r3, #0]
{
 80052ea:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80052ec:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052f0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80052f2:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052f4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80052f6:	f020 0001 	bic.w	r0, r0, #1
 80052fa:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052fc:	6890      	ldr	r0, [r2, #8]
 80052fe:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8005302:	4301      	orrs	r1, r0
 8005304:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005306:	b315      	cbz	r5, 800534e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005308:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800530a:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800530c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005310:	4911      	ldr	r1, [pc, #68]	; (8005358 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8005312:	4d12      	ldr	r5, [pc, #72]	; (800535c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005314:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005318:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800531c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005320:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005324:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005328:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800532a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800532c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005330:	fbb1 f1f5 	udiv	r1, r1, r5
 8005334:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8005338:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800533a:	2520      	movs	r5, #32
 800533c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005340:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005342:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8005346:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005348:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800534c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800534e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005350:	4608      	mov	r0, r1
 8005352:	e7ef      	b.n	8005334 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005354:	2002      	movs	r0, #2
}
 8005356:	4770      	bx	lr
 8005358:	08007bd0 	.word	0x08007bd0
 800535c:	08007bc8 	.word	0x08007bc8

08005360 <FMC_NORSRAM_Init>:

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8005360:	688b      	ldr	r3, [r1, #8]
{
 8005362:	b4f0      	push	{r4, r5, r6, r7}
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005364:	2b08      	cmp	r3, #8
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005366:	684c      	ldr	r4, [r1, #4]
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005368:	bf0c      	ite	eq
 800536a:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 800536e:	f04f 0c00 	movne.w	ip, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005372:	4323      	orrs	r3, r4
 8005374:	68cc      	ldr	r4, [r1, #12]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005376:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005378:	4323      	orrs	r3, r4
 800537a:	690c      	ldr	r4, [r1, #16]
  btcr_reg |= Init->ContinuousClock;
 800537c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800537e:	4323      	orrs	r3, r4
 8005380:	694c      	ldr	r4, [r1, #20]
 8005382:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 8005384:	4323      	orrs	r3, r4
 8005386:	698c      	ldr	r4, [r1, #24]
 8005388:	4e33      	ldr	r6, [pc, #204]	; (8005458 <FMC_NORSRAM_Init+0xf8>)
 800538a:	4323      	orrs	r3, r4
 800538c:	69cc      	ldr	r4, [r1, #28]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800538e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005392:	ea43 0304 	orr.w	r3, r3, r4
 8005396:	6a0c      	ldr	r4, [r1, #32]
 8005398:	ea43 0304 	orr.w	r3, r3, r4
 800539c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800539e:	ea43 0304 	orr.w	r3, r3, r4
 80053a2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80053a4:	ea43 0304 	orr.w	r3, r3, r4
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80053a8:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80053ac:	f024 0401 	bic.w	r4, r4, #1
 80053b0:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80053b4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80053b6:	ea43 0304 	orr.w	r3, r3, r4
  btcr_reg |= Init->WriteFifo;
 80053ba:	6b4c      	ldr	r4, [r1, #52]	; 0x34
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80053bc:	ea43 0305 	orr.w	r3, r3, r5
 80053c0:	ea43 0304 	orr.w	r3, r3, r4
 80053c4:	ea43 0307 	orr.w	r3, r3, r7
 80053c8:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
 80053cc:	ea06 0607 	and.w	r6, r6, r7
 80053d0:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 80053d2:	ea43 0307 	orr.w	r3, r3, r7
 80053d6:	ea43 0306 	orr.w	r3, r3, r6
 80053da:	ea43 030c 	orr.w	r3, r3, ip
 80053de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80053e2:	d01a      	beq.n	800541a <FMC_NORSRAM_Init+0xba>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80053e4:	b1d2      	cbz	r2, 800541c <FMC_NORSRAM_Init+0xbc>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80053e6:	6803      	ldr	r3, [r0, #0]
 80053e8:	431c      	orrs	r4, r3
 80053ea:	6004      	str	r4, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 80053ec:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d10f      	bne.n	8005414 <FMC_NORSRAM_Init+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 80053f4:	6a03      	ldr	r3, [r0, #32]
 80053f6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	430b      	orrs	r3, r1

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 80053fe:	2a04      	cmp	r2, #4
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8005400:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 8005402:	d024      	beq.n	800544e <FMC_NORSRAM_Init+0xee>
 8005404:	d81e      	bhi.n	8005444 <FMC_NORSRAM_Init+0xe4>
 8005406:	b19a      	cbz	r2, 8005430 <FMC_NORSRAM_Init+0xd0>
 8005408:	2a02      	cmp	r2, #2
 800540a:	d11b      	bne.n	8005444 <FMC_NORSRAM_Init+0xe4>
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
        break;

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800540c:	6a03      	ldr	r3, [r0, #32]
 800540e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005412:	6203      	str	r3, [r0, #32]
        break;
    }
  }

  return HAL_OK;
}
 8005414:	2000      	movs	r0, #0
 8005416:	bcf0      	pop	{r4, r5, r6, r7}
 8005418:	4770      	bx	lr
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800541a:	b972      	cbnz	r2, 800543a <FMC_NORSRAM_Init+0xda>
  if (Init->MaxChipSelectPulse == ENABLE)
 800541c:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8005420:	2b01      	cmp	r3, #1
 8005422:	d1f7      	bne.n	8005414 <FMC_NORSRAM_Init+0xb4>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8005424:	6a03      	ldr	r3, [r0, #32]
 8005426:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	4313      	orrs	r3, r2
 800542e:	6203      	str	r3, [r0, #32]
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8005430:	6a03      	ldr	r3, [r0, #32]
 8005432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005436:	6203      	str	r3, [r0, #32]
        break;
 8005438:	e7ec      	b.n	8005414 <FMC_NORSRAM_Init+0xb4>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800543a:	6803      	ldr	r3, [r0, #0]
 800543c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005440:	6003      	str	r3, [r0, #0]
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8005442:	e7d0      	b.n	80053e6 <FMC_NORSRAM_Init+0x86>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8005444:	6a03      	ldr	r3, [r0, #32]
 8005446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800544a:	6203      	str	r3, [r0, #32]
        break;
 800544c:	e7e2      	b.n	8005414 <FMC_NORSRAM_Init+0xb4>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800544e:	6a03      	ldr	r3, [r0, #32]
 8005450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005454:	6203      	str	r3, [r0, #32]
        break;
 8005456:	e7dd      	b.n	8005414 <FMC_NORSRAM_Init+0xb4>
 8005458:	ff000480 	.word	0xff000480

0800545c <FMC_NORSRAM_Timing_Init>:
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800545c:	694b      	ldr	r3, [r1, #20]
 800545e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8005462:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005464:	f103 3cff 	add.w	ip, r3, #4294967295
 8005468:	69cc      	ldr	r4, [r1, #28]
 800546a:	6853      	ldr	r3, [r2, #4]
 800546c:	680b      	ldr	r3, [r1, #0]
 800546e:	4323      	orrs	r3, r4
 8005470:	684c      	ldr	r4, [r1, #4]
 8005472:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8005476:	688c      	ldr	r4, [r1, #8]
 8005478:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800547c:	68cc      	ldr	r4, [r1, #12]
 800547e:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 8005482:	690c      	ldr	r4, [r1, #16]
 8005484:	6989      	ldr	r1, [r1, #24]
 8005486:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800548a:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800548e:	3902      	subs	r1, #2
 8005490:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005494:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8005496:	6803      	ldr	r3, [r0, #0]
 8005498:	02db      	lsls	r3, r3, #11
 800549a:	d50c      	bpl.n	80054b6 <FMC_NORSRAM_Timing_Init+0x5a>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800549c:	6842      	ldr	r2, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800549e:	6843      	ldr	r3, [r0, #4]
 80054a0:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80054a4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80054a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80054ac:	ea4e 0e02 	orr.w	lr, lr, r2
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80054b0:	ea43 030e 	orr.w	r3, r3, lr
 80054b4:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 80054b6:	2000      	movs	r0, #0
 80054b8:	bd10      	pop	{r4, pc}
 80054ba:	bf00      	nop

080054bc <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80054bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c0:	d005      	beq.n	80054ce <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80054c2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80054c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80054ca:	2000      	movs	r0, #0
 80054cc:	4770      	bx	lr
{
 80054ce:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80054d0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80054d4:	69cd      	ldr	r5, [r1, #28]
 80054d6:	680b      	ldr	r3, [r1, #0]
 80054d8:	f004 6c7f 	and.w	ip, r4, #267386880	; 0xff00000
 80054dc:	684c      	ldr	r4, [r1, #4]
 80054de:	432b      	orrs	r3, r5
 80054e0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80054e4:	688c      	ldr	r4, [r1, #8]
 80054e6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80054ea:	68cc      	ldr	r4, [r1, #12]
 80054ec:	6909      	ldr	r1, [r1, #16]
 80054ee:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 80054f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80054f6:	ea43 030c 	orr.w	r3, r3, ip
 80054fa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80054fe:	bc30      	pop	{r4, r5}
 8005500:	2000      	movs	r0, #0
 8005502:	4770      	bx	lr

08005504 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005508:	680c      	ldr	r4, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550a:	fa94 fca4 	rbit	ip, r4
  return __builtin_clz(value);
 800550e:	fabc fc8c 	clz	ip, ip

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8005512:	fa34 f30c 	lsrs.w	r3, r4, ip
 8005516:	f000 80bc 	beq.w	8005692 <LL_GPIO_Init+0x18e>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800551a:	684d      	ldr	r5, [r1, #4]
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800551c:	f04f 0e01 	mov.w	lr, #1
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005520:	f04f 080f 	mov.w	r8, #15
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005524:	2603      	movs	r6, #3
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005526:	1e6f      	subs	r7, r5, #1
 8005528:	e020      	b.n	800556c <LL_GPIO_Init+0x68>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800552a:	f8d1 9010 	ldr.w	r9, [r1, #16]
 800552e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8005536:	b132      	cbz	r2, 8005546 <LL_GPIO_Init+0x42>
  return __builtin_clz(value);
 8005538:	fab2 f282 	clz	r2, r2
 800553c:	0052      	lsls	r2, r2, #1
 800553e:	fa06 f202 	lsl.w	r2, r6, r2
 8005542:	ea2a 0a02 	bic.w	sl, sl, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005546:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800554a:	2a00      	cmp	r2, #0
 800554c:	d07c      	beq.n	8005648 <LL_GPIO_Init+0x144>
  return __builtin_clz(value);
 800554e:	fab2 f282 	clz	r2, r2
 8005552:	0052      	lsls	r2, r2, #1
 8005554:	fa09 f202 	lsl.w	r2, r9, r2
 8005558:	ea42 020a 	orr.w	r2, r2, sl
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800555c:	2d02      	cmp	r5, #2
 800555e:	60c2      	str	r2, [r0, #12]
 8005560:	d03d      	beq.n	80055de <LL_GPIO_Init+0xda>
    pinpos++;
 8005562:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8005566:	fa34 f30c 	lsrs.w	r3, r4, ip
 800556a:	d05e      	beq.n	800562a <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800556c:	fa0e f30c 	lsl.w	r3, lr, ip
    if (currentpin != 0U)
 8005570:	4023      	ands	r3, r4
 8005572:	d0f6      	beq.n	8005562 <LL_GPIO_Init+0x5e>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005574:	f8d0 9000 	ldr.w	r9, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800557c:	b132      	cbz	r2, 800558c <LL_GPIO_Init+0x88>
  return __builtin_clz(value);
 800557e:	fab2 f282 	clz	r2, r2
 8005582:	0052      	lsls	r2, r2, #1
 8005584:	fa06 f202 	lsl.w	r2, r6, r2
 8005588:	ea29 0902 	bic.w	r9, r9, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8005590:	2a00      	cmp	r2, #0
 8005592:	d057      	beq.n	8005644 <LL_GPIO_Init+0x140>
  return __builtin_clz(value);
 8005594:	fab2 f282 	clz	r2, r2
 8005598:	0052      	lsls	r2, r2, #1
 800559a:	fa05 f202 	lsl.w	r2, r5, r2
 800559e:	ea42 0209 	orr.w	r2, r2, r9
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80055a2:	2f01      	cmp	r7, #1
 80055a4:	6002      	str	r2, [r0, #0]
 80055a6:	d8c0      	bhi.n	800552a <LL_GPIO_Init+0x26>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80055a8:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80055ac:	f8d0 a008 	ldr.w	sl, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b0:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80055b4:	b132      	cbz	r2, 80055c4 <LL_GPIO_Init+0xc0>
  return __builtin_clz(value);
 80055b6:	fab2 f282 	clz	r2, r2
 80055ba:	0052      	lsls	r2, r2, #1
 80055bc:	fa06 f202 	lsl.w	r2, r6, r2
 80055c0:	ea2a 0a02 	bic.w	sl, sl, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80055c8:	2a00      	cmp	r2, #0
 80055ca:	d05c      	beq.n	8005686 <LL_GPIO_Init+0x182>
  return __builtin_clz(value);
 80055cc:	fab2 f282 	clz	r2, r2
 80055d0:	0052      	lsls	r2, r2, #1
 80055d2:	fa09 f202 	lsl.w	r2, r9, r2
 80055d6:	ea42 020a 	orr.w	r2, r2, sl
 80055da:	6082      	str	r2, [r0, #8]
}
 80055dc:	e7a5      	b.n	800552a <LL_GPIO_Init+0x26>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055de:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80055e2:	b39a      	cbz	r2, 800564c <LL_GPIO_Init+0x148>
  return __builtin_clz(value);
 80055e4:	fab2 f282 	clz	r2, r2
        if (POSITION_VAL(currentpin) < 8U)
 80055e8:	2a07      	cmp	r2, #7
 80055ea:	dc2f      	bgt.n	800564c <LL_GPIO_Init+0x148>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80055ec:	f8d1 9014 	ldr.w	r9, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80055f0:	f8d0 a020 	ldr.w	sl, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80055f8:	b132      	cbz	r2, 8005608 <LL_GPIO_Init+0x104>
  return __builtin_clz(value);
 80055fa:	fab2 f282 	clz	r2, r2
 80055fe:	0092      	lsls	r2, r2, #2
 8005600:	fa08 f202 	lsl.w	r2, r8, r2
 8005604:	ea2a 0a02 	bic.w	sl, sl, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800560c:	2b00      	cmp	r3, #0
 800560e:	d03c      	beq.n	800568a <LL_GPIO_Init+0x186>
  return __builtin_clz(value);
 8005610:	fab3 f383 	clz	r3, r3
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	fa09 f303 	lsl.w	r3, r9, r3
 800561a:	ea43 030a 	orr.w	r3, r3, sl
    pinpos++;
 800561e:	f10c 0c01 	add.w	ip, ip, #1
 8005622:	6203      	str	r3, [r0, #32]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8005624:	fa34 f30c 	lsrs.w	r3, r4, ip
 8005628:	d1a0      	bne.n	800556c <LL_GPIO_Init+0x68>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800562a:	2f01      	cmp	r7, #1
 800562c:	d807      	bhi.n	800563e <LL_GPIO_Init+0x13a>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800562e:	68ca      	ldr	r2, [r1, #12]
 8005630:	6843      	ldr	r3, [r0, #4]
 8005632:	fb04 f202 	mul.w	r2, r4, r2
 8005636:	ea23 0404 	bic.w	r4, r3, r4
 800563a:	4314      	orrs	r4, r2
 800563c:	6044      	str	r4, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800563e:	2000      	movs	r0, #0
 8005640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005644:	2240      	movs	r2, #64	; 0x40
 8005646:	e7a8      	b.n	800559a <LL_GPIO_Init+0x96>
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	e783      	b.n	8005554 <LL_GPIO_Init+0x50>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800564c:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800564e:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 8005652:	0a1b      	lsrs	r3, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005654:	fa93 faa3 	rbit	sl, r3
  if (value == 0U)
 8005658:	f1ba 0f00 	cmp.w	sl, #0
 800565c:	d007      	beq.n	800566e <LL_GPIO_Init+0x16a>
  return __builtin_clz(value);
 800565e:	faba fa8a 	clz	sl, sl
 8005662:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005666:	fa08 fa0a 	lsl.w	sl, r8, sl
 800566a:	ea29 090a 	bic.w	r9, r9, sl
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005672:	b163      	cbz	r3, 800568e <LL_GPIO_Init+0x18a>
  return __builtin_clz(value);
 8005674:	fab3 f383 	clz	r3, r3
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	ea43 0309 	orr.w	r3, r3, r9
 8005682:	6243      	str	r3, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005684:	e76d      	b.n	8005562 <LL_GPIO_Init+0x5e>
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	e7a3      	b.n	80055d2 <LL_GPIO_Init+0xce>
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	e7c3      	b.n	8005616 <LL_GPIO_Init+0x112>
 800568e:	2380      	movs	r3, #128	; 0x80
 8005690:	e7f3      	b.n	800567a <LL_GPIO_Init+0x176>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005692:	684f      	ldr	r7, [r1, #4]
 8005694:	3f01      	subs	r7, #1
 8005696:	e7c8      	b.n	800562a <LL_GPIO_Init+0x126>

08005698 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint32_t ChipAddr, uint8_t sn, uint8_t* buf, uint16_t port)
{
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(ChipAddr, sn))
 800569c:	f101 0408 	add.w	r4, r1, #8
 80056a0:	01a4      	lsls	r4, r4, #6
{
 80056a2:	460d      	mov	r5, r1
 80056a4:	b087      	sub	sp, #28
   switch(getSn_SR(ChipAddr, sn))
 80056a6:	f104 0108 	add.w	r1, r4, #8
{
 80056aa:	4606      	mov	r6, r0
 80056ac:	4617      	mov	r7, r2
 80056ae:	4698      	mov	r8, r3
   switch(getSn_SR(ChipAddr, sn))
 80056b0:	f000 f8cc 	bl	800584c <WIZCHIP_READ>
 80056b4:	b2c0      	uxtb	r0, r0
 80056b6:	281c      	cmp	r0, #28
 80056b8:	d81e      	bhi.n	80056f8 <loopback_tcps+0x60>
 80056ba:	e8df f000 	tbb	[pc, r0]
 80056be:	1d41      	.short	0x1d41
 80056c0:	1d1d1d1d 	.word	0x1d1d1d1d
 80056c4:	1d1d1d1d 	.word	0x1d1d1d1d
 80056c8:	1d1d1d1d 	.word	0x1d1d1d1d
 80056cc:	1d1d1d1d 	.word	0x1d1d1d1d
 80056d0:	1d1d321d 	.word	0x1d1d321d
 80056d4:	1d1d0f1d 	.word	0x1d1d0f1d
 80056d8:	1d1d      	.short	0x1d1d
 80056da:	22          	.byte	0x22
 80056db:	00          	.byte	0x00
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(ChipAddr, sn) & Sn_IR_CON)
 80056dc:	f104 0806 	add.w	r8, r4, #6
 80056e0:	4641      	mov	r1, r8
 80056e2:	4630      	mov	r0, r6
 80056e4:	f000 f8b2 	bl	800584c <WIZCHIP_READ>
 80056e8:	07c3      	lsls	r3, r0, #31
 80056ea:	d46b      	bmi.n	80057c4 <loopback_tcps+0x12c>

			printf("%x -> %d:Connected - %d.%d.%d.%d : %d\r\n", ChipAddr ,sn, destip[0], destip[1], destip[2], destip[3], destport);
#endif
			setSn_IR(ChipAddr, sn,Sn_IR_CON);
         }
		 if((size = getSn_RX_RSR(ChipAddr, sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 80056ec:	4629      	mov	r1, r5
 80056ee:	4630      	mov	r0, r6
 80056f0:	f000 f8e2 	bl	80058b8 <getSn_RX_RSR>
 80056f4:	b283      	uxth	r3, r0
 80056f6:	bb93      	cbnz	r3, 800575e <loopback_tcps+0xc6>
   switch(getSn_SR(ChipAddr, sn))
 80056f8:	2401      	movs	r4, #1
         break;
      default:
         break;
   }
   return 1;
}
 80056fa:	4620      	mov	r0, r4
 80056fc:	b007      	add	sp, #28
 80056fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         printf("%d:CloseWait\r\n",sn);
 8005702:	4629      	mov	r1, r5
 8005704:	484a      	ldr	r0, [pc, #296]	; (8005830 <loopback_tcps+0x198>)
 8005706:	f001 f949 	bl	800699c <iprintf>
         if((ret = disconnect(ChipAddr, sn)) != SOCK_OK) return ret;
 800570a:	4629      	mov	r1, r5
 800570c:	4630      	mov	r0, r6
 800570e:	f000 fc3b 	bl	8005f88 <disconnect>
 8005712:	2801      	cmp	r0, #1
 8005714:	4604      	mov	r4, r0
 8005716:	d1f0      	bne.n	80056fa <loopback_tcps+0x62>
         printf("%d:Socket Closed\r\n", sn);
 8005718:	4629      	mov	r1, r5
 800571a:	4846      	ldr	r0, [pc, #280]	; (8005834 <loopback_tcps+0x19c>)
 800571c:	f001 f93e 	bl	800699c <iprintf>
         break;
 8005720:	e7eb      	b.n	80056fa <loopback_tcps+0x62>
    	 printf("%x -> %d:Listen, TCP server loopback, port [%d]\r\n", ChipAddr ,sn, port);
 8005722:	4643      	mov	r3, r8
 8005724:	462a      	mov	r2, r5
 8005726:	4631      	mov	r1, r6
 8005728:	4843      	ldr	r0, [pc, #268]	; (8005838 <loopback_tcps+0x1a0>)
 800572a:	f001 f937 	bl	800699c <iprintf>
         if( (ret = listen(ChipAddr, sn)) != SOCK_OK) return ret;
 800572e:	4629      	mov	r1, r5
 8005730:	4630      	mov	r0, r6
 8005732:	f000 fbe9 	bl	8005f08 <listen>
 8005736:	4604      	mov	r4, r0
}
 8005738:	4620      	mov	r0, r4
 800573a:	b007      	add	sp, #28
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((ret = socket(ChipAddr, sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8005740:	2400      	movs	r4, #0
 8005742:	4643      	mov	r3, r8
 8005744:	9400      	str	r4, [sp, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	4630      	mov	r0, r6
 800574a:	4629      	mov	r1, r5
 800574c:	f000 fb1a 	bl	8005d84 <socket>
 8005750:	4285      	cmp	r5, r0
 8005752:	4604      	mov	r4, r0
 8005754:	d0d0      	beq.n	80056f8 <loopback_tcps+0x60>
}
 8005756:	4620      	mov	r0, r4
 8005758:	b007      	add	sp, #28
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800575e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005762:	bf28      	it	cs
 8005764:	f44f 6300 	movcs.w	r3, #2048	; 0x800
			ret = recv(ChipAddr, sn, buf, size);
 8005768:	463a      	mov	r2, r7
 800576a:	4629      	mov	r1, r5
 800576c:	4630      	mov	r0, r6
 800576e:	9305      	str	r3, [sp, #20]
 8005770:	f000 fd10 	bl	8006194 <recv>
 8005774:	4604      	mov	r4, r0
			printf("%x -> %d:recv[%d][%d][%s]\r\n", ChipAddr ,sn, size, ret, buf);
 8005776:	462a      	mov	r2, r5
 8005778:	4631      	mov	r1, r6
 800577a:	9b05      	ldr	r3, [sp, #20]
 800577c:	482f      	ldr	r0, [pc, #188]	; (800583c <loopback_tcps+0x1a4>)
 800577e:	9701      	str	r7, [sp, #4]
 8005780:	9400      	str	r4, [sp, #0]
 8005782:	f001 f90b 	bl	800699c <iprintf>
			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8005786:	2c00      	cmp	r4, #0
 8005788:	ddb7      	ble.n	80056fa <loopback_tcps+0x62>
			size = (uint16_t) ret;
 800578a:	fa1f f984 	uxth.w	r9, r4
			while(size != sentsize)
 800578e:	f1b9 0f00 	cmp.w	r9, #0
 8005792:	d0b1      	beq.n	80056f8 <loopback_tcps+0x60>
			sentsize = 0;
 8005794:	f04f 0800 	mov.w	r8, #0
 8005798:	e001      	b.n	800579e <loopback_tcps+0x106>
			while(size != sentsize)
 800579a:	45c1      	cmp	r9, r8
 800579c:	d0ac      	beq.n	80056f8 <loopback_tcps+0x60>
				ret = send(ChipAddr, sn, buf+sentsize, size-sentsize);
 800579e:	eba9 0308 	sub.w	r3, r9, r8
 80057a2:	eb07 0208 	add.w	r2, r7, r8
 80057a6:	4629      	mov	r1, r5
 80057a8:	4630      	mov	r0, r6
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f000 fc3c 	bl	8006028 <send>
				if(ret < 0)
 80057b0:	1e04      	subs	r4, r0, #0
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80057b2:	44a0      	add	r8, r4
 80057b4:	fa1f f888 	uxth.w	r8, r8
				if(ret < 0)
 80057b8:	daef      	bge.n	800579a <loopback_tcps+0x102>
					close(ChipAddr, sn);
 80057ba:	4629      	mov	r1, r5
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 fad9 	bl	8005d74 <close>
					return ret;
 80057c2:	e79a      	b.n	80056fa <loopback_tcps+0x62>
			getSn_DIPR(ChipAddr, sn, destip);
 80057c4:	f104 0114 	add.w	r1, r4, #20
 80057c8:	4630      	mov	r0, r6
 80057ca:	9105      	str	r1, [sp, #20]
 80057cc:	f000 f83e 	bl	800584c <WIZCHIP_READ>
 80057d0:	9905      	ldr	r1, [sp, #20]
 80057d2:	4683      	mov	fp, r0
 80057d4:	4630      	mov	r0, r6
 80057d6:	f000 f839 	bl	800584c <WIZCHIP_READ>
 80057da:	f104 0a16 	add.w	sl, r4, #22
 80057de:	4681      	mov	r9, r0
 80057e0:	4651      	mov	r1, sl
 80057e2:	4630      	mov	r0, r6
 80057e4:	f000 f832 	bl	800584c <WIZCHIP_READ>
 80057e8:	4603      	mov	r3, r0
 80057ea:	4651      	mov	r1, sl
 80057ec:	4630      	mov	r0, r6
 80057ee:	469a      	mov	sl, r3
 80057f0:	f000 f82c 	bl	800584c <WIZCHIP_READ>
 80057f4:	4603      	mov	r3, r0
			destport = getSn_DPORT(ChipAddr, sn);
 80057f6:	f104 0112 	add.w	r1, r4, #18
 80057fa:	4630      	mov	r0, r6
			getSn_DIPR(ChipAddr, sn, destip);
 80057fc:	461c      	mov	r4, r3
			destport = getSn_DPORT(ChipAddr, sn);
 80057fe:	f000 f825 	bl	800584c <WIZCHIP_READ>
			printf("%x -> %d:Connected - %d.%d.%d.%d : %d\r\n", ChipAddr ,sn, destip[0], destip[1], destip[2], destip[3], destport);
 8005802:	b2e4      	uxtb	r4, r4
 8005804:	f3ca 230f 	ubfx	r3, sl, #8, #16
 8005808:	fa5f f289 	uxtb.w	r2, r9
 800580c:	4631      	mov	r1, r6
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	9200      	str	r2, [sp, #0]
 8005812:	9003      	str	r0, [sp, #12]
 8005814:	462a      	mov	r2, r5
 8005816:	f3cb 230f 	ubfx	r3, fp, #8, #16
 800581a:	9402      	str	r4, [sp, #8]
 800581c:	4808      	ldr	r0, [pc, #32]	; (8005840 <loopback_tcps+0x1a8>)
 800581e:	f001 f8bd 	bl	800699c <iprintf>
			setSn_IR(ChipAddr, sn,Sn_IR_CON);
 8005822:	2201      	movs	r2, #1
 8005824:	4641      	mov	r1, r8
 8005826:	4630      	mov	r0, r6
 8005828:	f000 f80c 	bl	8005844 <WIZCHIP_WRITE>
 800582c:	e75e      	b.n	80056ec <loopback_tcps+0x54>
 800582e:	bf00      	nop
 8005830:	08007c1c 	.word	0x08007c1c
 8005834:	08007c2c 	.word	0x08007c2c
 8005838:	08007c40 	.word	0x08007c40
 800583c:	08007c00 	.word	0x08007c00
 8005840:	08007bd8 	.word	0x08007bd8

08005844 <WIZCHIP_WRITE>:
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t ChipAddr, uint32_t AddrSel, uint16_t wb )
{
#if _USE_W5300_OPTIMIZE
	_W5300_DATA(ChipAddr, AddrSel) = wb;
 8005844:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
#endif

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
#endif
}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop

0800584c <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t ChipAddr, uint32_t AddrSel)
{
   uint16_t ret;
#if _USE_W5300_OPTIMIZE
   ret = _W5300_DATA(ChipAddr, AddrSel);
 800584c:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]

   WIZCHIP.CS._deselect();
   WIZCHIP_CRITICAL_EXIT();
   #endif
   return ret;
}
 8005850:	b280      	uxth	r0, r0
 8005852:	4770      	bx	lr

08005854 <getTMSR>:
   WIZCHIP_WRITE(ChipAddr, WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
}
   
uint8_t getTMSR(uint32_t ChipAddr, uint8_t sn)
{
   if(sn & 0x01)
 8005854:	f011 0f01 	tst.w	r1, #1
      return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8005858:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800585c:	f101 0120 	add.w	r1, r1, #32
   ret = _W5300_DATA(ChipAddr, AddrSel);
 8005860:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
      return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8005864:	bf14      	ite	ne
 8005866:	b2c0      	uxtbne	r0, r0
   return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8005868:	f3c0 2007 	ubfxeq	r0, r0, #8, #8
}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop

08005870 <getRMSR>:
   WIZCHIP_WRITE(ChipAddr, WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
}
   
uint8_t getRMSR(uint32_t ChipAddr, uint8_t sn)
{
   if(sn & 0x01)
 8005870:	f011 0f01 	tst.w	r1, #1
      return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8005874:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8005878:	f101 0128 	add.w	r1, r1, #40	; 0x28
   ret = _W5300_DATA(ChipAddr, AddrSel);
 800587c:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
      return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8005880:	bf14      	ite	ne
 8005882:	b2c0      	uxtbne	r0, r0
   return (uint8_t)(WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8005884:	f3c0 2007 	ubfxeq	r0, r0, #8, #8
}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop

0800588c <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint32_t ChipAddr, uint8_t sn)
{
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
 800588c:	2301      	movs	r3, #1
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_TX_FSR(sn))) << 16) | 
 800588e:	3108      	adds	r1, #8
 8005890:	0189      	lsls	r1, r1, #6
 8005892:	f101 0c24 	add.w	ip, r1, #36	; 0x24
                     (((uint32_t)WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8005896:	3126      	adds	r1, #38	; 0x26
   ret = _W5300_DATA(ChipAddr, AddrSel);
 8005898:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 800589c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80058a0:	461a      	mov	r2, r3
 80058a2:	f8bc 0000 	ldrh.w	r0, [ip]
 80058a6:	880b      	ldrh	r3, [r1, #0]
 80058a8:	b29b      	uxth	r3, r3
      free_tx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_TX_FSR(sn))) << 16) | 
 80058aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d1f6      	bne.n	80058a0 <getSn_TX_FSR+0x14>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
   }                                                                       
   return free_tx_size;                                                    
}                                                                          
 80058b2:	4618      	mov	r0, r3
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop

080058b8 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint32_t ChipAddr, uint8_t sn)
{
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
 80058b8:	2301      	movs	r3, #1
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_RX_RSR(sn))) << 16) | 
 80058ba:	f101 0c08 	add.w	ip, r1, #8
 80058be:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
{
 80058c2:	b500      	push	{lr}
      received_rx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_RX_RSR(sn))) << 16) | 
 80058c4:	f10c 0e28 	add.w	lr, ip, #40	; 0x28
                         (((uint32_t)WIZCHIP_READ(ChipAddr, WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 80058c8:	f10c 0c2a 	add.w	ip, ip, #42	; 0x2a
   ret = _W5300_DATA(ChipAddr, AddrSel);
 80058cc:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 80058d0:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 80058d4:	461a      	mov	r2, r3
 80058d6:	f8be 0000 	ldrh.w	r0, [lr]
 80058da:	f8bc 3000 	ldrh.w	r3, [ip]
 80058de:	b29b      	uxth	r3, r3
      received_rx_size = (((uint32_t)WIZCHIP_READ(ChipAddr, Sn_RX_RSR(sn))) << 16) | 
 80058e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
      if(received_rx_size == received_rx_size1) break;                                                                         
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1f5      	bne.n	80058d4 <getSn_RX_RSR+0x1c>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 80058e8:	4a03      	ldr	r2, [pc, #12]	; (80058f8 <getSn_RX_RSR+0x40>)
 80058ea:	5c50      	ldrb	r0, [r2, r1]
 80058ec:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 80058f0:	4418      	add	r0, r3
 80058f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80058f6:	bf00      	nop
 80058f8:	2000130c 	.word	0x2000130c

080058fc <wiz_send_data>:


void wiz_send_data(uint32_t ChipAddr, uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint32_t i = 0;
   if(len == 0)  return;
 80058fc:	b19b      	cbz	r3, 8005926 <wiz_send_data+0x2a>
   
   for(i = 0; i < len ; i += 2)
 80058fe:	f04f 0c00 	mov.w	ip, #0
	_W5300_DATA(ChipAddr, AddrSel) = wb;
 8005902:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
{
 8005906:	b510      	push	{r4, lr}
	_W5300_DATA(ChipAddr, AddrSel) = wb;
 8005908:	f200 405c 	addw	r0, r0, #1116	; 0x45c
 800590c:	1c54      	adds	r4, r2, #1
      setSn_TX_FIFOR(ChipAddr, sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 800590e:	f812 e00c 	ldrb.w	lr, [r2, ip]
 8005912:	f814 100c 	ldrb.w	r1, [r4, ip]
   for(i = 0; i < len ; i += 2)
 8005916:	f10c 0c02 	add.w	ip, ip, #2
      setSn_TX_FIFOR(ChipAddr, sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 800591a:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
   for(i = 0; i < len ; i += 2)
 800591e:	4563      	cmp	r3, ip
	_W5300_DATA(ChipAddr, AddrSel) = wb;
 8005920:	8001      	strh	r1, [r0, #0]
   for(i = 0; i < len ; i += 2)
 8005922:	d8f4      	bhi.n	800590e <wiz_send_data+0x12>
}
 8005924:	bd10      	pop	{r4, pc}
 8005926:	4770      	bx	lr

08005928 <wiz_recv_data>:
void wiz_recv_data(uint32_t ChipAddr, uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint16_t rd = 0;
   uint32_t i = 0;
   
   if(len == 0) return;
 8005928:	b30b      	cbz	r3, 800596e <wiz_recv_data+0x46>
      
   for(i = 0; i < len; i++)
 800592a:	f04f 0c00 	mov.w	ip, #0
   ret = _W5300_DATA(ChipAddr, AddrSel);
 800592e:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
{
 8005932:	b510      	push	{r4, lr}
   ret = _W5300_DATA(ChipAddr, AddrSel);
 8005934:	f500 6e8c 	add.w	lr, r0, #1120	; 0x460
   uint16_t rd = 0;
 8005938:	4660      	mov	r0, ip
 800593a:	e00b      	b.n	8005954 <wiz_recv_data+0x2c>
   ret = _W5300_DATA(ChipAddr, AddrSel);
 800593c:	f8be 0000 	ldrh.w	r0, [lr]
   for(i = 0; i < len; i++)
 8005940:	f10c 0c01 	add.w	ip, ip, #1
   {
      if((i & 0x01)==0)
      {
         rd = getSn_RX_FIFOR(ChipAddr, sn);
         wizdata[i]   = (uint8_t)(rd >> 8);
 8005944:	f3c0 2407 	ubfx	r4, r0, #8, #8
   for(i = 0; i < len; i++)
 8005948:	4563      	cmp	r3, ip
         wizdata[i]   = (uint8_t)(rd >> 8);
 800594a:	7014      	strb	r4, [r2, #0]
   ret = _W5300_DATA(ChipAddr, AddrSel);
 800594c:	b280      	uxth	r0, r0
   for(i = 0; i < len; i++)
 800594e:	f102 0201 	add.w	r2, r2, #1
 8005952:	d009      	beq.n	8005968 <wiz_recv_data+0x40>
      if((i & 0x01)==0)
 8005954:	f01c 0f01 	tst.w	ip, #1
 8005958:	d0f0      	beq.n	800593c <wiz_recv_data+0x14>
   for(i = 0; i < len; i++)
 800595a:	f10c 0c01 	add.w	ip, ip, #1
 800595e:	4563      	cmp	r3, ip
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8005960:	7010      	strb	r0, [r2, #0]
   for(i = 0; i < len; i++)
 8005962:	f102 0201 	add.w	r2, r2, #1
 8005966:	d1f5      	bne.n	8005954 <wiz_recv_data+0x2c>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8005968:	4b01      	ldr	r3, [pc, #4]	; (8005970 <wiz_recv_data+0x48>)
 800596a:	5458      	strb	r0, [r3, r1]
}
 800596c:	bd10      	pop	{r4, pc}
 800596e:	4770      	bx	lr
 8005970:	20001314 	.word	0x20001314

08005974 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint32_t ChipAddr, uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005978:	2908      	cmp	r1, #8
{
 800597a:	b085      	sub	sp, #20
 800597c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005980:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8005984:	9201      	str	r2, [sp, #4]
   CHECK_SOCKNUM();
 8005986:	f200 815e 	bhi.w	8005c46 <sendto+0x2d2>
   switch(getSn_MR(ChipAddr, sn) & 0x0F)
 800598a:	f101 0708 	add.w	r7, r1, #8
 800598e:	01bf      	lsls	r7, r7, #6
 8005990:	460e      	mov	r6, r1
 8005992:	4639      	mov	r1, r7
 8005994:	4604      	mov	r4, r0
 8005996:	461d      	mov	r5, r3
 8005998:	f7ff ff58 	bl	800584c <WIZCHIP_READ>
 800599c:	f000 000f 	and.w	r0, r0, #15
 80059a0:	3802      	subs	r0, #2
 80059a2:	2802      	cmp	r0, #2
 80059a4:	f200 8152 	bhi.w	8005c4c <sendto+0x2d8>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	f000 8152 	beq.w	8005c52 <sendto+0x2de>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80059ae:	f898 3000 	ldrb.w	r3, [r8]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80059b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80059b6:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80059ba:	f898 3002 	ldrb.w	r3, [r8, #2]
 80059be:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80059c2:	f898 3003 	ldrb.w	r3, [r8, #3]
 80059c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059ca:	9303      	str	r3, [sp, #12]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(ChipAddr, sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80c6 	beq.w	8005b5e <sendto+0x1ea>
   if((port  == 0) && ((getSn_MR(ChipAddr, sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80059d2:	f1ba 0f00 	cmp.w	sl, #0
 80059d6:	f000 80b8 	beq.w	8005b4a <sendto+0x1d6>
   tmp = getSn_SR(ChipAddr, sn);
 80059da:	f107 0908 	add.w	r9, r7, #8
 80059de:	4649      	mov	r1, r9
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff ff33 	bl	800584c <WIZCHIP_READ>
 80059e6:	b2c0      	uxtb	r0, r0
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80059e8:	2842      	cmp	r0, #66	; 0x42
 80059ea:	d008      	beq.n	80059fe <sendto+0x8a>
 80059ec:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 80059f0:	2822      	cmp	r0, #34	; 0x22
 80059f2:	d004      	beq.n	80059fe <sendto+0x8a>
 80059f4:	f06f 0006 	mvn.w	r0, #6
      if(taddr) setSUBR(ChipAddr, (uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 80059f8:	b005      	add	sp, #20
 80059fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   setSn_DIPR(ChipAddr, sn,addr);
 80059fe:	f898 3000 	ldrb.w	r3, [r8]
 8005a02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005a06:	4620      	mov	r0, r4
 8005a08:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8005a0c:	b292      	uxth	r2, r2
 8005a0e:	f107 0114 	add.w	r1, r7, #20
 8005a12:	f7ff ff17 	bl	8005844 <WIZCHIP_WRITE>
 8005a16:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005a1a:	f898 2003 	ldrb.w	r2, [r8, #3]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8005a24:	b292      	uxth	r2, r2
 8005a26:	f107 0116 	add.w	r1, r7, #22
 8005a2a:	f7ff ff0b 	bl	8005844 <WIZCHIP_WRITE>
   setSn_DPORT(ChipAddr, sn,port);      
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4620      	mov	r0, r4
 8005a32:	f107 0112 	add.w	r1, r7, #18
 8005a36:	f7ff ff05 	bl	8005844 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(ChipAddr, sn);
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff ff09 	bl	8005854 <getTMSR>
 8005a42:	0280      	lsls	r0, r0, #10
 8005a44:	b280      	uxth	r0, r0
 8005a46:	f04f 0801 	mov.w	r8, #1
 8005a4a:	4285      	cmp	r5, r0
 8005a4c:	bf28      	it	cs
 8005a4e:	4605      	movcs	r5, r0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005a50:	f8df a204 	ldr.w	sl, [pc, #516]	; 8005c58 <sendto+0x2e4>
 8005a54:	fa08 f806 	lsl.w	r8, r8, r6
      freesize = getSn_TX_FSR(ChipAddr, sn);
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f7ff ff16 	bl	800588c <getSn_TX_FSR>
      if(getSn_SR(ChipAddr, sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005a60:	4649      	mov	r1, r9
      freesize = getSn_TX_FSR(ChipAddr, sn);
 8005a62:	4683      	mov	fp, r0
      if(getSn_SR(ChipAddr, sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff fef1 	bl	800584c <WIZCHIP_READ>
 8005a6a:	b2c0      	uxtb	r0, r0
      freesize = getSn_TX_FSR(ChipAddr, sn);
 8005a6c:	fa1f fb8b 	uxth.w	fp, fp
      if(getSn_SR(ChipAddr, sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d07e      	beq.n	8005b72 <sendto+0x1fe>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005a74:	f8ba 2000 	ldrh.w	r2, [sl]
 8005a78:	ea12 0f08 	tst.w	r2, r8
 8005a7c:	d062      	beq.n	8005b44 <sendto+0x1d0>
 8005a7e:	455d      	cmp	r5, fp
 8005a80:	f200 80be 	bhi.w	8005c00 <sendto+0x28c>
	wiz_send_data(ChipAddr, sn, buf, len);
 8005a84:	9a01      	ldr	r2, [sp, #4]
 8005a86:	462b      	mov	r3, r5
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f7ff ff36 	bl	80058fc <wiz_send_data>
      getSIPR(ChipAddr, (uint8_t*)&taddr);
 8005a90:	2118      	movs	r1, #24
 8005a92:	4620      	mov	r0, r4
 8005a94:	f7ff feda 	bl	800584c <WIZCHIP_READ>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2118      	movs	r1, #24
 8005a9c:	0a1b      	lsrs	r3, r3, #8
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f88d 300c 	strb.w	r3, [sp, #12]
 8005aa4:	f7ff fed2 	bl	800584c <WIZCHIP_READ>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	211a      	movs	r1, #26
 8005aac:	4620      	mov	r0, r4
 8005aae:	f88d 300d 	strb.w	r3, [sp, #13]
 8005ab2:	f7ff fecb 	bl	800584c <WIZCHIP_READ>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	211a      	movs	r1, #26
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	4620      	mov	r0, r4
 8005abe:	f88d 300e 	strb.w	r3, [sp, #14]
 8005ac2:	f7ff fec3 	bl	800584c <WIZCHIP_READ>
 8005ac6:	f88d 000f 	strb.w	r0, [sp, #15]
      if(taddr == 0)
 8005aca:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005ace:	f1bb 0f00 	cmp.w	fp, #0
 8005ad2:	d053      	beq.n	8005b7c <sendto+0x208>
      else taddr = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	461e      	mov	r6, r3
 8005ad8:	4699      	mov	r9, r3
 8005ada:	469a      	mov	sl, r3
 8005adc:	469b      	mov	fp, r3
 8005ade:	9303      	str	r3, [sp, #12]
 8005ae0:	9301      	str	r3, [sp, #4]
   setSn_TX_WRSR(ChipAddr, sn, len);
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f107 0120 	add.w	r1, r7, #32
 8005aea:	f7ff feab 	bl	8005844 <WIZCHIP_WRITE>
	setSn_CR(ChipAddr, sn,Sn_CR_SEND);
 8005aee:	f107 0802 	add.w	r8, r7, #2
   setSn_TX_WRSR(ChipAddr, sn, len);
 8005af2:	462a      	mov	r2, r5
 8005af4:	4620      	mov	r0, r4
 8005af6:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8005afa:	f7ff fea3 	bl	8005844 <WIZCHIP_WRITE>
	setSn_CR(ChipAddr, sn,Sn_CR_SEND);
 8005afe:	2220      	movs	r2, #32
 8005b00:	4641      	mov	r1, r8
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7ff fe9e 	bl	8005844 <WIZCHIP_WRITE>
	while(getSn_CR(ChipAddr, sn));
 8005b08:	4641      	mov	r1, r8
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f7ff fe9e 	bl	800584c <WIZCHIP_READ>
 8005b10:	b2c0      	uxtb	r0, r0
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d1f8      	bne.n	8005b08 <sendto+0x194>
      tmp = getSn_IR(ChipAddr, sn);
 8005b16:	3706      	adds	r7, #6
 8005b18:	e001      	b.n	8005b1e <sendto+0x1aa>
      else if(tmp & Sn_IR_TIMEOUT)
 8005b1a:	071b      	lsls	r3, r3, #28
 8005b1c:	d474      	bmi.n	8005c08 <sendto+0x294>
      tmp = getSn_IR(ChipAddr, sn);
 8005b1e:	4639      	mov	r1, r7
 8005b20:	4620      	mov	r0, r4
 8005b22:	f7ff fe93 	bl	800584c <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8005b26:	06c2      	lsls	r2, r0, #27
      tmp = getSn_IR(ChipAddr, sn);
 8005b28:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 8005b2a:	d5f6      	bpl.n	8005b1a <sendto+0x1a6>
         setSn_IR(ChipAddr, sn, Sn_IR_SENDOK);
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	2210      	movs	r2, #16
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7ff fe87 	bl	8005844 <WIZCHIP_WRITE>
      if(taddr) setSUBR(ChipAddr, (uint8_t*)&taddr);
 8005b36:	f1bb 0f00 	cmp.w	fp, #0
 8005b3a:	d150      	bne.n	8005bde <sendto+0x26a>
   return (int32_t)len;
 8005b3c:	4628      	mov	r0, r5
}
 8005b3e:	b005      	add	sp, #20
 8005b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 8005b44:	455d      	cmp	r5, fp
 8005b46:	d887      	bhi.n	8005a58 <sendto+0xe4>
 8005b48:	e79c      	b.n	8005a84 <sendto+0x110>
   if((port  == 0) && ((getSn_MR(ChipAddr, sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7ff fe7d 	bl	800584c <WIZCHIP_READ>
 8005b52:	0741      	lsls	r1, r0, #29
 8005b54:	f53f af41 	bmi.w	80059da <sendto+0x66>
 8005b58:	f06f 000a 	mvn.w	r0, #10
 8005b5c:	e74c      	b.n	80059f8 <sendto+0x84>
   if((taddr == 0) && ((getSn_MR(ChipAddr, sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005b5e:	4639      	mov	r1, r7
 8005b60:	4620      	mov	r0, r4
 8005b62:	f7ff fe73 	bl	800584c <WIZCHIP_READ>
 8005b66:	0740      	lsls	r0, r0, #29
 8005b68:	f53f af33 	bmi.w	80059d2 <sendto+0x5e>
 8005b6c:	f06f 000b 	mvn.w	r0, #11
 8005b70:	e742      	b.n	80059f8 <sendto+0x84>
      if(getSn_SR(ChipAddr, sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005b72:	f06f 0003 	mvn.w	r0, #3
}
 8005b76:	b005      	add	sp, #20
 8005b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         getSUBR(ChipAddr, (uint8_t*)&taddr);
 8005b7c:	2114      	movs	r1, #20
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f7ff fe64 	bl	800584c <WIZCHIP_READ>
 8005b84:	4682      	mov	sl, r0
 8005b86:	2114      	movs	r1, #20
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f3ca 2a0f 	ubfx	sl, sl, #8, #16
 8005b8e:	f88d a00c 	strb.w	sl, [sp, #12]
 8005b92:	f7ff fe5b 	bl	800584c <WIZCHIP_READ>
 8005b96:	4680      	mov	r8, r0
 8005b98:	2116      	movs	r1, #22
 8005b9a:	fa5f f388 	uxtb.w	r3, r8
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	f88d 300d 	strb.w	r3, [sp, #13]
 8005ba6:	f7ff fe51 	bl	800584c <WIZCHIP_READ>
 8005baa:	4681      	mov	r9, r0
 8005bac:	2116      	movs	r1, #22
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f3c9 290f 	ubfx	r9, r9, #8, #16
 8005bb4:	f88d 900e 	strb.w	r9, [sp, #14]
 8005bb8:	f7ff fe48 	bl	800584c <WIZCHIP_READ>
 8005bbc:	4606      	mov	r6, r0
         setSUBR(ChipAddr, (uint8_t*)"\x00\x00\x00\x00");
 8005bbe:	465a      	mov	r2, fp
 8005bc0:	2114      	movs	r1, #20
 8005bc2:	4620      	mov	r0, r4
         getSUBR(ChipAddr, (uint8_t*)&taddr);
 8005bc4:	b2f6      	uxtb	r6, r6
 8005bc6:	f88d 600f 	strb.w	r6, [sp, #15]
         setSUBR(ChipAddr, (uint8_t*)"\x00\x00\x00\x00");
 8005bca:	f7ff fe3b 	bl	8005844 <WIZCHIP_WRITE>
 8005bce:	465a      	mov	r2, fp
 8005bd0:	2116      	movs	r1, #22
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff fe36 	bl	8005844 <WIZCHIP_WRITE>
      if(taddr) setSUBR(ChipAddr, (uint8_t*)&taddr);
 8005bd8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005bdc:	e781      	b.n	8005ae2 <sendto+0x16e>
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	2114      	movs	r1, #20
 8005be2:	eb03 220a 	add.w	r2, r3, sl, lsl #8
 8005be6:	4620      	mov	r0, r4
 8005be8:	b292      	uxth	r2, r2
 8005bea:	f7ff fe2b 	bl	8005844 <WIZCHIP_WRITE>
 8005bee:	eb06 2209 	add.w	r2, r6, r9, lsl #8
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	2116      	movs	r1, #22
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	f7ff fe24 	bl	8005844 <WIZCHIP_WRITE>
   return (int32_t)len;
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	e79e      	b.n	8005b3e <sendto+0x1ca>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005c00:	2000      	movs	r0, #0
}
 8005c02:	b005      	add	sp, #20
 8005c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(ChipAddr, sn, Sn_IR_TIMEOUT);
 8005c08:	4639      	mov	r1, r7
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f7ff fe19 	bl	8005844 <WIZCHIP_WRITE>
            if(taddr) setSUBR(ChipAddr, (uint8_t*)&taddr);
 8005c12:	f1bb 0f00 	cmp.w	fp, #0
 8005c16:	d104      	bne.n	8005c22 <sendto+0x2ae>
         return SOCKERR_TIMEOUT;
 8005c18:	f06f 000c 	mvn.w	r0, #12
}
 8005c1c:	b005      	add	sp, #20
 8005c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(taddr) setSUBR(ChipAddr, (uint8_t*)&taddr);
 8005c22:	9b01      	ldr	r3, [sp, #4]
 8005c24:	2114      	movs	r1, #20
 8005c26:	eb03 220a 	add.w	r2, r3, sl, lsl #8
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	b292      	uxth	r2, r2
 8005c2e:	f7ff fe09 	bl	8005844 <WIZCHIP_WRITE>
 8005c32:	eb06 2209 	add.w	r2, r6, r9, lsl #8
 8005c36:	4620      	mov	r0, r4
 8005c38:	2116      	movs	r1, #22
 8005c3a:	b292      	uxth	r2, r2
 8005c3c:	f7ff fe02 	bl	8005844 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8005c40:	f06f 000c 	mvn.w	r0, #12
 8005c44:	e6d8      	b.n	80059f8 <sendto+0x84>
   CHECK_SOCKNUM();
 8005c46:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4a:	e6d5      	b.n	80059f8 <sendto+0x84>
         return SOCKERR_SOCKMODE;
 8005c4c:	f06f 0004 	mvn.w	r0, #4
 8005c50:	e6d2      	b.n	80059f8 <sendto+0x84>
   CHECK_SOCKDATA();
 8005c52:	f06f 000d 	mvn.w	r0, #13
 8005c56:	e6cf      	b.n	80059f8 <sendto+0x84>
 8005c58:	20001308 	.word	0x20001308

08005c5c <close.part.0>:
int8_t close(uint32_t ChipAddr, uint8_t sn)
 8005c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   if( ((getSn_MR(ChipAddr, sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(ChipAddr, sn) != getSn_TxMAX(ChipAddr, sn)) )
 8005c60:	f101 0908 	add.w	r9, r1, #8
 8005c64:	ea4f 1989 	mov.w	r9, r9, lsl #6
int8_t close(uint32_t ChipAddr, uint8_t sn)
 8005c68:	4688      	mov	r8, r1
 8005c6a:	b085      	sub	sp, #20
   if( ((getSn_MR(ChipAddr, sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(ChipAddr, sn) != getSn_TxMAX(ChipAddr, sn)) )
 8005c6c:	4649      	mov	r1, r9
int8_t close(uint32_t ChipAddr, uint8_t sn)
 8005c6e:	4605      	mov	r5, r0
   if( ((getSn_MR(ChipAddr, sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(ChipAddr, sn) != getSn_TxMAX(ChipAddr, sn)) )
 8005c70:	f7ff fdec 	bl	800584c <WIZCHIP_READ>
 8005c74:	f000 040f 	and.w	r4, r0, #15
 8005c78:	2c01      	cmp	r4, #1
 8005c7a:	d036      	beq.n	8005cea <close.part.0+0x8e>
      setSn_CR(ChipAddr,sn, Sn_CR_OPEN);
 8005c7c:	f109 0602 	add.w	r6, r9, #2
      while(getSn_SR(ChipAddr, sn) != SOCK_UDP);
 8005c80:	f109 0708 	add.w	r7, r9, #8
	setSn_CR(ChipAddr, sn,Sn_CR_CLOSE);
 8005c84:	2210      	movs	r2, #16
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f7ff fddb 	bl	8005844 <WIZCHIP_WRITE>
	while( getSn_CR(ChipAddr, sn) );
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	f7ff fddb 	bl	800584c <WIZCHIP_READ>
 8005c96:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8005c9a:	d1f8      	bne.n	8005c8e <close.part.0+0x32>
	setSn_IR(ChipAddr, sn, 0xFF);
 8005c9c:	22ff      	movs	r2, #255	; 0xff
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f109 0106 	add.w	r1, r9, #6
 8005ca4:	f7ff fdce 	bl	8005844 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 8005ca8:	2201      	movs	r2, #1
	sock_remained_size[sn] = 0;
 8005caa:	4b2e      	ldr	r3, [pc, #184]	; (8005d64 <close.part.0+0x108>)
	sock_io_mode &= ~(1<<sn);
 8005cac:	4e2e      	ldr	r6, [pc, #184]	; (8005d68 <close.part.0+0x10c>)
	sock_remained_size[sn] = 0;
 8005cae:	f823 4018 	strh.w	r4, [r3, r8, lsl #1]
	sock_pack_info[sn] = 0;
 8005cb2:	4b2e      	ldr	r3, [pc, #184]	; (8005d6c <close.part.0+0x110>)
	sock_is_sending &= ~(1<<sn);
 8005cb4:	482e      	ldr	r0, [pc, #184]	; (8005d70 <close.part.0+0x114>)
	sock_pack_info[sn] = 0;
 8005cb6:	f803 4008 	strb.w	r4, [r3, r8]
	sock_io_mode &= ~(1<<sn);
 8005cba:	fa02 f308 	lsl.w	r3, r2, r8
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	8831      	ldrh	r1, [r6, #0]
	sock_is_sending &= ~(1<<sn);
 8005cc2:	f8b0 c000 	ldrh.w	ip, [r0]
	sock_io_mode &= ~(1<<sn);
 8005cc6:	b21b      	sxth	r3, r3
 8005cc8:	ea03 0201 	and.w	r2, r3, r1
	sock_is_sending &= ~(1<<sn);
 8005ccc:	ea03 030c 	and.w	r3, r3, ip
	sock_io_mode &= ~(1<<sn);
 8005cd0:	8032      	strh	r2, [r6, #0]
	sock_is_sending &= ~(1<<sn);
 8005cd2:	8003      	strh	r3, [r0, #0]
	while(getSn_SR(ChipAddr, sn) != SOCK_CLOSED);
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f7ff fdb8 	bl	800584c <WIZCHIP_READ>
 8005cdc:	b2c0      	uxtb	r0, r0
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d1f8      	bne.n	8005cd4 <close.part.0+0x78>
}
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	b005      	add	sp, #20
 8005ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   if( ((getSn_MR(ChipAddr, sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(ChipAddr, sn) != getSn_TxMAX(ChipAddr, sn)) )
 8005cea:	4641      	mov	r1, r8
 8005cec:	4628      	mov	r0, r5
 8005cee:	f7ff fdcd 	bl	800588c <getSn_TX_FSR>
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f7ff fdac 	bl	8005854 <getTMSR>
 8005cfc:	ebb6 2f80 	cmp.w	r6, r0, lsl #10
 8005d00:	d0bc      	beq.n	8005c7c <close.part.0+0x20>
      uint8_t destip[4] = {0, 0, 0, 1};
 8005d02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      setSn_MR(ChipAddr, sn, Sn_MR_UDP);
 8005d06:	2202      	movs	r2, #2
 8005d08:	4649      	mov	r1, r9
 8005d0a:	4628      	mov	r0, r5
      setSn_CR(ChipAddr,sn, Sn_CR_OPEN);
 8005d0c:	eb09 0602 	add.w	r6, r9, r2
      uint8_t destip[4] = {0, 0, 0, 1};
 8005d10:	9303      	str	r3, [sp, #12]
      setSn_MR(ChipAddr, sn, Sn_MR_UDP);
 8005d12:	f7ff fd97 	bl	8005844 <WIZCHIP_WRITE>
      setSn_PORTR(ChipAddr, sn, 0x3000);
 8005d16:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f109 010a 	add.w	r1, r9, #10
 8005d20:	f7ff fd90 	bl	8005844 <WIZCHIP_WRITE>
      setSn_CR(ChipAddr,sn, Sn_CR_OPEN);
 8005d24:	4622      	mov	r2, r4
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f7ff fd8b 	bl	8005844 <WIZCHIP_WRITE>
      while(getSn_CR(ChipAddr, sn) != 0);
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	f7ff fd8b 	bl	800584c <WIZCHIP_READ>
 8005d36:	b2c0      	uxtb	r0, r0
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d1f8      	bne.n	8005d2e <close.part.0+0xd2>
      while(getSn_SR(ChipAddr, sn) != SOCK_UDP);
 8005d3c:	f109 0708 	add.w	r7, r9, #8
 8005d40:	4639      	mov	r1, r7
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff fd82 	bl	800584c <WIZCHIP_READ>
 8005d48:	b2c0      	uxtb	r0, r0
 8005d4a:	2822      	cmp	r0, #34	; 0x22
 8005d4c:	d1f8      	bne.n	8005d40 <close.part.0+0xe4>
      sendto(ChipAddr, sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8005d4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005d52:	aa03      	add	r2, sp, #12
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	4641      	mov	r1, r8
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	9200      	str	r2, [sp, #0]
 8005d5e:	f7ff fe09 	bl	8005974 <sendto>
 8005d62:	e78f      	b.n	8005c84 <close.part.0+0x28>
 8005d64:	2000131c 	.word	0x2000131c
 8005d68:	20001308 	.word	0x20001308
 8005d6c:	2000130c 	.word	0x2000130c
 8005d70:	2000130a 	.word	0x2000130a

08005d74 <close>:
	CHECK_SOCKNUM();
 8005d74:	2908      	cmp	r1, #8
 8005d76:	d902      	bls.n	8005d7e <close+0xa>
}
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	4770      	bx	lr
 8005d7e:	f7ff bf6d 	b.w	8005c5c <close.part.0>
 8005d82:	bf00      	nop

08005d84 <socket>:
{
 8005d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	CHECK_SOCKNUM();
 8005d88:	2908      	cmp	r1, #8
{
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	CHECK_SOCKNUM();
 8005d90:	f200 80ac 	bhi.w	8005eec <socket+0x168>
	switch(protocol)
 8005d94:	2a01      	cmp	r2, #1
 8005d96:	460e      	mov	r6, r1
 8005d98:	4604      	mov	r4, r0
 8005d9a:	4617      	mov	r7, r2
 8005d9c:	4699      	mov	r9, r3
 8005d9e:	d077      	beq.n	8005e90 <socket+0x10c>
 8005da0:	1e93      	subs	r3, r2, #2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	f200 8096 	bhi.w	8005ed4 <socket+0x150>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8005da8:	0769      	lsls	r1, r5, #29
 8005daa:	f100 809c 	bmi.w	8005ee6 <socket+0x162>
	if(flag != 0)
 8005dae:	b14d      	cbz	r5, 8005dc4 <socket+0x40>
   	switch(protocol)
 8005db0:	2f01      	cmp	r7, #1
 8005db2:	f000 8094 	beq.w	8005ede <socket+0x15a>
 8005db6:	2f02      	cmp	r7, #2
 8005db8:	d104      	bne.n	8005dc4 <socket+0x40>
   	      if(flag & SF_IGMP_VER2)
 8005dba:	06aa      	lsls	r2, r5, #26
 8005dbc:	d502      	bpl.n	8005dc4 <socket+0x40>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005dbe:	062b      	lsls	r3, r5, #24
 8005dc0:	f140 8091 	bpl.w	8005ee6 <socket+0x162>
	CHECK_SOCKNUM();
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff ff48 	bl	8005c5c <close.part.0>
	   setSn_MR(ChipAddr, sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8005dcc:	f025 020f 	bic.w	r2, r5, #15
 8005dd0:	4317      	orrs	r7, r2
 8005dd2:	f106 0808 	add.w	r8, r6, #8
 8005dd6:	01ea      	lsls	r2, r5, #7
 8005dd8:	ea4f 1888 	mov.w	r8, r8, lsl #6
 8005ddc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8005de0:	4641      	mov	r1, r8
 8005de2:	4620      	mov	r0, r4
 8005de4:	433a      	orrs	r2, r7
 8005de6:	f7ff fd2d 	bl	8005844 <WIZCHIP_WRITE>
	if(!port)
 8005dea:	f1b9 0f00 	cmp.w	r9, #0
 8005dee:	d03e      	beq.n	8005e6e <socket+0xea>
   setSn_PORT(ChipAddr, sn,port);	
 8005df0:	464a      	mov	r2, r9
 8005df2:	4620      	mov	r0, r4
 8005df4:	f108 010a 	add.w	r1, r8, #10
   setSn_CR(ChipAddr, sn,Sn_CR_OPEN);
 8005df8:	f108 0702 	add.w	r7, r8, #2
   setSn_PORT(ChipAddr, sn,port);	
 8005dfc:	f7ff fd22 	bl	8005844 <WIZCHIP_WRITE>
   setSn_CR(ChipAddr, sn,Sn_CR_OPEN);
 8005e00:	2201      	movs	r2, #1
 8005e02:	4639      	mov	r1, r7
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7ff fd1d 	bl	8005844 <WIZCHIP_WRITE>
   while(getSn_CR(ChipAddr, sn));
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f7ff fd1d 	bl	800584c <WIZCHIP_READ>
 8005e12:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 8005e16:	d1f8      	bne.n	8005e0a <socket+0x86>
   sock_io_mode &= ~(1 <<sn);
 8005e18:	2201      	movs	r2, #1
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005e1a:	f005 0501 	and.w	r5, r5, #1
 8005e1e:	fa05 f106 	lsl.w	r1, r5, r6
   while(getSn_SR(ChipAddr, sn) == SOCK_CLOSED);
 8005e22:	f108 0508 	add.w	r5, r8, #8
   sock_remained_size[sn] = 0;
 8005e26:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8005f00 <socket+0x17c>
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005e2a:	4f32      	ldr	r7, [pc, #200]	; (8005ef4 <socket+0x170>)
   sock_remained_size[sn] = 0;
 8005e2c:	f828 3016 	strh.w	r3, [r8, r6, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 8005e30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f04 <socket+0x180>
   sock_is_sending &= ~(1<<sn);
 8005e34:	4830      	ldr	r0, [pc, #192]	; (8005ef8 <socket+0x174>)
   sock_pack_info[sn] = PACK_COMPLETED;
 8005e36:	f808 3006 	strb.w	r3, [r8, r6]
   sock_io_mode &= ~(1 <<sn);
 8005e3a:	fa02 f306 	lsl.w	r3, r2, r6
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	f8b7 e000 	ldrh.w	lr, [r7]
   sock_is_sending &= ~(1<<sn);
 8005e44:	f8b0 c000 	ldrh.w	ip, [r0]
   sock_io_mode &= ~(1 <<sn);
 8005e48:	b21b      	sxth	r3, r3
 8005e4a:	ea03 020e 	and.w	r2, r3, lr
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005e4e:	4311      	orrs	r1, r2
   sock_is_sending &= ~(1<<sn);
 8005e50:	ea03 030c 	and.w	r3, r3, ip
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005e54:	8039      	strh	r1, [r7, #0]
   sock_is_sending &= ~(1<<sn);
 8005e56:	8003      	strh	r3, [r0, #0]
   while(getSn_SR(ChipAddr, sn) == SOCK_CLOSED);
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f7ff fcf6 	bl	800584c <WIZCHIP_READ>
 8005e60:	b2c0      	uxtb	r0, r0
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d0f8      	beq.n	8005e58 <socket+0xd4>
   return (int8_t)sn;
 8005e66:	b270      	sxtb	r0, r6
}	   
 8005e68:	b003      	add	sp, #12
 8005e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005e6e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
	   port = sock_any_port++;
 8005e72:	4a22      	ldr	r2, [pc, #136]	; (8005efc <socket+0x178>)
 8005e74:	f8b2 9000 	ldrh.w	r9, [r2]
 8005e78:	f109 0301 	add.w	r3, r9, #1
 8005e7c:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005e7e:	428b      	cmp	r3, r1
 8005e80:	bf05      	ittet	eq
 8005e82:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 8005e86:	f64f 79ef 	movweq	r9, #65519	; 0xffef
 8005e8a:	8013      	strhne	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005e8c:	8013      	strheq	r3, [r2, #0]
 8005e8e:	e7af      	b.n	8005df0 <socket+0x6c>
            getSIPR(ChipAddr, (uint8_t*)&taddr);
 8005e90:	2118      	movs	r1, #24
 8005e92:	f7ff fcdb 	bl	800584c <WIZCHIP_READ>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2118      	movs	r1, #24
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f88d 3004 	strb.w	r3, [sp, #4]
 8005ea2:	f7ff fcd3 	bl	800584c <WIZCHIP_READ>
 8005ea6:	211a      	movs	r1, #26
 8005ea8:	f88d 0005 	strb.w	r0, [sp, #5]
 8005eac:	4620      	mov	r0, r4
 8005eae:	f7ff fccd 	bl	800584c <WIZCHIP_READ>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	211a      	movs	r1, #26
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f88d 3006 	strb.w	r3, [sp, #6]
 8005ebe:	f7ff fcc5 	bl	800584c <WIZCHIP_READ>
 8005ec2:	f88d 0007 	strb.w	r0, [sp, #7]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	f06f 0002 	mvn.w	r0, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f47f af6b 	bne.w	8005da8 <socket+0x24>
 8005ed2:	e7c9      	b.n	8005e68 <socket+0xe4>
	switch(protocol)
 8005ed4:	f06f 0004 	mvn.w	r0, #4
}	   
 8005ed8:	b003      	add	sp, #12
 8005eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8005ede:	f015 0f23 	tst.w	r5, #35	; 0x23
 8005ee2:	f47f af6f 	bne.w	8005dc4 <socket+0x40>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8005ee6:	f06f 0005 	mvn.w	r0, #5
 8005eea:	e7bd      	b.n	8005e68 <socket+0xe4>
	CHECK_SOCKNUM();
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	e7ba      	b.n	8005e68 <socket+0xe4>
 8005ef2:	bf00      	nop
 8005ef4:	20001308 	.word	0x20001308
 8005ef8:	2000130a 	.word	0x2000130a
 8005efc:	2000004c 	.word	0x2000004c
 8005f00:	2000131c 	.word	0x2000131c
 8005f04:	2000130c 	.word	0x2000130c

08005f08 <listen>:
	CHECK_SOCKNUM();
 8005f08:	2908      	cmp	r1, #8
 8005f0a:	d832      	bhi.n	8005f72 <listen+0x6a>
{
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 8005f0e:	f101 0408 	add.w	r4, r1, #8
 8005f12:	b2e4      	uxtb	r4, r4
 8005f14:	01a4      	lsls	r4, r4, #6
 8005f16:	460e      	mov	r6, r1
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	f7ff fc96 	bl	800584c <WIZCHIP_READ>
 8005f20:	f000 000f 	and.w	r0, r0, #15
 8005f24:	2801      	cmp	r0, #1
 8005f26:	d11e      	bne.n	8005f66 <listen+0x5e>
	CHECK_SOCKINIT(ChipAddr);
 8005f28:	f104 0708 	add.w	r7, r4, #8
 8005f2c:	4639      	mov	r1, r7
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f7ff fc8c 	bl	800584c <WIZCHIP_READ>
 8005f34:	b2c0      	uxtb	r0, r0
 8005f36:	2813      	cmp	r0, #19
 8005f38:	d118      	bne.n	8005f6c <listen+0x64>
	setSn_CR(ChipAddr, sn,Sn_CR_LISTEN);
 8005f3a:	3402      	adds	r4, #2
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	4621      	mov	r1, r4
 8005f40:	4628      	mov	r0, r5
 8005f42:	f7ff fc7f 	bl	8005844 <WIZCHIP_WRITE>
	while(getSn_CR(ChipAddr, sn));
 8005f46:	4621      	mov	r1, r4
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f7ff fc7f 	bl	800584c <WIZCHIP_READ>
 8005f4e:	b2c0      	uxtb	r0, r0
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d1f8      	bne.n	8005f46 <listen+0x3e>
   while(getSn_SR(ChipAddr, sn) != SOCK_LISTEN)
 8005f54:	4639      	mov	r1, r7
 8005f56:	4628      	mov	r0, r5
 8005f58:	f7ff fc78 	bl	800584c <WIZCHIP_READ>
 8005f5c:	b2c0      	uxtb	r0, r0
 8005f5e:	2814      	cmp	r0, #20
 8005f60:	d10a      	bne.n	8005f78 <listen+0x70>
   return SOCK_OK;
 8005f62:	2001      	movs	r0, #1
}
 8005f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 8005f66:	f06f 0004 	mvn.w	r0, #4
}
 8005f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKINIT(ChipAddr);
 8005f6c:	f06f 0002 	mvn.w	r0, #2
}
 8005f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005f76:	4770      	bx	lr
	CHECK_SOCKNUM();
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f7ff fe6e 	bl	8005c5c <close.part.0>
         return SOCKERR_SOCKCLOSED;
 8005f80:	f06f 0003 	mvn.w	r0, #3
}
 8005f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f86:	bf00      	nop

08005f88 <disconnect>:
   CHECK_SOCKNUM();
 8005f88:	2908      	cmp	r1, #8
 8005f8a:	d845      	bhi.n	8006018 <disconnect+0x90>
{
 8005f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 8005f90:	f101 0508 	add.w	r5, r1, #8
 8005f94:	01af      	lsls	r7, r5, #6
 8005f96:	460e      	mov	r6, r1
 8005f98:	4639      	mov	r1, r7
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	f7ff fc56 	bl	800584c <WIZCHIP_READ>
 8005fa0:	f000 000f 	and.w	r0, r0, #15
 8005fa4:	2801      	cmp	r0, #1
 8005fa6:	d134      	bne.n	8006012 <disconnect+0x8a>
	setSn_CR(ChipAddr, sn,Sn_CR_DISCON);
 8005fa8:	1cbd      	adds	r5, r7, #2
 8005faa:	2208      	movs	r2, #8
 8005fac:	4629      	mov	r1, r5
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f7ff fc48 	bl	8005844 <WIZCHIP_WRITE>
	while(getSn_CR(ChipAddr, sn));
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7ff fc48 	bl	800584c <WIZCHIP_READ>
 8005fbc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8005fc0:	d1f8      	bne.n	8005fb4 <disconnect+0x2c>
	sock_is_sending &= ~(1<<sn);
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4d16      	ldr	r5, [pc, #88]	; (8006020 <disconnect+0x98>)
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005fc6:	4b17      	ldr	r3, [pc, #92]	; (8006024 <disconnect+0x9c>)
	sock_is_sending &= ~(1<<sn);
 8005fc8:	882a      	ldrh	r2, [r5, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005fca:	881b      	ldrh	r3, [r3, #0]
	sock_is_sending &= ~(1<<sn);
 8005fcc:	40b1      	lsls	r1, r6
 8005fce:	ea22 0201 	bic.w	r2, r2, r1
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005fd2:	4133      	asrs	r3, r6
	sock_is_sending &= ~(1<<sn);
 8005fd4:	802a      	strh	r2, [r5, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005fd6:	07da      	lsls	r2, r3, #31
 8005fd8:	d411      	bmi.n	8005ffe <disconnect+0x76>
	while(getSn_SR(ChipAddr, sn) != SOCK_CLOSED)
 8005fda:	f107 0808 	add.w	r8, r7, #8
	   if(getSn_IR(ChipAddr, sn) & Sn_IR_TIMEOUT)
 8005fde:	3706      	adds	r7, #6
 8005fe0:	e005      	b.n	8005fee <disconnect+0x66>
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f7ff fc31 	bl	800584c <WIZCHIP_READ>
 8005fea:	0703      	lsls	r3, r0, #28
 8005fec:	d409      	bmi.n	8006002 <disconnect+0x7a>
	while(getSn_SR(ChipAddr, sn) != SOCK_CLOSED)
 8005fee:	4641      	mov	r1, r8
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f7ff fc2b 	bl	800584c <WIZCHIP_READ>
 8005ff6:	b2c0      	uxtb	r0, r0
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d1f2      	bne.n	8005fe2 <disconnect+0x5a>
	return SOCK_OK;
 8005ffc:	2001      	movs	r0, #1
}
 8005ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECK_SOCKNUM();
 8006002:	4631      	mov	r1, r6
 8006004:	4620      	mov	r0, r4
 8006006:	f7ff fe29 	bl	8005c5c <close.part.0>
	      return SOCKERR_TIMEOUT;
 800600a:	f06f 000c 	mvn.w	r0, #12
}
 800600e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 8006012:	f06f 0004 	mvn.w	r0, #4
 8006016:	e7f2      	b.n	8005ffe <disconnect+0x76>
   CHECK_SOCKNUM();
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	2000130a 	.word	0x2000130a
 8006024:	20001308 	.word	0x20001308

08006028 <send>:
{
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   CHECK_SOCKNUM();
 800602c:	2908      	cmp	r1, #8
{
 800602e:	b083      	sub	sp, #12
 8006030:	9200      	str	r2, [sp, #0]
   CHECK_SOCKNUM();
 8006032:	f200 8097 	bhi.w	8006164 <send+0x13c>
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 8006036:	f101 0908 	add.w	r9, r1, #8
 800603a:	ea4f 1989 	mov.w	r9, r9, lsl #6
 800603e:	460e      	mov	r6, r1
 8006040:	4649      	mov	r1, r9
 8006042:	4604      	mov	r4, r0
 8006044:	461d      	mov	r5, r3
 8006046:	f7ff fc01 	bl	800584c <WIZCHIP_READ>
 800604a:	f000 000f 	and.w	r0, r0, #15
 800604e:	2801      	cmp	r0, #1
 8006050:	f040 808e 	bne.w	8006170 <send+0x148>
   CHECK_SOCKDATA();
 8006054:	2d00      	cmp	r5, #0
 8006056:	f000 8088 	beq.w	800616a <send+0x142>
   tmp = getSn_SR(ChipAddr, sn);
 800605a:	f109 0808 	add.w	r8, r9, #8
 800605e:	4641      	mov	r1, r8
 8006060:	4620      	mov	r0, r4
 8006062:	f7ff fbf3 	bl	800584c <WIZCHIP_READ>
 8006066:	b2c0      	uxtb	r0, r0
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8006068:	2817      	cmp	r0, #23
 800606a:	d002      	beq.n	8006072 <send+0x4a>
 800606c:	281c      	cmp	r0, #28
 800606e:	f040 8082 	bne.w	8006176 <send+0x14e>
   if( sock_is_sending & (1<<sn) )
 8006072:	4b46      	ldr	r3, [pc, #280]	; (800618c <send+0x164>)
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	4133      	asrs	r3, r6
 8006078:	07da      	lsls	r2, r3, #31
 800607a:	d44a      	bmi.n	8006112 <send+0xea>
         sock_is_sending &= ~(1<<sn);         
 800607c:	2701      	movs	r7, #1
 800607e:	40b7      	lsls	r7, r6
   freesize = getSn_TxMAX(ChipAddr, sn);
 8006080:	4631      	mov	r1, r6
 8006082:	4620      	mov	r0, r4
 8006084:	f7ff fbe6 	bl	8005854 <getTMSR>
 8006088:	0280      	lsls	r0, r0, #10
 800608a:	b280      	uxth	r0, r0
 800608c:	4285      	cmp	r5, r0
 800608e:	bf28      	it	cs
 8006090:	4605      	movcs	r5, r0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8006092:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8006190 <send+0x168>
      freesize = getSn_TX_FSR(ChipAddr, sn);
 8006096:	4631      	mov	r1, r6
 8006098:	4620      	mov	r0, r4
 800609a:	f7ff fbf7 	bl	800588c <getSn_TX_FSR>
      tmp = getSn_SR(ChipAddr, sn);
 800609e:	4641      	mov	r1, r8
      freesize = getSn_TX_FSR(ChipAddr, sn);
 80060a0:	4683      	mov	fp, r0
      tmp = getSn_SR(ChipAddr, sn);
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7ff fbd2 	bl	800584c <WIZCHIP_READ>
 80060a8:	b2c3      	uxtb	r3, r0
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80060aa:	2b17      	cmp	r3, #23
      freesize = getSn_TX_FSR(ChipAddr, sn);
 80060ac:	fa1f fb8b 	uxth.w	fp, fp
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80060b0:	d001      	beq.n	80060b6 <send+0x8e>
 80060b2:	2b1c      	cmp	r3, #28
 80060b4:	d141      	bne.n	800613a <send+0x112>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80060b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80060ba:	423b      	tst	r3, r7
 80060bc:	d03a      	beq.n	8006134 <send+0x10c>
 80060be:	455d      	cmp	r5, fp
 80060c0:	d834      	bhi.n	800612c <send+0x104>
   wiz_send_data(ChipAddr, sn, buf, len);
 80060c2:	462b      	mov	r3, r5
 80060c4:	4631      	mov	r1, r6
 80060c6:	4620      	mov	r0, r4
 80060c8:	9a00      	ldr	r2, [sp, #0]
 80060ca:	f7ff fc17 	bl	80058fc <wiz_send_data>
      setSn_TX_WRSR(ChipAddr, sn,len);
 80060ce:	f109 0120 	add.w	r1, r9, #32
 80060d2:	4620      	mov	r0, r4
 80060d4:	2200      	movs	r2, #0
 80060d6:	f7ff fbb5 	bl	8005844 <WIZCHIP_WRITE>
 80060da:	f109 0122 	add.w	r1, r9, #34	; 0x22
 80060de:	462a      	mov	r2, r5
 80060e0:	4620      	mov	r0, r4
   setSn_CR(ChipAddr, sn,Sn_CR_SEND);
 80060e2:	f109 0902 	add.w	r9, r9, #2
      setSn_TX_WRSR(ChipAddr, sn,len);
 80060e6:	f7ff fbad 	bl	8005844 <WIZCHIP_WRITE>
   setSn_CR(ChipAddr, sn,Sn_CR_SEND);
 80060ea:	2220      	movs	r2, #32
 80060ec:	4649      	mov	r1, r9
 80060ee:	4620      	mov	r0, r4
 80060f0:	f7ff fba8 	bl	8005844 <WIZCHIP_WRITE>
   while(getSn_CR(ChipAddr, sn));
 80060f4:	4649      	mov	r1, r9
 80060f6:	4620      	mov	r0, r4
 80060f8:	f7ff fba8 	bl	800584c <WIZCHIP_READ>
 80060fc:	b2c0      	uxtb	r0, r0
 80060fe:	2800      	cmp	r0, #0
 8006100:	d1f8      	bne.n	80060f4 <send+0xcc>
   return (int32_t)len;
 8006102:	4628      	mov	r0, r5
   sock_is_sending |= (1 << sn);
 8006104:	4a21      	ldr	r2, [pc, #132]	; (800618c <send+0x164>)
 8006106:	8813      	ldrh	r3, [r2, #0]
 8006108:	431f      	orrs	r7, r3
 800610a:	8017      	strh	r7, [r2, #0]
}
 800610c:	b003      	add	sp, #12
 800610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp = getSn_IR(ChipAddr, sn);
 8006112:	f109 0106 	add.w	r1, r9, #6
 8006116:	4620      	mov	r0, r4
 8006118:	9101      	str	r1, [sp, #4]
 800611a:	f7ff fb97 	bl	800584c <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 800611e:	f010 0f10 	tst.w	r0, #16
 8006122:	9901      	ldr	r1, [sp, #4]
      tmp = getSn_IR(ChipAddr, sn);
 8006124:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 8006126:	d111      	bne.n	800614c <send+0x124>
      else if(tmp & Sn_IR_TIMEOUT)
 8006128:	071b      	lsls	r3, r3, #28
 800612a:	d427      	bmi.n	800617c <send+0x154>
      else return SOCK_BUSY;
 800612c:	2000      	movs	r0, #0
}
 800612e:	b003      	add	sp, #12
 8006130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 8006134:	455d      	cmp	r5, fp
 8006136:	d8ae      	bhi.n	8006096 <send+0x6e>
 8006138:	e7c3      	b.n	80060c2 <send+0x9a>
	CHECK_SOCKNUM();
 800613a:	4631      	mov	r1, r6
 800613c:	4620      	mov	r0, r4
 800613e:	f7ff fd8d 	bl	8005c5c <close.part.0>
         return SOCKERR_SOCKSTATUS;
 8006142:	f06f 0006 	mvn.w	r0, #6
}
 8006146:	b003      	add	sp, #12
 8006148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         sock_is_sending &= ~(1<<sn);         
 800614c:	2701      	movs	r7, #1
         setSn_IR(ChipAddr, sn, Sn_IR_SENDOK);
 800614e:	2210      	movs	r2, #16
 8006150:	4620      	mov	r0, r4
 8006152:	f7ff fb77 	bl	8005844 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 8006156:	4a0d      	ldr	r2, [pc, #52]	; (800618c <send+0x164>)
 8006158:	40b7      	lsls	r7, r6
 800615a:	8813      	ldrh	r3, [r2, #0]
 800615c:	ea23 0307 	bic.w	r3, r3, r7
 8006160:	8013      	strh	r3, [r2, #0]
 8006162:	e78d      	b.n	8006080 <send+0x58>
   CHECK_SOCKNUM();
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	e7e1      	b.n	800612e <send+0x106>
   CHECK_SOCKDATA();
 800616a:	f06f 000d 	mvn.w	r0, #13
 800616e:	e7de      	b.n	800612e <send+0x106>
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 8006170:	f06f 0004 	mvn.w	r0, #4
 8006174:	e7db      	b.n	800612e <send+0x106>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8006176:	f06f 0006 	mvn.w	r0, #6
 800617a:	e7d8      	b.n	800612e <send+0x106>
	CHECK_SOCKNUM();
 800617c:	4631      	mov	r1, r6
 800617e:	4620      	mov	r0, r4
 8006180:	f7ff fd6c 	bl	8005c5c <close.part.0>
         return SOCKERR_TIMEOUT;
 8006184:	f06f 000c 	mvn.w	r0, #12
 8006188:	e7d1      	b.n	800612e <send+0x106>
 800618a:	bf00      	nop
 800618c:	2000130a 	.word	0x2000130a
 8006190:	20001308 	.word	0x20001308

08006194 <recv>:
{
 8006194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   CHECK_SOCKNUM();
 8006198:	2908      	cmp	r1, #8
{
 800619a:	b085      	sub	sp, #20
 800619c:	9201      	str	r2, [sp, #4]
   CHECK_SOCKNUM();
 800619e:	f200 8106 	bhi.w	80063ae <recv+0x21a>
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 80061a2:	f101 0a08 	add.w	sl, r1, #8
 80061a6:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 80061aa:	460d      	mov	r5, r1
 80061ac:	4651      	mov	r1, sl
 80061ae:	4604      	mov	r4, r0
 80061b0:	461f      	mov	r7, r3
 80061b2:	f7ff fb4b 	bl	800584c <WIZCHIP_READ>
 80061b6:	f000 060f 	and.w	r6, r0, #15
 80061ba:	2e01      	cmp	r6, #1
 80061bc:	f040 80fd 	bne.w	80063ba <recv+0x226>
   CHECK_SOCKDATA();
 80061c0:	2f00      	cmp	r7, #0
 80061c2:	f000 80f7 	beq.w	80063b4 <recv+0x220>
   recvsize = getSn_RxMAX(ChipAddr, sn);
 80061c6:	4629      	mov	r1, r5
 80061c8:	4620      	mov	r0, r4
 80061ca:	f7ff fb51 	bl	8005870 <getRMSR>
   if(sock_remained_size[sn] == 0)
 80061ce:	4b7c      	ldr	r3, [pc, #496]	; (80063c0 <recv+0x22c>)
   recvsize = getSn_RxMAX(ChipAddr, sn);
 80061d0:	0280      	lsls	r0, r0, #10
   if(sock_remained_size[sn] == 0)
 80061d2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   recvsize = getSn_RxMAX(ChipAddr, sn);
 80061d6:	b282      	uxth	r2, r0
 80061d8:	9200      	str	r2, [sp, #0]
   if(sock_remained_size[sn] == 0)
 80061da:	bb5b      	cbnz	r3, 8006234 <recv+0xa0>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80061dc:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 80063cc <recv+0x238>
 80061e0:	40ae      	lsls	r6, r5
         tmp = getSn_SR(ChipAddr, sn);
 80061e2:	f10a 0808 	add.w	r8, sl, #8
         recvsize = getSn_RX_RSR(ChipAddr, sn);
 80061e6:	4629      	mov	r1, r5
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7ff fb65 	bl	80058b8 <getSn_RX_RSR>
         tmp = getSn_SR(ChipAddr, sn);
 80061ee:	4641      	mov	r1, r8
         recvsize = getSn_RX_RSR(ChipAddr, sn);
 80061f0:	4683      	mov	fp, r0
         tmp = getSn_SR(ChipAddr, sn);
 80061f2:	4620      	mov	r0, r4
 80061f4:	f7ff fb2a 	bl	800584c <WIZCHIP_READ>
 80061f8:	b2c3      	uxtb	r3, r0
         if (tmp != SOCK_ESTABLISHED)
 80061fa:	2b17      	cmp	r3, #23
         recvsize = getSn_RX_RSR(ChipAddr, sn);
 80061fc:	fa1f fb8b 	uxth.w	fp, fp
         if (tmp != SOCK_ESTABLISHED)
 8006200:	d067      	beq.n	80062d2 <recv+0x13e>
            if(tmp == SOCK_CLOSE_WAIT)
 8006202:	2b1c      	cmp	r3, #28
 8006204:	f040 80a5 	bne.w	8006352 <recv+0x1be>
               if(recvsize != 0) break;
 8006208:	f1bb 0f00 	cmp.w	fp, #0
 800620c:	d168      	bne.n	80062e0 <recv+0x14c>
               else if(getSn_TX_FSR(ChipAddr, sn) == getSn_TxMAX(ChipAddr, sn))
 800620e:	4629      	mov	r1, r5
 8006210:	4620      	mov	r0, r4
 8006212:	f7ff fb3b 	bl	800588c <getSn_TX_FSR>
 8006216:	4629      	mov	r1, r5
 8006218:	4683      	mov	fp, r0
 800621a:	4620      	mov	r0, r4
 800621c:	f7ff fb1a 	bl	8005854 <getTMSR>
 8006220:	ebbb 2f80 	cmp.w	fp, r0, lsl #10
 8006224:	f000 8095 	beq.w	8006352 <recv+0x1be>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8006228:	f8b9 3000 	ldrh.w	r3, [r9]
 800622c:	4233      	tst	r3, r6
 800622e:	d0da      	beq.n	80061e6 <recv+0x52>
 8006230:	2000      	movs	r0, #0
 8006232:	e04b      	b.n	80062cc <recv+0x138>
 8006234:	4693      	mov	fp, r2
   if((sock_remained_size[sn] == 0) || (getSn_MR(ChipAddr, sn) & Sn_MR_ALIGN))
 8006236:	4651      	mov	r1, sl
 8006238:	4620      	mov	r0, r4
 800623a:	f7ff fb07 	bl	800584c <WIZCHIP_READ>
 800623e:	05c0      	lsls	r0, r0, #23
 8006240:	d57f      	bpl.n	8006342 <recv+0x1ae>
      mr = getMR(ChipAddr);
 8006242:	2100      	movs	r1, #0
 8006244:	4620      	mov	r0, r4
 8006246:	f7ff fb01 	bl	800584c <WIZCHIP_READ>
      if((getSn_MR(ChipAddr, sn) & Sn_MR_ALIGN)==0)
 800624a:	4651      	mov	r1, sl
      mr = getMR(ChipAddr);
 800624c:	4606      	mov	r6, r0
      if((getSn_MR(ChipAddr, sn) & Sn_MR_ALIGN)==0)
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff fafc 	bl	800584c <WIZCHIP_READ>
 8006254:	05c1      	lsls	r1, r0, #23
 8006256:	f140 8089 	bpl.w	800636c <recv+0x1d8>
      sock_remained_size[sn] = recvsize;
 800625a:	4b59      	ldr	r3, [pc, #356]	; (80063c0 <recv+0x22c>)
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800625c:	4e59      	ldr	r6, [pc, #356]	; (80063c4 <recv+0x230>)
      sock_remained_size[sn] = recvsize;
 800625e:	f823 b015 	strh.w	fp, [r3, r5, lsl #1]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8006262:	5d73      	ldrb	r3, [r6, r5]
 8006264:	f003 0102 	and.w	r1, r3, #2
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8006268:	9a00      	ldr	r2, [sp, #0]
 800626a:	4297      	cmp	r7, r2
 800626c:	bf28      	it	cs
 800626e:	4617      	movcs	r7, r2
 8006270:	455f      	cmp	r7, fp
 8006272:	bf28      	it	cs
 8006274:	465f      	movcs	r7, fp
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8006276:	2900      	cmp	r1, #0
 8006278:	f000 8091 	beq.w	800639e <recv+0x20a>
      sock_remained_size[sn] -= 1;
 800627c:	4b50      	ldr	r3, [pc, #320]	; (80063c0 <recv+0x22c>)
 800627e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006282:	fa1f fb82 	uxth.w	fp, r2
 8006286:	f823 b015 	strh.w	fp, [r3, r5, lsl #1]
      *buf = sock_remained_byte[sn];
 800628a:	4b4f      	ldr	r3, [pc, #316]	; (80063c8 <recv+0x234>)
 800628c:	9a01      	ldr	r2, [sp, #4]
 800628e:	5d5b      	ldrb	r3, [r3, r5]
      recvsize -= 1;
 8006290:	f107 38ff 	add.w	r8, r7, #4294967295
      *buf = sock_remained_byte[sn];
 8006294:	f802 3b01 	strb.w	r3, [r2], #1
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8006298:	5d73      	ldrb	r3, [r6, r5]
      *buf = sock_remained_byte[sn];
 800629a:	9201      	str	r2, [sp, #4]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 800629c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80062a0:	5573      	strb	r3, [r6, r5]
      recvsize -= 1;
 80062a2:	fa1f f888 	uxth.w	r8, r8
   if(recvsize != 0)
 80062a6:	f1b8 0f00 	cmp.w	r8, #0
 80062aa:	d124      	bne.n	80062f6 <recv+0x162>
   if(sock_remained_size[sn] != 0)
 80062ac:	f1bb 0f00 	cmp.w	fp, #0
 80062b0:	d158      	bne.n	8006364 <recv+0x1d0>
   else sock_pack_info[sn] = PACK_COMPLETED;
 80062b2:	2300      	movs	r3, #0
 80062b4:	5573      	strb	r3, [r6, r5]
   if(getSn_MR(ChipAddr, sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 80062b6:	4651      	mov	r1, sl
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7ff fac7 	bl	800584c <WIZCHIP_READ>
 80062be:	05c3      	lsls	r3, r0, #23
 80062c0:	d503      	bpl.n	80062ca <recv+0x136>
 80062c2:	2300      	movs	r3, #0
 80062c4:	4a3e      	ldr	r2, [pc, #248]	; (80063c0 <recv+0x22c>)
 80062c6:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   return (int32_t)len;
 80062ca:	4638      	mov	r0, r7
}
 80062cc:	b005      	add	sp, #20
 80062ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80062d2:	f8b9 3000 	ldrh.w	r3, [r9]
 80062d6:	4233      	tst	r3, r6
 80062d8:	d008      	beq.n	80062ec <recv+0x158>
 80062da:	f1bb 0f00 	cmp.w	fp, #0
 80062de:	d0a7      	beq.n	8006230 <recv+0x9c>
   if((sock_remained_size[sn] == 0) || (getSn_MR(ChipAddr, sn) & Sn_MR_ALIGN))
 80062e0:	4b37      	ldr	r3, [pc, #220]	; (80063c0 <recv+0x22c>)
 80062e2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0ab      	beq.n	8006242 <recv+0xae>
 80062ea:	e7a4      	b.n	8006236 <recv+0xa2>
         if(recvsize != 0) break;
 80062ec:	f1bb 0f00 	cmp.w	fp, #0
 80062f0:	f43f af79 	beq.w	80061e6 <recv+0x52>
 80062f4:	e7f4      	b.n	80062e0 <recv+0x14c>
      wiz_recv_data(ChipAddr, sn, buf, recvsize);
 80062f6:	4629      	mov	r1, r5
 80062f8:	4620      	mov	r0, r4
 80062fa:	9a01      	ldr	r2, [sp, #4]
 80062fc:	4643      	mov	r3, r8
      setSn_CR(ChipAddr, sn,Sn_CR_RECV);
 80062fe:	f10a 0902 	add.w	r9, sl, #2
      wiz_recv_data(ChipAddr, sn, buf, recvsize);
 8006302:	f7ff fb11 	bl	8005928 <wiz_recv_data>
      setSn_CR(ChipAddr, sn,Sn_CR_RECV);
 8006306:	2240      	movs	r2, #64	; 0x40
 8006308:	4649      	mov	r1, r9
 800630a:	4620      	mov	r0, r4
 800630c:	f7ff fa9a 	bl	8005844 <WIZCHIP_WRITE>
      while(getSn_CR(ChipAddr, sn));
 8006310:	4649      	mov	r1, r9
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff fa9a 	bl	800584c <WIZCHIP_READ>
 8006318:	b2c0      	uxtb	r0, r0
 800631a:	2800      	cmp	r0, #0
 800631c:	d1f8      	bne.n	8006310 <recv+0x17c>
   sock_remained_size[sn] -= recvsize;
 800631e:	4a28      	ldr	r2, [pc, #160]	; (80063c0 <recv+0x22c>)
 8006320:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006324:	eba3 0308 	sub.w	r3, r3, r8
 8006328:	b29b      	uxth	r3, r3
 800632a:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   if(sock_remained_size[sn] != 0)
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0bf      	beq.n	80062b2 <recv+0x11e>
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8006332:	f018 0f01 	tst.w	r8, #1
      sock_pack_info[sn] |= PACK_REMAINED;
 8006336:	5d73      	ldrb	r3, [r6, r5]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8006338:	d014      	beq.n	8006364 <recv+0x1d0>
 800633a:	f043 0303 	orr.w	r3, r3, #3
 800633e:	5573      	strb	r3, [r6, r5]
 8006340:	e7b9      	b.n	80062b6 <recv+0x122>
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8006342:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <recv+0x22c>)
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8006344:	4e1f      	ldr	r6, [pc, #124]	; (80063c4 <recv+0x230>)
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8006346:	f833 b015 	ldrh.w	fp, [r3, r5, lsl #1]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800634a:	5d73      	ldrb	r3, [r6, r5]
 800634c:	f003 0102 	and.w	r1, r3, #2
 8006350:	e78a      	b.n	8006268 <recv+0xd4>
	CHECK_SOCKNUM();
 8006352:	4629      	mov	r1, r5
 8006354:	4620      	mov	r0, r4
 8006356:	f7ff fc81 	bl	8005c5c <close.part.0>
                  return SOCKERR_SOCKSTATUS;
 800635a:	f06f 0006 	mvn.w	r0, #6
}
 800635e:	b005      	add	sp, #20
 8006360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sock_pack_info[sn] |= PACK_REMAINED;
 8006364:	f043 0301 	orr.w	r3, r3, #1
 8006368:	5573      	strb	r3, [r6, r5]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 800636a:	e7a4      	b.n	80062b6 <recv+0x122>
         wiz_recv_data(ChipAddr, sn,head,2);
 800636c:	aa03      	add	r2, sp, #12
 800636e:	2302      	movs	r3, #2
 8006370:	4629      	mov	r1, r5
 8006372:	4620      	mov	r0, r4
 8006374:	f7ff fad8 	bl	8005928 <wiz_recv_data>
         if(mr & MR_FS)
 8006378:	05f2      	lsls	r2, r6, #23
 800637a:	d512      	bpl.n	80063a2 <recv+0x20e>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 800637c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
         sock_pack_info[sn] = PACK_FIRST;
 8006380:	9b00      	ldr	r3, [sp, #0]
 8006382:	4e10      	ldr	r6, [pc, #64]	; (80063c4 <recv+0x230>)
 8006384:	429f      	cmp	r7, r3
 8006386:	bf28      	it	cs
 8006388:	461f      	movcs	r7, r3
      sock_remained_size[sn] = recvsize;
 800638a:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <recv+0x22c>)
 800638c:	455f      	cmp	r7, fp
 800638e:	bf28      	it	cs
 8006390:	465f      	movcs	r7, fp
 8006392:	f823 b015 	strh.w	fp, [r3, r5, lsl #1]
         sock_pack_info[sn] = PACK_FIRST;
 8006396:	2380      	movs	r3, #128	; 0x80
 8006398:	46b8      	mov	r8, r7
 800639a:	5573      	strb	r3, [r6, r5]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800639c:	e783      	b.n	80062a6 <recv+0x112>
 800639e:	46b8      	mov	r8, r7
 80063a0:	e781      	b.n	80062a6 <recv+0x112>
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 80063a2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80063a6:	ba52      	rev16	r2, r2
 80063a8:	fa1f fb82 	uxth.w	fp, r2
 80063ac:	e7e8      	b.n	8006380 <recv+0x1ec>
   CHECK_SOCKNUM();
 80063ae:	f04f 30ff 	mov.w	r0, #4294967295
 80063b2:	e78b      	b.n	80062cc <recv+0x138>
   CHECK_SOCKDATA();
 80063b4:	f06f 000d 	mvn.w	r0, #13
 80063b8:	e788      	b.n	80062cc <recv+0x138>
   CHECK_SOCKMODE(ChipAddr, Sn_MR_TCP);
 80063ba:	f06f 0004 	mvn.w	r0, #4
 80063be:	e785      	b.n	80062cc <recv+0x138>
 80063c0:	2000131c 	.word	0x2000131c
 80063c4:	2000130c 	.word	0x2000130c
 80063c8:	20001314 	.word	0x20001314
 80063cc:	20001308 	.word	0x20001308

080063d0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop

080063d4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80063d4:	8800      	ldrh	r0, [r0, #0]
 80063d6:	b280      	uxth	r0, r0
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop

080063dc <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80063dc:	8001      	strh	r1, [r0, #0]
 80063de:	4770      	bx	lr

080063e0 <wizchip_cris_exit>:
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop

080063e4 <wizchip_cs_select>:
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop

080063e8 <wizchip_cs_deselect>:
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop

080063ec <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(uint32_t ChipAddr)
{
 80063ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(ChipAddr, mac);
 80063f0:	2108      	movs	r1, #8
{
 80063f2:	b08d      	sub	sp, #52	; 0x34
 80063f4:	4604      	mov	r4, r0
   getSHAR(ChipAddr, mac);
 80063f6:	f7ff fa29 	bl	800584c <WIZCHIP_READ>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2108      	movs	r1, #8
 80063fe:	4620      	mov	r0, r4
 8006400:	930b      	str	r3, [sp, #44]	; 0x2c
 8006402:	f7ff fa23 	bl	800584c <WIZCHIP_READ>
 8006406:	210a      	movs	r1, #10
 8006408:	4683      	mov	fp, r0
 800640a:	4620      	mov	r0, r4
 800640c:	f7ff fa1e 	bl	800584c <WIZCHIP_READ>
 8006410:	210a      	movs	r1, #10
 8006412:	4682      	mov	sl, r0
 8006414:	4620      	mov	r0, r4
 8006416:	f7ff fa19 	bl	800584c <WIZCHIP_READ>
 800641a:	4602      	mov	r2, r0
 800641c:	210c      	movs	r1, #12
 800641e:	4620      	mov	r0, r4
 8006420:	9201      	str	r2, [sp, #4]
 8006422:	f7ff fa13 	bl	800584c <WIZCHIP_READ>
 8006426:	4602      	mov	r2, r0
 8006428:	210c      	movs	r1, #12
 800642a:	4620      	mov	r0, r4
 800642c:	9202      	str	r2, [sp, #8]
 800642e:	f7ff fa0d 	bl	800584c <WIZCHIP_READ>
 8006432:	4602      	mov	r2, r0
   getGAR(ChipAddr, gw);  getSUBR(ChipAddr, sn);  getSIPR(ChipAddr, sip);
 8006434:	2110      	movs	r1, #16
 8006436:	4620      	mov	r0, r4
   getSHAR(ChipAddr, mac);
 8006438:	9203      	str	r2, [sp, #12]
   getGAR(ChipAddr, gw);  getSUBR(ChipAddr, sn);  getSIPR(ChipAddr, sip);
 800643a:	f7ff fa07 	bl	800584c <WIZCHIP_READ>
 800643e:	4602      	mov	r2, r0
 8006440:	2110      	movs	r1, #16
 8006442:	4620      	mov	r0, r4
 8006444:	9204      	str	r2, [sp, #16]
 8006446:	f7ff fa01 	bl	800584c <WIZCHIP_READ>
 800644a:	4602      	mov	r2, r0
 800644c:	2112      	movs	r1, #18
 800644e:	4620      	mov	r0, r4
 8006450:	9205      	str	r2, [sp, #20]
 8006452:	f7ff f9fb 	bl	800584c <WIZCHIP_READ>
 8006456:	4602      	mov	r2, r0
 8006458:	2112      	movs	r1, #18
 800645a:	4620      	mov	r0, r4
 800645c:	9206      	str	r2, [sp, #24]
 800645e:	f7ff f9f5 	bl	800584c <WIZCHIP_READ>
 8006462:	4602      	mov	r2, r0
 8006464:	2114      	movs	r1, #20
 8006466:	4620      	mov	r0, r4
 8006468:	9207      	str	r2, [sp, #28]
 800646a:	f7ff f9ef 	bl	800584c <WIZCHIP_READ>
 800646e:	4602      	mov	r2, r0
 8006470:	2114      	movs	r1, #20
 8006472:	4620      	mov	r0, r4
 8006474:	9208      	str	r2, [sp, #32]
 8006476:	f7ff f9e9 	bl	800584c <WIZCHIP_READ>
 800647a:	4602      	mov	r2, r0
 800647c:	2116      	movs	r1, #22
 800647e:	4620      	mov	r0, r4
 8006480:	9209      	str	r2, [sp, #36]	; 0x24
 8006482:	f7ff f9e3 	bl	800584c <WIZCHIP_READ>
 8006486:	4602      	mov	r2, r0
 8006488:	2116      	movs	r1, #22
 800648a:	4620      	mov	r0, r4
 800648c:	920a      	str	r2, [sp, #40]	; 0x28
 800648e:	f7ff f9dd 	bl	800584c <WIZCHIP_READ>
 8006492:	2118      	movs	r1, #24
 8006494:	4681      	mov	r9, r0
 8006496:	4620      	mov	r0, r4
 8006498:	f7ff f9d8 	bl	800584c <WIZCHIP_READ>
 800649c:	2118      	movs	r1, #24
 800649e:	4680      	mov	r8, r0
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7ff f9d3 	bl	800584c <WIZCHIP_READ>
 80064a6:	211a      	movs	r1, #26
 80064a8:	4607      	mov	r7, r0
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7ff f9ce 	bl	800584c <WIZCHIP_READ>
 80064b0:	211a      	movs	r1, #26
 80064b2:	4606      	mov	r6, r0
 80064b4:	4620      	mov	r0, r4
 80064b6:	f7ff f9c9 	bl	800584c <WIZCHIP_READ>
   setMR(ChipAddr, MR_RST);
 80064ba:	2280      	movs	r2, #128	; 0x80
   getGAR(ChipAddr, gw);  getSUBR(ChipAddr, sn);  getSIPR(ChipAddr, sip);
 80064bc:	4605      	mov	r5, r0
   setMR(ChipAddr, MR_RST);
 80064be:	2100      	movs	r1, #0
 80064c0:	4620      	mov	r0, r4
 80064c2:	f7ff f9bf 	bl	8005844 <WIZCHIP_WRITE>
   getMR(ChipAddr); // for delay
 80064c6:	2100      	movs	r1, #0
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7ff f9bf 	bl	800584c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(ChipAddr, mac);
 80064ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064d0:	4620      	mov	r0, r4
 80064d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064d6:	fa52 f28b 	uxtab	r2, r2, fp
 80064da:	2108      	movs	r1, #8
 80064dc:	b292      	uxth	r2, r2
 80064de:	f7ff f9b1 	bl	8005844 <WIZCHIP_WRITE>
 80064e2:	9b01      	ldr	r3, [sp, #4]
 80064e4:	f02a 02ff 	bic.w	r2, sl, #255	; 0xff
 80064e8:	fa52 f283 	uxtab	r2, r2, r3
 80064ec:	4620      	mov	r0, r4
 80064ee:	210a      	movs	r1, #10
 80064f0:	b292      	uxth	r2, r2
 80064f2:	f7ff f9a7 	bl	8005844 <WIZCHIP_WRITE>
 80064f6:	9b02      	ldr	r3, [sp, #8]
 80064f8:	4620      	mov	r0, r4
 80064fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064fe:	9b03      	ldr	r3, [sp, #12]
 8006500:	210c      	movs	r1, #12
 8006502:	fa52 f283 	uxtab	r2, r2, r3
 8006506:	b292      	uxth	r2, r2
 8006508:	f7ff f99c 	bl	8005844 <WIZCHIP_WRITE>
   setGAR(ChipAddr, gw);
 800650c:	9b04      	ldr	r3, [sp, #16]
 800650e:	4620      	mov	r0, r4
 8006510:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006514:	9b05      	ldr	r3, [sp, #20]
 8006516:	2110      	movs	r1, #16
 8006518:	fa52 f283 	uxtab	r2, r2, r3
 800651c:	b292      	uxth	r2, r2
 800651e:	f7ff f991 	bl	8005844 <WIZCHIP_WRITE>
 8006522:	9b06      	ldr	r3, [sp, #24]
 8006524:	4620      	mov	r0, r4
 8006526:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800652a:	9b07      	ldr	r3, [sp, #28]
 800652c:	2112      	movs	r1, #18
 800652e:	fa52 f283 	uxtab	r2, r2, r3
 8006532:	b292      	uxth	r2, r2
 8006534:	f7ff f986 	bl	8005844 <WIZCHIP_WRITE>
   setSUBR(ChipAddr, sn);
 8006538:	9b08      	ldr	r3, [sp, #32]
 800653a:	4620      	mov	r0, r4
 800653c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006542:	2114      	movs	r1, #20
 8006544:	fa52 f283 	uxtab	r2, r2, r3
 8006548:	b292      	uxth	r2, r2
 800654a:	f7ff f97b 	bl	8005844 <WIZCHIP_WRITE>
 800654e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006550:	4620      	mov	r0, r4
 8006552:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006556:	fa52 f289 	uxtab	r2, r2, r9
 800655a:	2116      	movs	r1, #22
 800655c:	b292      	uxth	r2, r2
 800655e:	f7ff f971 	bl	8005844 <WIZCHIP_WRITE>
   setSIPR(ChipAddr, sip);
 8006562:	f028 02ff 	bic.w	r2, r8, #255	; 0xff
 8006566:	fa52 f287 	uxtab	r2, r2, r7
 800656a:	4620      	mov	r0, r4
 800656c:	2118      	movs	r1, #24
 800656e:	b292      	uxth	r2, r2
 8006570:	f7ff f968 	bl	8005844 <WIZCHIP_WRITE>
 8006574:	211a      	movs	r1, #26
 8006576:	4620      	mov	r0, r4
 8006578:	f026 02ff 	bic.w	r2, r6, #255	; 0xff
 800657c:	fa52 f285 	uxtab	r2, r2, r5
 8006580:	b292      	uxth	r2, r2
}
 8006582:	b00d      	add	sp, #52	; 0x34
 8006584:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   setSIPR(ChipAddr, sip);
 8006588:	f7ff b95c 	b.w	8005844 <WIZCHIP_WRITE>

0800658c <ctlwizchip>:
{
 800658c:	b510      	push	{r4, lr}
 800658e:	4614      	mov	r4, r2
   switch(cwtype)
 8006590:	2908      	cmp	r1, #8
 8006592:	d841      	bhi.n	8006618 <ctlwizchip+0x8c>
 8006594:	e8df f001 	tbb	[pc, r1]
 8006598:	49580544 	.word	0x49580544
 800659c:	40406480 	.word	0x40406480
 80065a0:	70          	.byte	0x70
 80065a1:	00          	.byte	0x00
         if(arg != 0) 
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	d03c      	beq.n	8006620 <ctlwizchip+0x94>
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset(ChipAddr);
 80065a6:	f7ff ff21 	bl	80063ec <wizchip_sw_reset>
      tmp = 0;
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065aa:	7823      	ldrb	r3, [r4, #0]
 80065ac:	2b3f      	cmp	r3, #63	; 0x3f
 80065ae:	d833      	bhi.n	8006618 <ctlwizchip+0x8c>
 80065b0:	7862      	ldrb	r2, [r4, #1]
 80065b2:	2a3f      	cmp	r2, #63	; 0x3f
 80065b4:	d830      	bhi.n	8006618 <ctlwizchip+0x8c>
 80065b6:	78a1      	ldrb	r1, [r4, #2]
			tmp += txsize[i];
 80065b8:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065ba:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 80065bc:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065be:	d82b      	bhi.n	8006618 <ctlwizchip+0x8c>
 80065c0:	78e2      	ldrb	r2, [r4, #3]
			tmp += txsize[i];
 80065c2:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065c4:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 80065c6:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065c8:	d826      	bhi.n	8006618 <ctlwizchip+0x8c>
 80065ca:	7921      	ldrb	r1, [r4, #4]
			tmp += txsize[i];
 80065cc:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065ce:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 80065d0:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065d2:	d821      	bhi.n	8006618 <ctlwizchip+0x8c>
 80065d4:	7962      	ldrb	r2, [r4, #5]
			tmp += txsize[i];
 80065d6:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065d8:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 80065da:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065dc:	d81c      	bhi.n	8006618 <ctlwizchip+0x8c>
 80065de:	79a1      	ldrb	r1, [r4, #6]
			tmp += txsize[i];
 80065e0:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065e2:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 80065e4:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065e6:	d817      	bhi.n	8006618 <ctlwizchip+0x8c>
 80065e8:	79e2      	ldrb	r2, [r4, #7]
			tmp += txsize[i];
 80065ea:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065ec:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 80065ee:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065f0:	d812      	bhi.n	8006618 <ctlwizchip+0x8c>
			tmp += txsize[i];
 80065f2:	4413      	add	r3, r2
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 80065f4:	075b      	lsls	r3, r3, #29
 80065f6:	d10f      	bne.n	8006618 <ctlwizchip+0x8c>
   {
      tmp = 0;
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80065f8:	7a23      	ldrb	r3, [r4, #8]
 80065fa:	2b3f      	cmp	r3, #63	; 0x3f
 80065fc:	d80c      	bhi.n	8006618 <ctlwizchip+0x8c>
 80065fe:	7a62      	ldrb	r2, [r4, #9]
 8006600:	2a3f      	cmp	r2, #63	; 0x3f
 8006602:	d809      	bhi.n	8006618 <ctlwizchip+0x8c>
 8006604:	7aa1      	ldrb	r1, [r4, #10]
			tmp += rxsize[i];
 8006606:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8006608:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 800660a:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800660c:	d804      	bhi.n	8006618 <ctlwizchip+0x8c>
 800660e:	7ae2      	ldrb	r2, [r4, #11]
			tmp += rxsize[i];
 8006610:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8006612:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 8006614:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8006616:	d944      	bls.n	80066a2 <ctlwizchip+0x116>
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8006618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800661c:	4618      	mov	r0, r3
 800661e:	bd10      	pop	{r4, pc}
         wizchip_sw_reset(ChipAddr);
 8006620:	f7ff fee4 	bl	80063ec <wizchip_sw_reset>
   return 0;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR(ChipAddr, ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 800662a:	2102      	movs	r1, #2
         wizchip_clrinterrupt(ChipAddr, *((intr_kind*)arg));
 800662c:	8813      	ldrh	r3, [r2, #0]
   uint8_t ir  = (uint8_t)intr;
 800662e:	b2da      	uxtb	r2, r3
   setIR(ChipAddr, ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8006630:	f042 0410 	orr.w	r4, r2, #16
}

void wizchip_setinterruptmask(uint32_t ChipAddr, intr_kind intr)
{
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006634:	0a1a      	lsrs	r2, r3, #8
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ChipAddr, ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8006636:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800663a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800663e:	f7ff f901 	bl	8005844 <WIZCHIP_WRITE>
   return 0;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	bd10      	pop	{r4, pc}
   ret = getIR(ChipAddr);
 8006648:	2102      	movs	r1, #2
 800664a:	f7ff f8ff 	bl	800584c <WIZCHIP_READ>
   return 0;
 800664e:	2300      	movs	r3, #0
   ir = (uint8_t)(ret >> 8);
 8006650:	0a02      	lsrs	r2, r0, #8
 8006652:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  ret = (ret << 8) + ir;
 8006656:	eb02 2000 	add.w	r0, r2, r0, lsl #8
        *((intr_kind*)arg) = wizchip_getinterrupt(ChipAddr);
 800665a:	8020      	strh	r0, [r4, #0]
}
 800665c:	4618      	mov	r0, r3
 800665e:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR(ChipAddr);
 8006660:	2104      	movs	r1, #4
 8006662:	f7ff f8f3 	bl	800584c <WIZCHIP_READ>
   return 0;
 8006666:	2300      	movs	r3, #0
   imr = (uint8_t)(ret >> 8);
 8006668:	0a02      	lsrs	r2, r0, #8
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 800666a:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800666e:	eb02 2000 	add.w	r0, r2, r0, lsl #8
         *((intr_kind*)arg) = wizchip_getinterruptmask(ChipAddr);
 8006672:	8020      	strh	r0, [r4, #0]
}
 8006674:	4618      	mov	r0, r3
 8006676:	bd10      	pop	{r4, pc}
         ((uint8_t*)arg)[5] = 0;
 8006678:	2200      	movs	r2, #0
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800667a:	4b17      	ldr	r3, [pc, #92]	; (80066d8 <ctlwizchip+0x14c>)
 800667c:	7899      	ldrb	r1, [r3, #2]
 800667e:	7021      	strb	r1, [r4, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8006680:	78d9      	ldrb	r1, [r3, #3]
 8006682:	7061      	strb	r1, [r4, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8006684:	7919      	ldrb	r1, [r3, #4]
 8006686:	70a1      	strb	r1, [r4, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8006688:	7959      	ldrb	r1, [r3, #5]
 800668a:	70e1      	strb	r1, [r4, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800668c:	799b      	ldrb	r3, [r3, #6]
         ((uint8_t*)arg)[5] = 0;
 800668e:	7162      	strb	r2, [r4, #5]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8006690:	7123      	strb	r3, [r4, #4]
   return 0;
 8006692:	4613      	mov	r3, r2
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd10      	pop	{r4, pc}
         wizchip_setinterruptmask(ChipAddr, *((intr_kind*)arg));
 8006698:	8813      	ldrh	r3, [r2, #0]
   setIMR( ChipAddr, ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 800669a:	2104      	movs	r1, #4
 800669c:	f003 04ef 	and.w	r4, r3, #239	; 0xef
 80066a0:	e7c8      	b.n	8006634 <ctlwizchip+0xa8>
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066a2:	7b21      	ldrb	r1, [r4, #12]
			tmp += rxsize[i];
 80066a4:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066a6:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 80066a8:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066aa:	d8b5      	bhi.n	8006618 <ctlwizchip+0x8c>
 80066ac:	7b60      	ldrb	r0, [r4, #13]
			tmp += rxsize[i];
 80066ae:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066b0:	283f      	cmp	r0, #63	; 0x3f
			tmp += rxsize[i];
 80066b2:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066b4:	d8b0      	bhi.n	8006618 <ctlwizchip+0x8c>
 80066b6:	7ba1      	ldrb	r1, [r4, #14]
			tmp += rxsize[i];
 80066b8:	4403      	add	r3, r0
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066ba:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 80066bc:	b2da      	uxtb	r2, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066be:	d8ab      	bhi.n	8006618 <ctlwizchip+0x8c>
 80066c0:	7be3      	ldrb	r3, [r4, #15]
			tmp += rxsize[i];
 80066c2:	440a      	add	r2, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066c4:	2b3f      	cmp	r3, #63	; 0x3f
			tmp += rxsize[i];
 80066c6:	b2d2      	uxtb	r2, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066c8:	d8a6      	bhi.n	8006618 <ctlwizchip+0x8c>
			tmp += rxsize[i];
 80066ca:	4413      	add	r3, r2
		if(tmp % 8) return -1;
 80066cc:	f013 0307 	ands.w	r3, r3, #7
 80066d0:	bf18      	it	ne
 80066d2:	2301      	movne	r3, #1
 80066d4:	425b      	negs	r3, r3
 80066d6:	e7a1      	b.n	800661c <ctlwizchip+0x90>
 80066d8:	20000050 	.word	0x20000050

080066dc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(uint32_t ChipAddr, wiz_NetInfo* pnetinfo)
{
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	460c      	mov	r4, r1
 80066e0:	4605      	mov	r5, r0
   uint8_t mac[6]={0,0};
   setSHAR(ChipAddr, pnetinfo->mac);
 80066e2:	7823      	ldrb	r3, [r4, #0]
 80066e4:	7862      	ldrb	r2, [r4, #1]
 80066e6:	2108      	movs	r1, #8
 80066e8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80066ec:	b292      	uxth	r2, r2
 80066ee:	f7ff f8a9 	bl	8005844 <WIZCHIP_WRITE>
 80066f2:	78a3      	ldrb	r3, [r4, #2]
 80066f4:	78e2      	ldrb	r2, [r4, #3]
 80066f6:	210a      	movs	r1, #10
 80066f8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80066fc:	4628      	mov	r0, r5
 80066fe:	b292      	uxth	r2, r2
 8006700:	f7ff f8a0 	bl	8005844 <WIZCHIP_WRITE>
 8006704:	7923      	ldrb	r3, [r4, #4]
 8006706:	7962      	ldrb	r2, [r4, #5]
 8006708:	210c      	movs	r1, #12
 800670a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 800670e:	4628      	mov	r0, r5
 8006710:	b292      	uxth	r2, r2
 8006712:	f7ff f897 	bl	8005844 <WIZCHIP_WRITE>
   setGAR(ChipAddr, pnetinfo->gw);
 8006716:	7ba3      	ldrb	r3, [r4, #14]
 8006718:	7be2      	ldrb	r2, [r4, #15]
 800671a:	2110      	movs	r1, #16
 800671c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8006720:	4628      	mov	r0, r5
 8006722:	b292      	uxth	r2, r2
 8006724:	f7ff f88e 	bl	8005844 <WIZCHIP_WRITE>
 8006728:	7c23      	ldrb	r3, [r4, #16]
 800672a:	7c62      	ldrb	r2, [r4, #17]
 800672c:	2112      	movs	r1, #18
 800672e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8006732:	4628      	mov	r0, r5
 8006734:	b292      	uxth	r2, r2
 8006736:	f7ff f885 	bl	8005844 <WIZCHIP_WRITE>
   setSUBR(ChipAddr, pnetinfo->sn);
 800673a:	7aa3      	ldrb	r3, [r4, #10]
 800673c:	7ae2      	ldrb	r2, [r4, #11]
 800673e:	2114      	movs	r1, #20
 8006740:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8006744:	4628      	mov	r0, r5
 8006746:	b292      	uxth	r2, r2
 8006748:	f7ff f87c 	bl	8005844 <WIZCHIP_WRITE>
 800674c:	7b23      	ldrb	r3, [r4, #12]
 800674e:	7b62      	ldrb	r2, [r4, #13]
 8006750:	2116      	movs	r1, #22
 8006752:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8006756:	4628      	mov	r0, r5
 8006758:	b292      	uxth	r2, r2
 800675a:	f7ff f873 	bl	8005844 <WIZCHIP_WRITE>
   setSIPR(ChipAddr, pnetinfo->ip);
 800675e:	79a3      	ldrb	r3, [r4, #6]
 8006760:	79e2      	ldrb	r2, [r4, #7]
 8006762:	2118      	movs	r1, #24
 8006764:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8006768:	4628      	mov	r0, r5
 800676a:	b292      	uxth	r2, r2
 800676c:	f7ff f86a 	bl	8005844 <WIZCHIP_WRITE>
 8006770:	7a23      	ldrb	r3, [r4, #8]
 8006772:	7a62      	ldrb	r2, [r4, #9]
 8006774:	211a      	movs	r1, #26
 8006776:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 800677a:	4628      	mov	r0, r5
 800677c:	b292      	uxth	r2, r2
 800677e:	f7ff f861 	bl	8005844 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8006782:	4904      	ldr	r1, [pc, #16]	; (8006794 <wizchip_setnetinfo+0xb8>)
 8006784:	f8d4 0012 	ldr.w	r0, [r4, #18]
   _DNS_[1] = pnetinfo->dns[1];
   _DNS_[2] = pnetinfo->dns[2];
   _DNS_[3] = pnetinfo->dns[3];
   _DHCP_   = pnetinfo->dhcp;
 8006788:	4b03      	ldr	r3, [pc, #12]	; (8006798 <wizchip_setnetinfo+0xbc>)
 800678a:	7da2      	ldrb	r2, [r4, #22]
   _DNS_[0] = pnetinfo->dns[0];
 800678c:	6008      	str	r0, [r1, #0]
   _DHCP_   = pnetinfo->dhcp;
 800678e:	701a      	strb	r2, [r3, #0]
}
 8006790:	bd38      	pop	{r3, r4, r5, pc}
 8006792:	bf00      	nop
 8006794:	20001330 	.word	0x20001330
 8006798:	2000132c 	.word	0x2000132c

0800679c <wizchip_getnetinfo>:

void wizchip_getnetinfo(uint32_t ChipAddr, wiz_NetInfo* pnetinfo)
{
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	460c      	mov	r4, r1
   getSHAR(ChipAddr, pnetinfo->mac);
 80067a0:	2108      	movs	r1, #8
{
 80067a2:	4605      	mov	r5, r0
   getSHAR(ChipAddr, pnetinfo->mac);
 80067a4:	f7ff f852 	bl	800584c <WIZCHIP_READ>
 80067a8:	2108      	movs	r1, #8
 80067aa:	4603      	mov	r3, r0
 80067ac:	40cb      	lsrs	r3, r1
 80067ae:	7023      	strb	r3, [r4, #0]
 80067b0:	4628      	mov	r0, r5
 80067b2:	f7ff f84b 	bl	800584c <WIZCHIP_READ>
 80067b6:	4603      	mov	r3, r0
 80067b8:	210a      	movs	r1, #10
 80067ba:	7063      	strb	r3, [r4, #1]
 80067bc:	4628      	mov	r0, r5
 80067be:	f7ff f845 	bl	800584c <WIZCHIP_READ>
 80067c2:	4603      	mov	r3, r0
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	210a      	movs	r1, #10
 80067c8:	70a3      	strb	r3, [r4, #2]
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7ff f83e 	bl	800584c <WIZCHIP_READ>
 80067d0:	4603      	mov	r3, r0
 80067d2:	210c      	movs	r1, #12
 80067d4:	70e3      	strb	r3, [r4, #3]
 80067d6:	4628      	mov	r0, r5
 80067d8:	f7ff f838 	bl	800584c <WIZCHIP_READ>
 80067dc:	4603      	mov	r3, r0
 80067de:	0a1b      	lsrs	r3, r3, #8
 80067e0:	210c      	movs	r1, #12
 80067e2:	7123      	strb	r3, [r4, #4]
 80067e4:	4628      	mov	r0, r5
 80067e6:	f7ff f831 	bl	800584c <WIZCHIP_READ>
 80067ea:	4603      	mov	r3, r0
   getGAR(ChipAddr, pnetinfo->gw);
 80067ec:	2110      	movs	r1, #16
   getSHAR(ChipAddr, pnetinfo->mac);
 80067ee:	7163      	strb	r3, [r4, #5]
   getGAR(ChipAddr, pnetinfo->gw);
 80067f0:	4628      	mov	r0, r5
 80067f2:	f7ff f82b 	bl	800584c <WIZCHIP_READ>
 80067f6:	4603      	mov	r3, r0
 80067f8:	0a1b      	lsrs	r3, r3, #8
 80067fa:	2110      	movs	r1, #16
 80067fc:	73a3      	strb	r3, [r4, #14]
 80067fe:	4628      	mov	r0, r5
 8006800:	f7ff f824 	bl	800584c <WIZCHIP_READ>
 8006804:	4603      	mov	r3, r0
 8006806:	2112      	movs	r1, #18
 8006808:	73e3      	strb	r3, [r4, #15]
 800680a:	4628      	mov	r0, r5
 800680c:	f7ff f81e 	bl	800584c <WIZCHIP_READ>
 8006810:	4603      	mov	r3, r0
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	2112      	movs	r1, #18
 8006816:	7423      	strb	r3, [r4, #16]
 8006818:	4628      	mov	r0, r5
 800681a:	f7ff f817 	bl	800584c <WIZCHIP_READ>
 800681e:	4603      	mov	r3, r0
   getSUBR(ChipAddr, pnetinfo->sn);
 8006820:	2114      	movs	r1, #20
   getGAR(ChipAddr, pnetinfo->gw);
 8006822:	7463      	strb	r3, [r4, #17]
   getSUBR(ChipAddr, pnetinfo->sn);
 8006824:	4628      	mov	r0, r5
 8006826:	f7ff f811 	bl	800584c <WIZCHIP_READ>
 800682a:	4603      	mov	r3, r0
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	2114      	movs	r1, #20
 8006830:	72a3      	strb	r3, [r4, #10]
 8006832:	4628      	mov	r0, r5
 8006834:	f7ff f80a 	bl	800584c <WIZCHIP_READ>
 8006838:	4603      	mov	r3, r0
 800683a:	2116      	movs	r1, #22
 800683c:	72e3      	strb	r3, [r4, #11]
 800683e:	4628      	mov	r0, r5
 8006840:	f7ff f804 	bl	800584c <WIZCHIP_READ>
 8006844:	4603      	mov	r3, r0
 8006846:	0a1b      	lsrs	r3, r3, #8
 8006848:	2116      	movs	r1, #22
 800684a:	7323      	strb	r3, [r4, #12]
 800684c:	4628      	mov	r0, r5
 800684e:	f7fe fffd 	bl	800584c <WIZCHIP_READ>
 8006852:	4603      	mov	r3, r0
   getSIPR(ChipAddr, pnetinfo->ip);
 8006854:	2118      	movs	r1, #24
   getSUBR(ChipAddr, pnetinfo->sn);
 8006856:	7363      	strb	r3, [r4, #13]
   getSIPR(ChipAddr, pnetinfo->ip);
 8006858:	4628      	mov	r0, r5
 800685a:	f7fe fff7 	bl	800584c <WIZCHIP_READ>
 800685e:	4603      	mov	r3, r0
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	2118      	movs	r1, #24
 8006864:	71a3      	strb	r3, [r4, #6]
 8006866:	4628      	mov	r0, r5
 8006868:	f7fe fff0 	bl	800584c <WIZCHIP_READ>
 800686c:	4603      	mov	r3, r0
 800686e:	211a      	movs	r1, #26
 8006870:	71e3      	strb	r3, [r4, #7]
 8006872:	4628      	mov	r0, r5
 8006874:	f7fe ffea 	bl	800584c <WIZCHIP_READ>
 8006878:	4603      	mov	r3, r0
 800687a:	0a1b      	lsrs	r3, r3, #8
 800687c:	211a      	movs	r1, #26
 800687e:	7223      	strb	r3, [r4, #8]
 8006880:	4628      	mov	r0, r5
 8006882:	f7fe ffe3 	bl	800584c <WIZCHIP_READ>
   pnetinfo->dns[0]= _DNS_[0];
 8006886:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <wizchip_getnetinfo+0x108>)
   pnetinfo->dns[1]= _DNS_[1];
   pnetinfo->dns[2]= _DNS_[2];
   pnetinfo->dns[3]= _DNS_[3];
   pnetinfo->dhcp  = _DHCP_;
 8006888:	4907      	ldr	r1, [pc, #28]	; (80068a8 <wizchip_getnetinfo+0x10c>)
   pnetinfo->dns[0]= _DNS_[0];
 800688a:	781a      	ldrb	r2, [r3, #0]
   pnetinfo->dhcp  = _DHCP_;
 800688c:	7809      	ldrb	r1, [r1, #0]
   pnetinfo->dns[0]= _DNS_[0];
 800688e:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006890:	785a      	ldrb	r2, [r3, #1]
   pnetinfo->dhcp  = _DHCP_;
 8006892:	75a1      	strb	r1, [r4, #22]
   pnetinfo->dns[1]= _DNS_[1];
 8006894:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006896:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 8006898:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[2]= _DNS_[2];
 800689a:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800689c:	7563      	strb	r3, [r4, #21]
   getSIPR(ChipAddr, pnetinfo->ip);
 800689e:	7260      	strb	r0, [r4, #9]
}
 80068a0:	bd38      	pop	{r3, r4, r5, pc}
 80068a2:	bf00      	nop
 80068a4:	20001330 	.word	0x20001330
 80068a8:	2000132c 	.word	0x2000132c

080068ac <ctlnetwork>:
{
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	4604      	mov	r4, r0
 80068b0:	4615      	mov	r5, r2
   switch(cntype)
 80068b2:	2905      	cmp	r1, #5
 80068b4:	d83d      	bhi.n	8006932 <ctlnetwork+0x86>
 80068b6:	e8df f001 	tbb	[pc, r1]
 80068ba:	1510      	.short	0x1510
 80068bc:	03312a1a 	.word	0x03312a1a
   setRTR(ChipAddr, nettime->time_100us);
}

void wizchip_gettimeout(uint32_t ChipAddr, wiz_NetTimeout* nettime)
{
   nettime->retry_cnt = getRCR(ChipAddr);
 80068c0:	211e      	movs	r1, #30
 80068c2:	f7fe ffc3 	bl	800584c <WIZCHIP_READ>
 80068c6:	4603      	mov	r3, r0
   nettime->time_100us = getRTR(ChipAddr);
 80068c8:	211c      	movs	r1, #28
   nettime->retry_cnt = getRCR(ChipAddr);
 80068ca:	702b      	strb	r3, [r5, #0]
   nettime->time_100us = getRTR(ChipAddr);
 80068cc:	4620      	mov	r0, r4
 80068ce:	f7fe ffbd 	bl	800584c <WIZCHIP_READ>
 80068d2:	4603      	mov	r3, r0
   return 0;
 80068d4:	2000      	movs	r0, #0
   nettime->time_100us = getRTR(ChipAddr);
 80068d6:	806b      	strh	r3, [r5, #2]
}
 80068d8:	bd70      	pop	{r4, r5, r6, pc}
         wizchip_setnetinfo(ChipAddr, (wiz_NetInfo*)arg);
 80068da:	4611      	mov	r1, r2
 80068dc:	f7ff fefe 	bl	80066dc <wizchip_setnetinfo>
   return 0;
 80068e0:	2000      	movs	r0, #0
}
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
         wizchip_getnetinfo(ChipAddr, (wiz_NetInfo*)arg);
 80068e4:	4611      	mov	r1, r2
 80068e6:	f7ff ff59 	bl	800679c <wizchip_getnetinfo>
   return 0;
 80068ea:	2000      	movs	r0, #0
}
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
         return wizchip_setnetmode(ChipAddr, *(netmode_type*)arg);
 80068ee:	7816      	ldrb	r6, [r2, #0]
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 80068f0:	f036 0538 	bics.w	r5, r6, #56	; 0x38
 80068f4:	d11d      	bne.n	8006932 <ctlnetwork+0x86>
   tmp = getMR(ChipAddr);
 80068f6:	4629      	mov	r1, r5
 80068f8:	f7fe ffa8 	bl	800584c <WIZCHIP_READ>
 80068fc:	4602      	mov	r2, r0
 80068fe:	b2d2      	uxtb	r2, r2
   setMR(ChipAddr, tmp);
 8006900:	4620      	mov	r0, r4
 8006902:	4629      	mov	r1, r5
 8006904:	4332      	orrs	r2, r6
 8006906:	f7fe ff9d 	bl	8005844 <WIZCHIP_WRITE>
   return 0;
 800690a:	4628      	mov	r0, r5
}
 800690c:	bd70      	pop	{r4, r5, r6, pc}
   return (netmode_type) getMR(ChipAddr);
 800690e:	2100      	movs	r1, #0
 8006910:	f7fe ff9c 	bl	800584c <WIZCHIP_READ>
 8006914:	4603      	mov	r3, r0
 8006916:	702b      	strb	r3, [r5, #0]
   return 0;
 8006918:	2000      	movs	r0, #0
}
 800691a:	bd70      	pop	{r4, r5, r6, pc}
   setRCR(ChipAddr, nettime->retry_cnt);
 800691c:	211e      	movs	r1, #30
 800691e:	7812      	ldrb	r2, [r2, #0]
 8006920:	f7fe ff90 	bl	8005844 <WIZCHIP_WRITE>
   setRTR(ChipAddr, nettime->time_100us);
 8006924:	4620      	mov	r0, r4
 8006926:	211c      	movs	r1, #28
 8006928:	886a      	ldrh	r2, [r5, #2]
 800692a:	f7fe ff8b 	bl	8005844 <WIZCHIP_WRITE>
   return 0;
 800692e:	2000      	movs	r0, #0
}
 8006930:	bd70      	pop	{r4, r5, r6, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006936:	bd70      	pop	{r4, r5, r6, pc}

08006938 <__errno>:
 8006938:	4b01      	ldr	r3, [pc, #4]	; (8006940 <__errno+0x8>)
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	2000007c 	.word	0x2000007c

08006944 <__libc_init_array>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4d0d      	ldr	r5, [pc, #52]	; (800697c <__libc_init_array+0x38>)
 8006948:	2600      	movs	r6, #0
 800694a:	4c0d      	ldr	r4, [pc, #52]	; (8006980 <__libc_init_array+0x3c>)
 800694c:	1b64      	subs	r4, r4, r5
 800694e:	10a4      	asrs	r4, r4, #2
 8006950:	42a6      	cmp	r6, r4
 8006952:	d109      	bne.n	8006968 <__libc_init_array+0x24>
 8006954:	4d0b      	ldr	r5, [pc, #44]	; (8006984 <__libc_init_array+0x40>)
 8006956:	2600      	movs	r6, #0
 8006958:	4c0b      	ldr	r4, [pc, #44]	; (8006988 <__libc_init_array+0x44>)
 800695a:	f001 f831 	bl	80079c0 <_init>
 800695e:	1b64      	subs	r4, r4, r5
 8006960:	10a4      	asrs	r4, r4, #2
 8006962:	42a6      	cmp	r6, r4
 8006964:	d105      	bne.n	8006972 <__libc_init_array+0x2e>
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	f855 3b04 	ldr.w	r3, [r5], #4
 800696c:	3601      	adds	r6, #1
 800696e:	4798      	blx	r3
 8006970:	e7ee      	b.n	8006950 <__libc_init_array+0xc>
 8006972:	f855 3b04 	ldr.w	r3, [r5], #4
 8006976:	3601      	adds	r6, #1
 8006978:	4798      	blx	r3
 800697a:	e7f2      	b.n	8006962 <__libc_init_array+0x1e>
 800697c:	08007d14 	.word	0x08007d14
 8006980:	08007d14 	.word	0x08007d14
 8006984:	08007d14 	.word	0x08007d14
 8006988:	08007d18 	.word	0x08007d18

0800698c <memset>:
 800698c:	4402      	add	r2, r0
 800698e:	4603      	mov	r3, r0
 8006990:	4293      	cmp	r3, r2
 8006992:	d100      	bne.n	8006996 <memset+0xa>
 8006994:	4770      	bx	lr
 8006996:	f803 1b01 	strb.w	r1, [r3], #1
 800699a:	e7f9      	b.n	8006990 <memset+0x4>

0800699c <iprintf>:
 800699c:	b40f      	push	{r0, r1, r2, r3}
 800699e:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <iprintf+0x2c>)
 80069a0:	b513      	push	{r0, r1, r4, lr}
 80069a2:	681c      	ldr	r4, [r3, #0]
 80069a4:	b124      	cbz	r4, 80069b0 <iprintf+0x14>
 80069a6:	69a3      	ldr	r3, [r4, #24]
 80069a8:	b913      	cbnz	r3, 80069b0 <iprintf+0x14>
 80069aa:	4620      	mov	r0, r4
 80069ac:	f000 fa5c 	bl	8006e68 <__sinit>
 80069b0:	ab05      	add	r3, sp, #20
 80069b2:	9a04      	ldr	r2, [sp, #16]
 80069b4:	68a1      	ldr	r1, [r4, #8]
 80069b6:	4620      	mov	r0, r4
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	f000 fc65 	bl	8007288 <_vfiprintf_r>
 80069be:	b002      	add	sp, #8
 80069c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c4:	b004      	add	sp, #16
 80069c6:	4770      	bx	lr
 80069c8:	2000007c 	.word	0x2000007c

080069cc <_puts_r>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	460e      	mov	r6, r1
 80069d0:	4605      	mov	r5, r0
 80069d2:	b118      	cbz	r0, 80069dc <_puts_r+0x10>
 80069d4:	6983      	ldr	r3, [r0, #24]
 80069d6:	b90b      	cbnz	r3, 80069dc <_puts_r+0x10>
 80069d8:	f000 fa46 	bl	8006e68 <__sinit>
 80069dc:	69ab      	ldr	r3, [r5, #24]
 80069de:	68ac      	ldr	r4, [r5, #8]
 80069e0:	b913      	cbnz	r3, 80069e8 <_puts_r+0x1c>
 80069e2:	4628      	mov	r0, r5
 80069e4:	f000 fa40 	bl	8006e68 <__sinit>
 80069e8:	4b2c      	ldr	r3, [pc, #176]	; (8006a9c <_puts_r+0xd0>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d120      	bne.n	8006a30 <_puts_r+0x64>
 80069ee:	686c      	ldr	r4, [r5, #4]
 80069f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069f2:	07db      	lsls	r3, r3, #31
 80069f4:	d405      	bmi.n	8006a02 <_puts_r+0x36>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	0598      	lsls	r0, r3, #22
 80069fa:	d402      	bmi.n	8006a02 <_puts_r+0x36>
 80069fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069fe:	f000 fad1 	bl	8006fa4 <__retarget_lock_acquire_recursive>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	0719      	lsls	r1, r3, #28
 8006a06:	d51d      	bpl.n	8006a44 <_puts_r+0x78>
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	b1db      	cbz	r3, 8006a44 <_puts_r+0x78>
 8006a0c:	3e01      	subs	r6, #1
 8006a0e:	68a3      	ldr	r3, [r4, #8]
 8006a10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a14:	3b01      	subs	r3, #1
 8006a16:	60a3      	str	r3, [r4, #8]
 8006a18:	bb39      	cbnz	r1, 8006a6a <_puts_r+0x9e>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da38      	bge.n	8006a90 <_puts_r+0xc4>
 8006a1e:	4622      	mov	r2, r4
 8006a20:	210a      	movs	r1, #10
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 f848 	bl	8006ab8 <__swbuf_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d011      	beq.n	8006a50 <_puts_r+0x84>
 8006a2c:	250a      	movs	r5, #10
 8006a2e:	e011      	b.n	8006a54 <_puts_r+0x88>
 8006a30:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <_puts_r+0xd4>)
 8006a32:	429c      	cmp	r4, r3
 8006a34:	d101      	bne.n	8006a3a <_puts_r+0x6e>
 8006a36:	68ac      	ldr	r4, [r5, #8]
 8006a38:	e7da      	b.n	80069f0 <_puts_r+0x24>
 8006a3a:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <_puts_r+0xd8>)
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	bf08      	it	eq
 8006a40:	68ec      	ldreq	r4, [r5, #12]
 8006a42:	e7d5      	b.n	80069f0 <_puts_r+0x24>
 8006a44:	4621      	mov	r1, r4
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 f888 	bl	8006b5c <__swsetup_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d0dd      	beq.n	8006a0c <_puts_r+0x40>
 8006a50:	f04f 35ff 	mov.w	r5, #4294967295
 8006a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a56:	07da      	lsls	r2, r3, #31
 8006a58:	d405      	bmi.n	8006a66 <_puts_r+0x9a>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	059b      	lsls	r3, r3, #22
 8006a5e:	d402      	bmi.n	8006a66 <_puts_r+0x9a>
 8006a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a62:	f000 faa0 	bl	8006fa6 <__retarget_lock_release_recursive>
 8006a66:	4628      	mov	r0, r5
 8006a68:	bd70      	pop	{r4, r5, r6, pc}
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	da04      	bge.n	8006a78 <_puts_r+0xac>
 8006a6e:	69a2      	ldr	r2, [r4, #24]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	dc06      	bgt.n	8006a82 <_puts_r+0xb6>
 8006a74:	290a      	cmp	r1, #10
 8006a76:	d004      	beq.n	8006a82 <_puts_r+0xb6>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	6022      	str	r2, [r4, #0]
 8006a7e:	7019      	strb	r1, [r3, #0]
 8006a80:	e7c5      	b.n	8006a0e <_puts_r+0x42>
 8006a82:	4622      	mov	r2, r4
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 f817 	bl	8006ab8 <__swbuf_r>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d1bf      	bne.n	8006a0e <_puts_r+0x42>
 8006a8e:	e7df      	b.n	8006a50 <_puts_r+0x84>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	250a      	movs	r5, #10
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	6022      	str	r2, [r4, #0]
 8006a98:	701d      	strb	r5, [r3, #0]
 8006a9a:	e7db      	b.n	8006a54 <_puts_r+0x88>
 8006a9c:	08007c98 	.word	0x08007c98
 8006aa0:	08007cb8 	.word	0x08007cb8
 8006aa4:	08007c78 	.word	0x08007c78

08006aa8 <puts>:
 8006aa8:	4b02      	ldr	r3, [pc, #8]	; (8006ab4 <puts+0xc>)
 8006aaa:	4601      	mov	r1, r0
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	f7ff bf8d 	b.w	80069cc <_puts_r>
 8006ab2:	bf00      	nop
 8006ab4:	2000007c 	.word	0x2000007c

08006ab8 <__swbuf_r>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	460e      	mov	r6, r1
 8006abc:	4614      	mov	r4, r2
 8006abe:	4605      	mov	r5, r0
 8006ac0:	b118      	cbz	r0, 8006aca <__swbuf_r+0x12>
 8006ac2:	6983      	ldr	r3, [r0, #24]
 8006ac4:	b90b      	cbnz	r3, 8006aca <__swbuf_r+0x12>
 8006ac6:	f000 f9cf 	bl	8006e68 <__sinit>
 8006aca:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <__swbuf_r+0x98>)
 8006acc:	429c      	cmp	r4, r3
 8006ace:	d12b      	bne.n	8006b28 <__swbuf_r+0x70>
 8006ad0:	686c      	ldr	r4, [r5, #4]
 8006ad2:	69a3      	ldr	r3, [r4, #24]
 8006ad4:	60a3      	str	r3, [r4, #8]
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	071a      	lsls	r2, r3, #28
 8006ada:	d52f      	bpl.n	8006b3c <__swbuf_r+0x84>
 8006adc:	6923      	ldr	r3, [r4, #16]
 8006ade:	b36b      	cbz	r3, 8006b3c <__swbuf_r+0x84>
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	b2f6      	uxtb	r6, r6
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	4637      	mov	r7, r6
 8006ae8:	1ac0      	subs	r0, r0, r3
 8006aea:	6963      	ldr	r3, [r4, #20]
 8006aec:	4283      	cmp	r3, r0
 8006aee:	dc04      	bgt.n	8006afa <__swbuf_r+0x42>
 8006af0:	4621      	mov	r1, r4
 8006af2:	4628      	mov	r0, r5
 8006af4:	f000 f924 	bl	8006d40 <_fflush_r>
 8006af8:	bb30      	cbnz	r0, 8006b48 <__swbuf_r+0x90>
 8006afa:	68a3      	ldr	r3, [r4, #8]
 8006afc:	3001      	adds	r0, #1
 8006afe:	3b01      	subs	r3, #1
 8006b00:	60a3      	str	r3, [r4, #8]
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	6022      	str	r2, [r4, #0]
 8006b08:	701e      	strb	r6, [r3, #0]
 8006b0a:	6963      	ldr	r3, [r4, #20]
 8006b0c:	4283      	cmp	r3, r0
 8006b0e:	d004      	beq.n	8006b1a <__swbuf_r+0x62>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	07db      	lsls	r3, r3, #31
 8006b14:	d506      	bpl.n	8006b24 <__swbuf_r+0x6c>
 8006b16:	2e0a      	cmp	r6, #10
 8006b18:	d104      	bne.n	8006b24 <__swbuf_r+0x6c>
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f000 f90f 	bl	8006d40 <_fflush_r>
 8006b22:	b988      	cbnz	r0, 8006b48 <__swbuf_r+0x90>
 8006b24:	4638      	mov	r0, r7
 8006b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b28:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <__swbuf_r+0x9c>)
 8006b2a:	429c      	cmp	r4, r3
 8006b2c:	d101      	bne.n	8006b32 <__swbuf_r+0x7a>
 8006b2e:	68ac      	ldr	r4, [r5, #8]
 8006b30:	e7cf      	b.n	8006ad2 <__swbuf_r+0x1a>
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <__swbuf_r+0xa0>)
 8006b34:	429c      	cmp	r4, r3
 8006b36:	bf08      	it	eq
 8006b38:	68ec      	ldreq	r4, [r5, #12]
 8006b3a:	e7ca      	b.n	8006ad2 <__swbuf_r+0x1a>
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f000 f80c 	bl	8006b5c <__swsetup_r>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d0cb      	beq.n	8006ae0 <__swbuf_r+0x28>
 8006b48:	f04f 37ff 	mov.w	r7, #4294967295
 8006b4c:	e7ea      	b.n	8006b24 <__swbuf_r+0x6c>
 8006b4e:	bf00      	nop
 8006b50:	08007c98 	.word	0x08007c98
 8006b54:	08007cb8 	.word	0x08007cb8
 8006b58:	08007c78 	.word	0x08007c78

08006b5c <__swsetup_r>:
 8006b5c:	4b32      	ldr	r3, [pc, #200]	; (8006c28 <__swsetup_r+0xcc>)
 8006b5e:	b570      	push	{r4, r5, r6, lr}
 8006b60:	681d      	ldr	r5, [r3, #0]
 8006b62:	4606      	mov	r6, r0
 8006b64:	460c      	mov	r4, r1
 8006b66:	b125      	cbz	r5, 8006b72 <__swsetup_r+0x16>
 8006b68:	69ab      	ldr	r3, [r5, #24]
 8006b6a:	b913      	cbnz	r3, 8006b72 <__swsetup_r+0x16>
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f000 f97b 	bl	8006e68 <__sinit>
 8006b72:	4b2e      	ldr	r3, [pc, #184]	; (8006c2c <__swsetup_r+0xd0>)
 8006b74:	429c      	cmp	r4, r3
 8006b76:	d10f      	bne.n	8006b98 <__swsetup_r+0x3c>
 8006b78:	686c      	ldr	r4, [r5, #4]
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b80:	0719      	lsls	r1, r3, #28
 8006b82:	d42c      	bmi.n	8006bde <__swsetup_r+0x82>
 8006b84:	06dd      	lsls	r5, r3, #27
 8006b86:	d411      	bmi.n	8006bac <__swsetup_r+0x50>
 8006b88:	2309      	movs	r3, #9
 8006b8a:	6033      	str	r3, [r6, #0]
 8006b8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	e03e      	b.n	8006c16 <__swsetup_r+0xba>
 8006b98:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <__swsetup_r+0xd4>)
 8006b9a:	429c      	cmp	r4, r3
 8006b9c:	d101      	bne.n	8006ba2 <__swsetup_r+0x46>
 8006b9e:	68ac      	ldr	r4, [r5, #8]
 8006ba0:	e7eb      	b.n	8006b7a <__swsetup_r+0x1e>
 8006ba2:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <__swsetup_r+0xd8>)
 8006ba4:	429c      	cmp	r4, r3
 8006ba6:	bf08      	it	eq
 8006ba8:	68ec      	ldreq	r4, [r5, #12]
 8006baa:	e7e6      	b.n	8006b7a <__swsetup_r+0x1e>
 8006bac:	0758      	lsls	r0, r3, #29
 8006bae:	d512      	bpl.n	8006bd6 <__swsetup_r+0x7a>
 8006bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bb2:	b141      	cbz	r1, 8006bc6 <__swsetup_r+0x6a>
 8006bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bb8:	4299      	cmp	r1, r3
 8006bba:	d002      	beq.n	8006bc2 <__swsetup_r+0x66>
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f000 fa59 	bl	8007074 <_free_r>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	6063      	str	r3, [r4, #4]
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	f043 0308 	orr.w	r3, r3, #8
 8006bdc:	81a3      	strh	r3, [r4, #12]
 8006bde:	6923      	ldr	r3, [r4, #16]
 8006be0:	b94b      	cbnz	r3, 8006bf6 <__swsetup_r+0x9a>
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bec:	d003      	beq.n	8006bf6 <__swsetup_r+0x9a>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 f9ff 	bl	8006ff4 <__smakebuf_r>
 8006bf6:	89a0      	ldrh	r0, [r4, #12]
 8006bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bfc:	f010 0301 	ands.w	r3, r0, #1
 8006c00:	d00a      	beq.n	8006c18 <__swsetup_r+0xbc>
 8006c02:	2300      	movs	r3, #0
 8006c04:	60a3      	str	r3, [r4, #8]
 8006c06:	6963      	ldr	r3, [r4, #20]
 8006c08:	425b      	negs	r3, r3
 8006c0a:	61a3      	str	r3, [r4, #24]
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	b943      	cbnz	r3, 8006c22 <__swsetup_r+0xc6>
 8006c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c14:	d1ba      	bne.n	8006b8c <__swsetup_r+0x30>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	0781      	lsls	r1, r0, #30
 8006c1a:	bf58      	it	pl
 8006c1c:	6963      	ldrpl	r3, [r4, #20]
 8006c1e:	60a3      	str	r3, [r4, #8]
 8006c20:	e7f4      	b.n	8006c0c <__swsetup_r+0xb0>
 8006c22:	2000      	movs	r0, #0
 8006c24:	e7f7      	b.n	8006c16 <__swsetup_r+0xba>
 8006c26:	bf00      	nop
 8006c28:	2000007c 	.word	0x2000007c
 8006c2c:	08007c98 	.word	0x08007c98
 8006c30:	08007cb8 	.word	0x08007cb8
 8006c34:	08007c78 	.word	0x08007c78

08006c38 <__sflush_r>:
 8006c38:	898a      	ldrh	r2, [r1, #12]
 8006c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3e:	4605      	mov	r5, r0
 8006c40:	0710      	lsls	r0, r2, #28
 8006c42:	460c      	mov	r4, r1
 8006c44:	d458      	bmi.n	8006cf8 <__sflush_r+0xc0>
 8006c46:	684b      	ldr	r3, [r1, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dc05      	bgt.n	8006c58 <__sflush_r+0x20>
 8006c4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	dc02      	bgt.n	8006c58 <__sflush_r+0x20>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	d0f9      	beq.n	8006c52 <__sflush_r+0x1a>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c64:	682f      	ldr	r7, [r5, #0]
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	d032      	beq.n	8006cd0 <__sflush_r+0x98>
 8006c6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	075a      	lsls	r2, r3, #29
 8006c70:	d505      	bpl.n	8006c7e <__sflush_r+0x46>
 8006c72:	6863      	ldr	r3, [r4, #4]
 8006c74:	1ac0      	subs	r0, r0, r3
 8006c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c78:	b10b      	cbz	r3, 8006c7e <__sflush_r+0x46>
 8006c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c7c:	1ac0      	subs	r0, r0, r3
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4602      	mov	r2, r0
 8006c82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c84:	4628      	mov	r0, r5
 8006c86:	6a21      	ldr	r1, [r4, #32]
 8006c88:	47b0      	blx	r6
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	d106      	bne.n	8006c9e <__sflush_r+0x66>
 8006c90:	6829      	ldr	r1, [r5, #0]
 8006c92:	291d      	cmp	r1, #29
 8006c94:	d82c      	bhi.n	8006cf0 <__sflush_r+0xb8>
 8006c96:	4a29      	ldr	r2, [pc, #164]	; (8006d3c <__sflush_r+0x104>)
 8006c98:	40ca      	lsrs	r2, r1
 8006c9a:	07d6      	lsls	r6, r2, #31
 8006c9c:	d528      	bpl.n	8006cf0 <__sflush_r+0xb8>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	04d9      	lsls	r1, r3, #19
 8006ca2:	6062      	str	r2, [r4, #4]
 8006ca4:	6922      	ldr	r2, [r4, #16]
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	d504      	bpl.n	8006cb4 <__sflush_r+0x7c>
 8006caa:	1c42      	adds	r2, r0, #1
 8006cac:	d101      	bne.n	8006cb2 <__sflush_r+0x7a>
 8006cae:	682b      	ldr	r3, [r5, #0]
 8006cb0:	b903      	cbnz	r3, 8006cb4 <__sflush_r+0x7c>
 8006cb2:	6560      	str	r0, [r4, #84]	; 0x54
 8006cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb6:	602f      	str	r7, [r5, #0]
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	d0ca      	beq.n	8006c52 <__sflush_r+0x1a>
 8006cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	d002      	beq.n	8006cca <__sflush_r+0x92>
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f000 f9d5 	bl	8007074 <_free_r>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8006cce:	e7c1      	b.n	8006c54 <__sflush_r+0x1c>
 8006cd0:	6a21      	ldr	r1, [r4, #32]
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b0      	blx	r6
 8006cd8:	1c41      	adds	r1, r0, #1
 8006cda:	d1c7      	bne.n	8006c6c <__sflush_r+0x34>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0c4      	beq.n	8006c6c <__sflush_r+0x34>
 8006ce2:	2b1d      	cmp	r3, #29
 8006ce4:	d001      	beq.n	8006cea <__sflush_r+0xb2>
 8006ce6:	2b16      	cmp	r3, #22
 8006ce8:	d101      	bne.n	8006cee <__sflush_r+0xb6>
 8006cea:	602f      	str	r7, [r5, #0]
 8006cec:	e7b1      	b.n	8006c52 <__sflush_r+0x1a>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	e7ad      	b.n	8006c54 <__sflush_r+0x1c>
 8006cf8:	690f      	ldr	r7, [r1, #16]
 8006cfa:	2f00      	cmp	r7, #0
 8006cfc:	d0a9      	beq.n	8006c52 <__sflush_r+0x1a>
 8006cfe:	0793      	lsls	r3, r2, #30
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	600f      	str	r7, [r1, #0]
 8006d04:	bf0c      	ite	eq
 8006d06:	694b      	ldreq	r3, [r1, #20]
 8006d08:	2300      	movne	r3, #0
 8006d0a:	eba6 0807 	sub.w	r8, r6, r7
 8006d0e:	608b      	str	r3, [r1, #8]
 8006d10:	f1b8 0f00 	cmp.w	r8, #0
 8006d14:	dd9d      	ble.n	8006c52 <__sflush_r+0x1a>
 8006d16:	4643      	mov	r3, r8
 8006d18:	463a      	mov	r2, r7
 8006d1a:	6a21      	ldr	r1, [r4, #32]
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d20:	47b0      	blx	r6
 8006d22:	2800      	cmp	r0, #0
 8006d24:	dc06      	bgt.n	8006d34 <__sflush_r+0xfc>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d30:	81a3      	strh	r3, [r4, #12]
 8006d32:	e78f      	b.n	8006c54 <__sflush_r+0x1c>
 8006d34:	4407      	add	r7, r0
 8006d36:	eba8 0800 	sub.w	r8, r8, r0
 8006d3a:	e7e9      	b.n	8006d10 <__sflush_r+0xd8>
 8006d3c:	20400001 	.word	0x20400001

08006d40 <_fflush_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	690b      	ldr	r3, [r1, #16]
 8006d44:	4605      	mov	r5, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	b913      	cbnz	r3, 8006d50 <_fflush_r+0x10>
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	b118      	cbz	r0, 8006d5a <_fflush_r+0x1a>
 8006d52:	6983      	ldr	r3, [r0, #24]
 8006d54:	b90b      	cbnz	r3, 8006d5a <_fflush_r+0x1a>
 8006d56:	f000 f887 	bl	8006e68 <__sinit>
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <_fflush_r+0x6c>)
 8006d5c:	429c      	cmp	r4, r3
 8006d5e:	d11b      	bne.n	8006d98 <_fflush_r+0x58>
 8006d60:	686c      	ldr	r4, [r5, #4]
 8006d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0ef      	beq.n	8006d4a <_fflush_r+0xa>
 8006d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d6c:	07d0      	lsls	r0, r2, #31
 8006d6e:	d404      	bmi.n	8006d7a <_fflush_r+0x3a>
 8006d70:	0599      	lsls	r1, r3, #22
 8006d72:	d402      	bmi.n	8006d7a <_fflush_r+0x3a>
 8006d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d76:	f000 f915 	bl	8006fa4 <__retarget_lock_acquire_recursive>
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	f7ff ff5b 	bl	8006c38 <__sflush_r>
 8006d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d84:	4605      	mov	r5, r0
 8006d86:	07da      	lsls	r2, r3, #31
 8006d88:	d4e0      	bmi.n	8006d4c <_fflush_r+0xc>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	059b      	lsls	r3, r3, #22
 8006d8e:	d4dd      	bmi.n	8006d4c <_fflush_r+0xc>
 8006d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d92:	f000 f908 	bl	8006fa6 <__retarget_lock_release_recursive>
 8006d96:	e7d9      	b.n	8006d4c <_fflush_r+0xc>
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <_fflush_r+0x70>)
 8006d9a:	429c      	cmp	r4, r3
 8006d9c:	d101      	bne.n	8006da2 <_fflush_r+0x62>
 8006d9e:	68ac      	ldr	r4, [r5, #8]
 8006da0:	e7df      	b.n	8006d62 <_fflush_r+0x22>
 8006da2:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <_fflush_r+0x74>)
 8006da4:	429c      	cmp	r4, r3
 8006da6:	bf08      	it	eq
 8006da8:	68ec      	ldreq	r4, [r5, #12]
 8006daa:	e7da      	b.n	8006d62 <_fflush_r+0x22>
 8006dac:	08007c98 	.word	0x08007c98
 8006db0:	08007cb8 	.word	0x08007cb8
 8006db4:	08007c78 	.word	0x08007c78

08006db8 <std>:
 8006db8:	2300      	movs	r3, #0
 8006dba:	b510      	push	{r4, lr}
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	6083      	str	r3, [r0, #8]
 8006dc0:	8181      	strh	r1, [r0, #12]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6643      	str	r3, [r0, #100]	; 0x64
 8006dc6:	81c2      	strh	r2, [r0, #14]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	6183      	str	r3, [r0, #24]
 8006dcc:	e9c0 3300 	strd	r3, r3, [r0]
 8006dd0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dd4:	305c      	adds	r0, #92	; 0x5c
 8006dd6:	f7ff fdd9 	bl	800698c <memset>
 8006dda:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <std+0x38>)
 8006ddc:	6224      	str	r4, [r4, #32]
 8006dde:	6263      	str	r3, [r4, #36]	; 0x24
 8006de0:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <std+0x3c>)
 8006de2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006de4:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <std+0x40>)
 8006de6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <std+0x44>)
 8006dea:	6323      	str	r3, [r4, #48]	; 0x30
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	bf00      	nop
 8006df0:	08007835 	.word	0x08007835
 8006df4:	08007857 	.word	0x08007857
 8006df8:	0800788f 	.word	0x0800788f
 8006dfc:	080078b3 	.word	0x080078b3

08006e00 <_cleanup_r>:
 8006e00:	4901      	ldr	r1, [pc, #4]	; (8006e08 <_cleanup_r+0x8>)
 8006e02:	f000 b8af 	b.w	8006f64 <_fwalk_reent>
 8006e06:	bf00      	nop
 8006e08:	08006d41 	.word	0x08006d41

08006e0c <__sfmoreglue>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	2268      	movs	r2, #104	; 0x68
 8006e10:	1e4d      	subs	r5, r1, #1
 8006e12:	460e      	mov	r6, r1
 8006e14:	4355      	muls	r5, r2
 8006e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e1a:	f000 f997 	bl	800714c <_malloc_r>
 8006e1e:	4604      	mov	r4, r0
 8006e20:	b140      	cbz	r0, 8006e34 <__sfmoreglue+0x28>
 8006e22:	2100      	movs	r1, #0
 8006e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e28:	e9c0 1600 	strd	r1, r6, [r0]
 8006e2c:	300c      	adds	r0, #12
 8006e2e:	60a0      	str	r0, [r4, #8]
 8006e30:	f7ff fdac 	bl	800698c <memset>
 8006e34:	4620      	mov	r0, r4
 8006e36:	bd70      	pop	{r4, r5, r6, pc}

08006e38 <__sfp_lock_acquire>:
 8006e38:	4801      	ldr	r0, [pc, #4]	; (8006e40 <__sfp_lock_acquire+0x8>)
 8006e3a:	f000 b8b3 	b.w	8006fa4 <__retarget_lock_acquire_recursive>
 8006e3e:	bf00      	nop
 8006e40:	20001335 	.word	0x20001335

08006e44 <__sfp_lock_release>:
 8006e44:	4801      	ldr	r0, [pc, #4]	; (8006e4c <__sfp_lock_release+0x8>)
 8006e46:	f000 b8ae 	b.w	8006fa6 <__retarget_lock_release_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	20001335 	.word	0x20001335

08006e50 <__sinit_lock_acquire>:
 8006e50:	4801      	ldr	r0, [pc, #4]	; (8006e58 <__sinit_lock_acquire+0x8>)
 8006e52:	f000 b8a7 	b.w	8006fa4 <__retarget_lock_acquire_recursive>
 8006e56:	bf00      	nop
 8006e58:	20001336 	.word	0x20001336

08006e5c <__sinit_lock_release>:
 8006e5c:	4801      	ldr	r0, [pc, #4]	; (8006e64 <__sinit_lock_release+0x8>)
 8006e5e:	f000 b8a2 	b.w	8006fa6 <__retarget_lock_release_recursive>
 8006e62:	bf00      	nop
 8006e64:	20001336 	.word	0x20001336

08006e68 <__sinit>:
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	f7ff fff0 	bl	8006e50 <__sinit_lock_acquire>
 8006e70:	69a3      	ldr	r3, [r4, #24]
 8006e72:	b11b      	cbz	r3, 8006e7c <__sinit+0x14>
 8006e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e78:	f7ff bff0 	b.w	8006e5c <__sinit_lock_release>
 8006e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e80:	6523      	str	r3, [r4, #80]	; 0x50
 8006e82:	4620      	mov	r0, r4
 8006e84:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <__sinit+0x68>)
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <__sinit+0x6c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	bf04      	itt	eq
 8006e90:	2301      	moveq	r3, #1
 8006e92:	61a3      	streq	r3, [r4, #24]
 8006e94:	f000 f820 	bl	8006ed8 <__sfp>
 8006e98:	6060      	str	r0, [r4, #4]
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 f81c 	bl	8006ed8 <__sfp>
 8006ea0:	60a0      	str	r0, [r4, #8]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 f818 	bl	8006ed8 <__sfp>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2104      	movs	r1, #4
 8006eac:	60e0      	str	r0, [r4, #12]
 8006eae:	6860      	ldr	r0, [r4, #4]
 8006eb0:	f7ff ff82 	bl	8006db8 <std>
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	2109      	movs	r1, #9
 8006eb8:	68a0      	ldr	r0, [r4, #8]
 8006eba:	f7ff ff7d 	bl	8006db8 <std>
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	2112      	movs	r1, #18
 8006ec2:	68e0      	ldr	r0, [r4, #12]
 8006ec4:	f7ff ff78 	bl	8006db8 <std>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	61a3      	str	r3, [r4, #24]
 8006ecc:	e7d2      	b.n	8006e74 <__sinit+0xc>
 8006ece:	bf00      	nop
 8006ed0:	08007c74 	.word	0x08007c74
 8006ed4:	08006e01 	.word	0x08006e01

08006ed8 <__sfp>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	4607      	mov	r7, r0
 8006edc:	f7ff ffac 	bl	8006e38 <__sfp_lock_acquire>
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <__sfp+0x84>)
 8006ee2:	681e      	ldr	r6, [r3, #0]
 8006ee4:	69b3      	ldr	r3, [r6, #24]
 8006ee6:	b913      	cbnz	r3, 8006eee <__sfp+0x16>
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f7ff ffbd 	bl	8006e68 <__sinit>
 8006eee:	3648      	adds	r6, #72	; 0x48
 8006ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	d503      	bpl.n	8006f00 <__sfp+0x28>
 8006ef8:	6833      	ldr	r3, [r6, #0]
 8006efa:	b30b      	cbz	r3, 8006f40 <__sfp+0x68>
 8006efc:	6836      	ldr	r6, [r6, #0]
 8006efe:	e7f7      	b.n	8006ef0 <__sfp+0x18>
 8006f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f04:	b9d5      	cbnz	r5, 8006f3c <__sfp+0x64>
 8006f06:	4b16      	ldr	r3, [pc, #88]	; (8006f60 <__sfp+0x88>)
 8006f08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f0c:	6665      	str	r5, [r4, #100]	; 0x64
 8006f0e:	60e3      	str	r3, [r4, #12]
 8006f10:	f000 f847 	bl	8006fa2 <__retarget_lock_init_recursive>
 8006f14:	f7ff ff96 	bl	8006e44 <__sfp_lock_release>
 8006f18:	2208      	movs	r2, #8
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f20:	6025      	str	r5, [r4, #0]
 8006f22:	61a5      	str	r5, [r4, #24]
 8006f24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f2c:	f7ff fd2e 	bl	800698c <memset>
 8006f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f38:	4620      	mov	r0, r4
 8006f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f3c:	3468      	adds	r4, #104	; 0x68
 8006f3e:	e7d9      	b.n	8006ef4 <__sfp+0x1c>
 8006f40:	2104      	movs	r1, #4
 8006f42:	4638      	mov	r0, r7
 8006f44:	f7ff ff62 	bl	8006e0c <__sfmoreglue>
 8006f48:	4604      	mov	r4, r0
 8006f4a:	6030      	str	r0, [r6, #0]
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1d5      	bne.n	8006efc <__sfp+0x24>
 8006f50:	f7ff ff78 	bl	8006e44 <__sfp_lock_release>
 8006f54:	230c      	movs	r3, #12
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	e7ee      	b.n	8006f38 <__sfp+0x60>
 8006f5a:	bf00      	nop
 8006f5c:	08007c74 	.word	0x08007c74
 8006f60:	ffff0001 	.word	0xffff0001

08006f64 <_fwalk_reent>:
 8006f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f68:	4606      	mov	r6, r0
 8006f6a:	4688      	mov	r8, r1
 8006f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f70:	2700      	movs	r7, #0
 8006f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f76:	f1b9 0901 	subs.w	r9, r9, #1
 8006f7a:	d505      	bpl.n	8006f88 <_fwalk_reent+0x24>
 8006f7c:	6824      	ldr	r4, [r4, #0]
 8006f7e:	2c00      	cmp	r4, #0
 8006f80:	d1f7      	bne.n	8006f72 <_fwalk_reent+0xe>
 8006f82:	4638      	mov	r0, r7
 8006f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f88:	89ab      	ldrh	r3, [r5, #12]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d907      	bls.n	8006f9e <_fwalk_reent+0x3a>
 8006f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f92:	3301      	adds	r3, #1
 8006f94:	d003      	beq.n	8006f9e <_fwalk_reent+0x3a>
 8006f96:	4629      	mov	r1, r5
 8006f98:	4630      	mov	r0, r6
 8006f9a:	47c0      	blx	r8
 8006f9c:	4307      	orrs	r7, r0
 8006f9e:	3568      	adds	r5, #104	; 0x68
 8006fa0:	e7e9      	b.n	8006f76 <_fwalk_reent+0x12>

08006fa2 <__retarget_lock_init_recursive>:
 8006fa2:	4770      	bx	lr

08006fa4 <__retarget_lock_acquire_recursive>:
 8006fa4:	4770      	bx	lr

08006fa6 <__retarget_lock_release_recursive>:
 8006fa6:	4770      	bx	lr

08006fa8 <__swhatbuf_r>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	460e      	mov	r6, r1
 8006fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb0:	b096      	sub	sp, #88	; 0x58
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	2900      	cmp	r1, #0
 8006fb6:	461d      	mov	r5, r3
 8006fb8:	da08      	bge.n	8006fcc <__swhatbuf_r+0x24>
 8006fba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	602a      	str	r2, [r5, #0]
 8006fc2:	061a      	lsls	r2, r3, #24
 8006fc4:	d410      	bmi.n	8006fe8 <__swhatbuf_r+0x40>
 8006fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fca:	e00e      	b.n	8006fea <__swhatbuf_r+0x42>
 8006fcc:	466a      	mov	r2, sp
 8006fce:	f000 fc97 	bl	8007900 <_fstat_r>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	dbf1      	blt.n	8006fba <__swhatbuf_r+0x12>
 8006fd6:	9a01      	ldr	r2, [sp, #4]
 8006fd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fe0:	425a      	negs	r2, r3
 8006fe2:	415a      	adcs	r2, r3
 8006fe4:	602a      	str	r2, [r5, #0]
 8006fe6:	e7ee      	b.n	8006fc6 <__swhatbuf_r+0x1e>
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	2000      	movs	r0, #0
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	b016      	add	sp, #88	; 0x58
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ff4 <__smakebuf_r>:
 8006ff4:	898b      	ldrh	r3, [r1, #12]
 8006ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ff8:	079d      	lsls	r5, r3, #30
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	d507      	bpl.n	8007010 <__smakebuf_r+0x1c>
 8007000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	6123      	str	r3, [r4, #16]
 8007008:	2301      	movs	r3, #1
 800700a:	6163      	str	r3, [r4, #20]
 800700c:	b002      	add	sp, #8
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	ab01      	add	r3, sp, #4
 8007012:	466a      	mov	r2, sp
 8007014:	f7ff ffc8 	bl	8006fa8 <__swhatbuf_r>
 8007018:	9900      	ldr	r1, [sp, #0]
 800701a:	4605      	mov	r5, r0
 800701c:	4630      	mov	r0, r6
 800701e:	f000 f895 	bl	800714c <_malloc_r>
 8007022:	b948      	cbnz	r0, 8007038 <__smakebuf_r+0x44>
 8007024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007028:	059a      	lsls	r2, r3, #22
 800702a:	d4ef      	bmi.n	800700c <__smakebuf_r+0x18>
 800702c:	f023 0303 	bic.w	r3, r3, #3
 8007030:	f043 0302 	orr.w	r3, r3, #2
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	e7e3      	b.n	8007000 <__smakebuf_r+0xc>
 8007038:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <__smakebuf_r+0x7c>)
 800703a:	62b3      	str	r3, [r6, #40]	; 0x28
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	6020      	str	r0, [r4, #0]
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	6120      	str	r0, [r4, #16]
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	6163      	str	r3, [r4, #20]
 800704c:	9b01      	ldr	r3, [sp, #4]
 800704e:	b15b      	cbz	r3, 8007068 <__smakebuf_r+0x74>
 8007050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007054:	4630      	mov	r0, r6
 8007056:	f000 fc65 	bl	8007924 <_isatty_r>
 800705a:	b128      	cbz	r0, 8007068 <__smakebuf_r+0x74>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	89a0      	ldrh	r0, [r4, #12]
 800706a:	4305      	orrs	r5, r0
 800706c:	81a5      	strh	r5, [r4, #12]
 800706e:	e7cd      	b.n	800700c <__smakebuf_r+0x18>
 8007070:	08006e01 	.word	0x08006e01

08007074 <_free_r>:
 8007074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007076:	2900      	cmp	r1, #0
 8007078:	d043      	beq.n	8007102 <_free_r+0x8e>
 800707a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800707e:	1f0c      	subs	r4, r1, #4
 8007080:	9001      	str	r0, [sp, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	bfb8      	it	lt
 8007086:	18e4      	addlt	r4, r4, r3
 8007088:	f000 fc7c 	bl	8007984 <__malloc_lock>
 800708c:	4a1e      	ldr	r2, [pc, #120]	; (8007108 <_free_r+0x94>)
 800708e:	9801      	ldr	r0, [sp, #4]
 8007090:	6813      	ldr	r3, [r2, #0]
 8007092:	b933      	cbnz	r3, 80070a2 <_free_r+0x2e>
 8007094:	6063      	str	r3, [r4, #4]
 8007096:	6014      	str	r4, [r2, #0]
 8007098:	b003      	add	sp, #12
 800709a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800709e:	f000 bc77 	b.w	8007990 <__malloc_unlock>
 80070a2:	42a3      	cmp	r3, r4
 80070a4:	d908      	bls.n	80070b8 <_free_r+0x44>
 80070a6:	6825      	ldr	r5, [r4, #0]
 80070a8:	1961      	adds	r1, r4, r5
 80070aa:	428b      	cmp	r3, r1
 80070ac:	bf01      	itttt	eq
 80070ae:	6819      	ldreq	r1, [r3, #0]
 80070b0:	685b      	ldreq	r3, [r3, #4]
 80070b2:	1949      	addeq	r1, r1, r5
 80070b4:	6021      	streq	r1, [r4, #0]
 80070b6:	e7ed      	b.n	8007094 <_free_r+0x20>
 80070b8:	461a      	mov	r2, r3
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	b10b      	cbz	r3, 80070c2 <_free_r+0x4e>
 80070be:	42a3      	cmp	r3, r4
 80070c0:	d9fa      	bls.n	80070b8 <_free_r+0x44>
 80070c2:	6811      	ldr	r1, [r2, #0]
 80070c4:	1855      	adds	r5, r2, r1
 80070c6:	42a5      	cmp	r5, r4
 80070c8:	d10b      	bne.n	80070e2 <_free_r+0x6e>
 80070ca:	6824      	ldr	r4, [r4, #0]
 80070cc:	4421      	add	r1, r4
 80070ce:	1854      	adds	r4, r2, r1
 80070d0:	6011      	str	r1, [r2, #0]
 80070d2:	42a3      	cmp	r3, r4
 80070d4:	d1e0      	bne.n	8007098 <_free_r+0x24>
 80070d6:	681c      	ldr	r4, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	4421      	add	r1, r4
 80070dc:	6053      	str	r3, [r2, #4]
 80070de:	6011      	str	r1, [r2, #0]
 80070e0:	e7da      	b.n	8007098 <_free_r+0x24>
 80070e2:	d902      	bls.n	80070ea <_free_r+0x76>
 80070e4:	230c      	movs	r3, #12
 80070e6:	6003      	str	r3, [r0, #0]
 80070e8:	e7d6      	b.n	8007098 <_free_r+0x24>
 80070ea:	6825      	ldr	r5, [r4, #0]
 80070ec:	1961      	adds	r1, r4, r5
 80070ee:	428b      	cmp	r3, r1
 80070f0:	bf02      	ittt	eq
 80070f2:	6819      	ldreq	r1, [r3, #0]
 80070f4:	685b      	ldreq	r3, [r3, #4]
 80070f6:	1949      	addeq	r1, r1, r5
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	bf08      	it	eq
 80070fc:	6021      	streq	r1, [r4, #0]
 80070fe:	6054      	str	r4, [r2, #4]
 8007100:	e7ca      	b.n	8007098 <_free_r+0x24>
 8007102:	b003      	add	sp, #12
 8007104:	bd30      	pop	{r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	20001338 	.word	0x20001338

0800710c <sbrk_aligned>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	4e0e      	ldr	r6, [pc, #56]	; (8007148 <sbrk_aligned+0x3c>)
 8007110:	460c      	mov	r4, r1
 8007112:	4605      	mov	r5, r0
 8007114:	6831      	ldr	r1, [r6, #0]
 8007116:	b911      	cbnz	r1, 800711e <sbrk_aligned+0x12>
 8007118:	f000 fb7c 	bl	8007814 <_sbrk_r>
 800711c:	6030      	str	r0, [r6, #0]
 800711e:	4621      	mov	r1, r4
 8007120:	4628      	mov	r0, r5
 8007122:	f000 fb77 	bl	8007814 <_sbrk_r>
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	d00a      	beq.n	8007140 <sbrk_aligned+0x34>
 800712a:	1cc4      	adds	r4, r0, #3
 800712c:	f024 0403 	bic.w	r4, r4, #3
 8007130:	42a0      	cmp	r0, r4
 8007132:	d007      	beq.n	8007144 <sbrk_aligned+0x38>
 8007134:	1a21      	subs	r1, r4, r0
 8007136:	4628      	mov	r0, r5
 8007138:	f000 fb6c 	bl	8007814 <_sbrk_r>
 800713c:	3001      	adds	r0, #1
 800713e:	d101      	bne.n	8007144 <sbrk_aligned+0x38>
 8007140:	f04f 34ff 	mov.w	r4, #4294967295
 8007144:	4620      	mov	r0, r4
 8007146:	bd70      	pop	{r4, r5, r6, pc}
 8007148:	2000133c 	.word	0x2000133c

0800714c <_malloc_r>:
 800714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007150:	1ccd      	adds	r5, r1, #3
 8007152:	4607      	mov	r7, r0
 8007154:	f025 0503 	bic.w	r5, r5, #3
 8007158:	3508      	adds	r5, #8
 800715a:	2d0c      	cmp	r5, #12
 800715c:	bf38      	it	cc
 800715e:	250c      	movcc	r5, #12
 8007160:	2d00      	cmp	r5, #0
 8007162:	db01      	blt.n	8007168 <_malloc_r+0x1c>
 8007164:	42a9      	cmp	r1, r5
 8007166:	d905      	bls.n	8007174 <_malloc_r+0x28>
 8007168:	230c      	movs	r3, #12
 800716a:	2600      	movs	r6, #0
 800716c:	603b      	str	r3, [r7, #0]
 800716e:	4630      	mov	r0, r6
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	4e2e      	ldr	r6, [pc, #184]	; (8007230 <_malloc_r+0xe4>)
 8007176:	f000 fc05 	bl	8007984 <__malloc_lock>
 800717a:	6833      	ldr	r3, [r6, #0]
 800717c:	461c      	mov	r4, r3
 800717e:	bb34      	cbnz	r4, 80071ce <_malloc_r+0x82>
 8007180:	4629      	mov	r1, r5
 8007182:	4638      	mov	r0, r7
 8007184:	f7ff ffc2 	bl	800710c <sbrk_aligned>
 8007188:	1c43      	adds	r3, r0, #1
 800718a:	4604      	mov	r4, r0
 800718c:	d14d      	bne.n	800722a <_malloc_r+0xde>
 800718e:	6834      	ldr	r4, [r6, #0]
 8007190:	4626      	mov	r6, r4
 8007192:	2e00      	cmp	r6, #0
 8007194:	d140      	bne.n	8007218 <_malloc_r+0xcc>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	4631      	mov	r1, r6
 800719a:	4638      	mov	r0, r7
 800719c:	eb04 0803 	add.w	r8, r4, r3
 80071a0:	f000 fb38 	bl	8007814 <_sbrk_r>
 80071a4:	4580      	cmp	r8, r0
 80071a6:	d13a      	bne.n	800721e <_malloc_r+0xd2>
 80071a8:	6821      	ldr	r1, [r4, #0]
 80071aa:	3503      	adds	r5, #3
 80071ac:	4638      	mov	r0, r7
 80071ae:	1a6d      	subs	r5, r5, r1
 80071b0:	f025 0503 	bic.w	r5, r5, #3
 80071b4:	3508      	adds	r5, #8
 80071b6:	2d0c      	cmp	r5, #12
 80071b8:	bf38      	it	cc
 80071ba:	250c      	movcc	r5, #12
 80071bc:	4629      	mov	r1, r5
 80071be:	f7ff ffa5 	bl	800710c <sbrk_aligned>
 80071c2:	3001      	adds	r0, #1
 80071c4:	d02b      	beq.n	800721e <_malloc_r+0xd2>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	442b      	add	r3, r5
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	e00e      	b.n	80071ec <_malloc_r+0xa0>
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	1b52      	subs	r2, r2, r5
 80071d2:	d41e      	bmi.n	8007212 <_malloc_r+0xc6>
 80071d4:	2a0b      	cmp	r2, #11
 80071d6:	d916      	bls.n	8007206 <_malloc_r+0xba>
 80071d8:	1961      	adds	r1, r4, r5
 80071da:	42a3      	cmp	r3, r4
 80071dc:	6025      	str	r5, [r4, #0]
 80071de:	bf18      	it	ne
 80071e0:	6059      	strne	r1, [r3, #4]
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	bf08      	it	eq
 80071e6:	6031      	streq	r1, [r6, #0]
 80071e8:	5162      	str	r2, [r4, r5]
 80071ea:	604b      	str	r3, [r1, #4]
 80071ec:	f104 060b 	add.w	r6, r4, #11
 80071f0:	4638      	mov	r0, r7
 80071f2:	f000 fbcd 	bl	8007990 <__malloc_unlock>
 80071f6:	1d23      	adds	r3, r4, #4
 80071f8:	f026 0607 	bic.w	r6, r6, #7
 80071fc:	1af2      	subs	r2, r6, r3
 80071fe:	d0b6      	beq.n	800716e <_malloc_r+0x22>
 8007200:	1b9b      	subs	r3, r3, r6
 8007202:	50a3      	str	r3, [r4, r2]
 8007204:	e7b3      	b.n	800716e <_malloc_r+0x22>
 8007206:	6862      	ldr	r2, [r4, #4]
 8007208:	42a3      	cmp	r3, r4
 800720a:	bf0c      	ite	eq
 800720c:	6032      	streq	r2, [r6, #0]
 800720e:	605a      	strne	r2, [r3, #4]
 8007210:	e7ec      	b.n	80071ec <_malloc_r+0xa0>
 8007212:	4623      	mov	r3, r4
 8007214:	6864      	ldr	r4, [r4, #4]
 8007216:	e7b2      	b.n	800717e <_malloc_r+0x32>
 8007218:	4634      	mov	r4, r6
 800721a:	6876      	ldr	r6, [r6, #4]
 800721c:	e7b9      	b.n	8007192 <_malloc_r+0x46>
 800721e:	230c      	movs	r3, #12
 8007220:	4638      	mov	r0, r7
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	f000 fbb4 	bl	8007990 <__malloc_unlock>
 8007228:	e7a1      	b.n	800716e <_malloc_r+0x22>
 800722a:	6025      	str	r5, [r4, #0]
 800722c:	e7de      	b.n	80071ec <_malloc_r+0xa0>
 800722e:	bf00      	nop
 8007230:	20001338 	.word	0x20001338

08007234 <__sfputc_r>:
 8007234:	6893      	ldr	r3, [r2, #8]
 8007236:	3b01      	subs	r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	6093      	str	r3, [r2, #8]
 800723c:	b410      	push	{r4}
 800723e:	da08      	bge.n	8007252 <__sfputc_r+0x1e>
 8007240:	6994      	ldr	r4, [r2, #24]
 8007242:	42a3      	cmp	r3, r4
 8007244:	db01      	blt.n	800724a <__sfputc_r+0x16>
 8007246:	290a      	cmp	r1, #10
 8007248:	d103      	bne.n	8007252 <__sfputc_r+0x1e>
 800724a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800724e:	f7ff bc33 	b.w	8006ab8 <__swbuf_r>
 8007252:	6813      	ldr	r3, [r2, #0]
 8007254:	1c58      	adds	r0, r3, #1
 8007256:	6010      	str	r0, [r2, #0]
 8007258:	4608      	mov	r0, r1
 800725a:	7019      	strb	r1, [r3, #0]
 800725c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007260:	4770      	bx	lr

08007262 <__sfputs_r>:
 8007262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007264:	4606      	mov	r6, r0
 8007266:	460f      	mov	r7, r1
 8007268:	4614      	mov	r4, r2
 800726a:	18d5      	adds	r5, r2, r3
 800726c:	42ac      	cmp	r4, r5
 800726e:	d101      	bne.n	8007274 <__sfputs_r+0x12>
 8007270:	2000      	movs	r0, #0
 8007272:	e007      	b.n	8007284 <__sfputs_r+0x22>
 8007274:	463a      	mov	r2, r7
 8007276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727a:	4630      	mov	r0, r6
 800727c:	f7ff ffda 	bl	8007234 <__sfputc_r>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d1f3      	bne.n	800726c <__sfputs_r+0xa>
 8007284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007288 <_vfiprintf_r>:
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	460d      	mov	r5, r1
 800728e:	b09d      	sub	sp, #116	; 0x74
 8007290:	4614      	mov	r4, r2
 8007292:	4698      	mov	r8, r3
 8007294:	4606      	mov	r6, r0
 8007296:	b118      	cbz	r0, 80072a0 <_vfiprintf_r+0x18>
 8007298:	6983      	ldr	r3, [r0, #24]
 800729a:	b90b      	cbnz	r3, 80072a0 <_vfiprintf_r+0x18>
 800729c:	f7ff fde4 	bl	8006e68 <__sinit>
 80072a0:	4b89      	ldr	r3, [pc, #548]	; (80074c8 <_vfiprintf_r+0x240>)
 80072a2:	429d      	cmp	r5, r3
 80072a4:	d11b      	bne.n	80072de <_vfiprintf_r+0x56>
 80072a6:	6875      	ldr	r5, [r6, #4]
 80072a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072aa:	07d9      	lsls	r1, r3, #31
 80072ac:	d405      	bmi.n	80072ba <_vfiprintf_r+0x32>
 80072ae:	89ab      	ldrh	r3, [r5, #12]
 80072b0:	059a      	lsls	r2, r3, #22
 80072b2:	d402      	bmi.n	80072ba <_vfiprintf_r+0x32>
 80072b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072b6:	f7ff fe75 	bl	8006fa4 <__retarget_lock_acquire_recursive>
 80072ba:	89ab      	ldrh	r3, [r5, #12]
 80072bc:	071b      	lsls	r3, r3, #28
 80072be:	d501      	bpl.n	80072c4 <_vfiprintf_r+0x3c>
 80072c0:	692b      	ldr	r3, [r5, #16]
 80072c2:	b9eb      	cbnz	r3, 8007300 <_vfiprintf_r+0x78>
 80072c4:	4629      	mov	r1, r5
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7ff fc48 	bl	8006b5c <__swsetup_r>
 80072cc:	b1c0      	cbz	r0, 8007300 <_vfiprintf_r+0x78>
 80072ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072d0:	07dc      	lsls	r4, r3, #31
 80072d2:	d50e      	bpl.n	80072f2 <_vfiprintf_r+0x6a>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	b01d      	add	sp, #116	; 0x74
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	4b7b      	ldr	r3, [pc, #492]	; (80074cc <_vfiprintf_r+0x244>)
 80072e0:	429d      	cmp	r5, r3
 80072e2:	d101      	bne.n	80072e8 <_vfiprintf_r+0x60>
 80072e4:	68b5      	ldr	r5, [r6, #8]
 80072e6:	e7df      	b.n	80072a8 <_vfiprintf_r+0x20>
 80072e8:	4b79      	ldr	r3, [pc, #484]	; (80074d0 <_vfiprintf_r+0x248>)
 80072ea:	429d      	cmp	r5, r3
 80072ec:	bf08      	it	eq
 80072ee:	68f5      	ldreq	r5, [r6, #12]
 80072f0:	e7da      	b.n	80072a8 <_vfiprintf_r+0x20>
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	0598      	lsls	r0, r3, #22
 80072f6:	d4ed      	bmi.n	80072d4 <_vfiprintf_r+0x4c>
 80072f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072fa:	f7ff fe54 	bl	8006fa6 <__retarget_lock_release_recursive>
 80072fe:	e7e9      	b.n	80072d4 <_vfiprintf_r+0x4c>
 8007300:	2300      	movs	r3, #0
 8007302:	f8cd 800c 	str.w	r8, [sp, #12]
 8007306:	f04f 0901 	mov.w	r9, #1
 800730a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80074d4 <_vfiprintf_r+0x24c>
 800730e:	9309      	str	r3, [sp, #36]	; 0x24
 8007310:	2320      	movs	r3, #32
 8007312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007316:	2330      	movs	r3, #48	; 0x30
 8007318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800731c:	4623      	mov	r3, r4
 800731e:	469a      	mov	sl, r3
 8007320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007324:	b10a      	cbz	r2, 800732a <_vfiprintf_r+0xa2>
 8007326:	2a25      	cmp	r2, #37	; 0x25
 8007328:	d1f9      	bne.n	800731e <_vfiprintf_r+0x96>
 800732a:	ebba 0b04 	subs.w	fp, sl, r4
 800732e:	d00b      	beq.n	8007348 <_vfiprintf_r+0xc0>
 8007330:	465b      	mov	r3, fp
 8007332:	4622      	mov	r2, r4
 8007334:	4629      	mov	r1, r5
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff ff93 	bl	8007262 <__sfputs_r>
 800733c:	3001      	adds	r0, #1
 800733e:	f000 80aa 	beq.w	8007496 <_vfiprintf_r+0x20e>
 8007342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007344:	445a      	add	r2, fp
 8007346:	9209      	str	r2, [sp, #36]	; 0x24
 8007348:	f89a 3000 	ldrb.w	r3, [sl]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80a2 	beq.w	8007496 <_vfiprintf_r+0x20e>
 8007352:	2300      	movs	r3, #0
 8007354:	f04f 32ff 	mov.w	r2, #4294967295
 8007358:	f10a 0a01 	add.w	sl, sl, #1
 800735c:	9304      	str	r3, [sp, #16]
 800735e:	9307      	str	r3, [sp, #28]
 8007360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007364:	931a      	str	r3, [sp, #104]	; 0x68
 8007366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800736a:	4654      	mov	r4, sl
 800736c:	2205      	movs	r2, #5
 800736e:	4859      	ldr	r0, [pc, #356]	; (80074d4 <_vfiprintf_r+0x24c>)
 8007370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007374:	f000 faf8 	bl	8007968 <memchr>
 8007378:	9a04      	ldr	r2, [sp, #16]
 800737a:	b9d8      	cbnz	r0, 80073b4 <_vfiprintf_r+0x12c>
 800737c:	06d1      	lsls	r1, r2, #27
 800737e:	bf44      	itt	mi
 8007380:	2320      	movmi	r3, #32
 8007382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007386:	0713      	lsls	r3, r2, #28
 8007388:	bf44      	itt	mi
 800738a:	232b      	movmi	r3, #43	; 0x2b
 800738c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007390:	f89a 3000 	ldrb.w	r3, [sl]
 8007394:	2b2a      	cmp	r3, #42	; 0x2a
 8007396:	d015      	beq.n	80073c4 <_vfiprintf_r+0x13c>
 8007398:	9a07      	ldr	r2, [sp, #28]
 800739a:	4654      	mov	r4, sl
 800739c:	2000      	movs	r0, #0
 800739e:	f04f 0c0a 	mov.w	ip, #10
 80073a2:	4621      	mov	r1, r4
 80073a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a8:	3b30      	subs	r3, #48	; 0x30
 80073aa:	2b09      	cmp	r3, #9
 80073ac:	d94e      	bls.n	800744c <_vfiprintf_r+0x1c4>
 80073ae:	b1b0      	cbz	r0, 80073de <_vfiprintf_r+0x156>
 80073b0:	9207      	str	r2, [sp, #28]
 80073b2:	e014      	b.n	80073de <_vfiprintf_r+0x156>
 80073b4:	eba0 0308 	sub.w	r3, r0, r8
 80073b8:	46a2      	mov	sl, r4
 80073ba:	fa09 f303 	lsl.w	r3, r9, r3
 80073be:	4313      	orrs	r3, r2
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	e7d2      	b.n	800736a <_vfiprintf_r+0xe2>
 80073c4:	9b03      	ldr	r3, [sp, #12]
 80073c6:	1d19      	adds	r1, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	9103      	str	r1, [sp, #12]
 80073ce:	bfbb      	ittet	lt
 80073d0:	425b      	neglt	r3, r3
 80073d2:	f042 0202 	orrlt.w	r2, r2, #2
 80073d6:	9307      	strge	r3, [sp, #28]
 80073d8:	9307      	strlt	r3, [sp, #28]
 80073da:	bfb8      	it	lt
 80073dc:	9204      	strlt	r2, [sp, #16]
 80073de:	7823      	ldrb	r3, [r4, #0]
 80073e0:	2b2e      	cmp	r3, #46	; 0x2e
 80073e2:	d10c      	bne.n	80073fe <_vfiprintf_r+0x176>
 80073e4:	7863      	ldrb	r3, [r4, #1]
 80073e6:	2b2a      	cmp	r3, #42	; 0x2a
 80073e8:	d135      	bne.n	8007456 <_vfiprintf_r+0x1ce>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	3402      	adds	r4, #2
 80073ee:	1d1a      	adds	r2, r3, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	9203      	str	r2, [sp, #12]
 80073f6:	bfb8      	it	lt
 80073f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80073fc:	9305      	str	r3, [sp, #20]
 80073fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074e4 <_vfiprintf_r+0x25c>
 8007402:	2203      	movs	r2, #3
 8007404:	7821      	ldrb	r1, [r4, #0]
 8007406:	4650      	mov	r0, sl
 8007408:	f000 faae 	bl	8007968 <memchr>
 800740c:	b140      	cbz	r0, 8007420 <_vfiprintf_r+0x198>
 800740e:	2340      	movs	r3, #64	; 0x40
 8007410:	eba0 000a 	sub.w	r0, r0, sl
 8007414:	3401      	adds	r4, #1
 8007416:	fa03 f000 	lsl.w	r0, r3, r0
 800741a:	9b04      	ldr	r3, [sp, #16]
 800741c:	4303      	orrs	r3, r0
 800741e:	9304      	str	r3, [sp, #16]
 8007420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007424:	2206      	movs	r2, #6
 8007426:	482c      	ldr	r0, [pc, #176]	; (80074d8 <_vfiprintf_r+0x250>)
 8007428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800742c:	f000 fa9c 	bl	8007968 <memchr>
 8007430:	2800      	cmp	r0, #0
 8007432:	d03f      	beq.n	80074b4 <_vfiprintf_r+0x22c>
 8007434:	4b29      	ldr	r3, [pc, #164]	; (80074dc <_vfiprintf_r+0x254>)
 8007436:	bb1b      	cbnz	r3, 8007480 <_vfiprintf_r+0x1f8>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	3307      	adds	r3, #7
 800743c:	f023 0307 	bic.w	r3, r3, #7
 8007440:	3308      	adds	r3, #8
 8007442:	9303      	str	r3, [sp, #12]
 8007444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007446:	443b      	add	r3, r7
 8007448:	9309      	str	r3, [sp, #36]	; 0x24
 800744a:	e767      	b.n	800731c <_vfiprintf_r+0x94>
 800744c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007450:	460c      	mov	r4, r1
 8007452:	2001      	movs	r0, #1
 8007454:	e7a5      	b.n	80073a2 <_vfiprintf_r+0x11a>
 8007456:	2300      	movs	r3, #0
 8007458:	3401      	adds	r4, #1
 800745a:	f04f 0c0a 	mov.w	ip, #10
 800745e:	4619      	mov	r1, r3
 8007460:	9305      	str	r3, [sp, #20]
 8007462:	4620      	mov	r0, r4
 8007464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007468:	3a30      	subs	r2, #48	; 0x30
 800746a:	2a09      	cmp	r2, #9
 800746c:	d903      	bls.n	8007476 <_vfiprintf_r+0x1ee>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0c5      	beq.n	80073fe <_vfiprintf_r+0x176>
 8007472:	9105      	str	r1, [sp, #20]
 8007474:	e7c3      	b.n	80073fe <_vfiprintf_r+0x176>
 8007476:	fb0c 2101 	mla	r1, ip, r1, r2
 800747a:	4604      	mov	r4, r0
 800747c:	2301      	movs	r3, #1
 800747e:	e7f0      	b.n	8007462 <_vfiprintf_r+0x1da>
 8007480:	ab03      	add	r3, sp, #12
 8007482:	462a      	mov	r2, r5
 8007484:	a904      	add	r1, sp, #16
 8007486:	4630      	mov	r0, r6
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <_vfiprintf_r+0x258>)
 800748c:	e000      	b.n	8007490 <_vfiprintf_r+0x208>
 800748e:	bf00      	nop
 8007490:	4607      	mov	r7, r0
 8007492:	1c78      	adds	r0, r7, #1
 8007494:	d1d6      	bne.n	8007444 <_vfiprintf_r+0x1bc>
 8007496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007498:	07d9      	lsls	r1, r3, #31
 800749a:	d405      	bmi.n	80074a8 <_vfiprintf_r+0x220>
 800749c:	89ab      	ldrh	r3, [r5, #12]
 800749e:	059a      	lsls	r2, r3, #22
 80074a0:	d402      	bmi.n	80074a8 <_vfiprintf_r+0x220>
 80074a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a4:	f7ff fd7f 	bl	8006fa6 <__retarget_lock_release_recursive>
 80074a8:	89ab      	ldrh	r3, [r5, #12]
 80074aa:	065b      	lsls	r3, r3, #25
 80074ac:	f53f af12 	bmi.w	80072d4 <_vfiprintf_r+0x4c>
 80074b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b2:	e711      	b.n	80072d8 <_vfiprintf_r+0x50>
 80074b4:	ab03      	add	r3, sp, #12
 80074b6:	462a      	mov	r2, r5
 80074b8:	a904      	add	r1, sp, #16
 80074ba:	4630      	mov	r0, r6
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	4b08      	ldr	r3, [pc, #32]	; (80074e0 <_vfiprintf_r+0x258>)
 80074c0:	f000 f882 	bl	80075c8 <_printf_i>
 80074c4:	e7e4      	b.n	8007490 <_vfiprintf_r+0x208>
 80074c6:	bf00      	nop
 80074c8:	08007c98 	.word	0x08007c98
 80074cc:	08007cb8 	.word	0x08007cb8
 80074d0:	08007c78 	.word	0x08007c78
 80074d4:	08007cd8 	.word	0x08007cd8
 80074d8:	08007ce2 	.word	0x08007ce2
 80074dc:	00000000 	.word	0x00000000
 80074e0:	08007263 	.word	0x08007263
 80074e4:	08007cde 	.word	0x08007cde

080074e8 <_printf_common>:
 80074e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	4616      	mov	r6, r2
 80074ee:	4699      	mov	r9, r3
 80074f0:	688a      	ldr	r2, [r1, #8]
 80074f2:	4607      	mov	r7, r0
 80074f4:	690b      	ldr	r3, [r1, #16]
 80074f6:	460c      	mov	r4, r1
 80074f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074fc:	4293      	cmp	r3, r2
 80074fe:	bfb8      	it	lt
 8007500:	4613      	movlt	r3, r2
 8007502:	6033      	str	r3, [r6, #0]
 8007504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007508:	b10a      	cbz	r2, 800750e <_printf_common+0x26>
 800750a:	3301      	adds	r3, #1
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	0699      	lsls	r1, r3, #26
 8007512:	bf42      	ittt	mi
 8007514:	6833      	ldrmi	r3, [r6, #0]
 8007516:	3302      	addmi	r3, #2
 8007518:	6033      	strmi	r3, [r6, #0]
 800751a:	6825      	ldr	r5, [r4, #0]
 800751c:	f015 0506 	ands.w	r5, r5, #6
 8007520:	d106      	bne.n	8007530 <_printf_common+0x48>
 8007522:	f104 0a19 	add.w	sl, r4, #25
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	6832      	ldr	r2, [r6, #0]
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	42ab      	cmp	r3, r5
 800752e:	dc29      	bgt.n	8007584 <_printf_common+0x9c>
 8007530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007534:	1e13      	subs	r3, r2, #0
 8007536:	6822      	ldr	r2, [r4, #0]
 8007538:	bf18      	it	ne
 800753a:	2301      	movne	r3, #1
 800753c:	0692      	lsls	r2, r2, #26
 800753e:	d42e      	bmi.n	800759e <_printf_common+0xb6>
 8007540:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007544:	4649      	mov	r1, r9
 8007546:	4638      	mov	r0, r7
 8007548:	47c0      	blx	r8
 800754a:	3001      	adds	r0, #1
 800754c:	d021      	beq.n	8007592 <_printf_common+0xaa>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	341a      	adds	r4, #26
 8007552:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8007556:	f003 0306 	and.w	r3, r3, #6
 800755a:	6832      	ldr	r2, [r6, #0]
 800755c:	2600      	movs	r6, #0
 800755e:	2b04      	cmp	r3, #4
 8007560:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007564:	bf08      	it	eq
 8007566:	1aad      	subeq	r5, r5, r2
 8007568:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800756c:	bf14      	ite	ne
 800756e:	2500      	movne	r5, #0
 8007570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007574:	4293      	cmp	r3, r2
 8007576:	bfc4      	itt	gt
 8007578:	1a9b      	subgt	r3, r3, r2
 800757a:	18ed      	addgt	r5, r5, r3
 800757c:	42b5      	cmp	r5, r6
 800757e:	d11a      	bne.n	80075b6 <_printf_common+0xce>
 8007580:	2000      	movs	r0, #0
 8007582:	e008      	b.n	8007596 <_printf_common+0xae>
 8007584:	2301      	movs	r3, #1
 8007586:	4652      	mov	r2, sl
 8007588:	4649      	mov	r1, r9
 800758a:	4638      	mov	r0, r7
 800758c:	47c0      	blx	r8
 800758e:	3001      	adds	r0, #1
 8007590:	d103      	bne.n	800759a <_printf_common+0xb2>
 8007592:	f04f 30ff 	mov.w	r0, #4294967295
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759a:	3501      	adds	r5, #1
 800759c:	e7c3      	b.n	8007526 <_printf_common+0x3e>
 800759e:	18e1      	adds	r1, r4, r3
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	2030      	movs	r0, #48	; 0x30
 80075a4:	3302      	adds	r3, #2
 80075a6:	4422      	add	r2, r4
 80075a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075b4:	e7c4      	b.n	8007540 <_printf_common+0x58>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4622      	mov	r2, r4
 80075ba:	4649      	mov	r1, r9
 80075bc:	4638      	mov	r0, r7
 80075be:	47c0      	blx	r8
 80075c0:	3001      	adds	r0, #1
 80075c2:	d0e6      	beq.n	8007592 <_printf_common+0xaa>
 80075c4:	3601      	adds	r6, #1
 80075c6:	e7d9      	b.n	800757c <_printf_common+0x94>

080075c8 <_printf_i>:
 80075c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	7e0f      	ldrb	r7, [r1, #24]
 80075ce:	4691      	mov	r9, r2
 80075d0:	4680      	mov	r8, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	2f78      	cmp	r7, #120	; 0x78
 80075d6:	469a      	mov	sl, r3
 80075d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075de:	d807      	bhi.n	80075f0 <_printf_i+0x28>
 80075e0:	2f62      	cmp	r7, #98	; 0x62
 80075e2:	d80a      	bhi.n	80075fa <_printf_i+0x32>
 80075e4:	2f00      	cmp	r7, #0
 80075e6:	f000 80d8 	beq.w	800779a <_printf_i+0x1d2>
 80075ea:	2f58      	cmp	r7, #88	; 0x58
 80075ec:	f000 80a3 	beq.w	8007736 <_printf_i+0x16e>
 80075f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075f8:	e03a      	b.n	8007670 <_printf_i+0xa8>
 80075fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075fe:	2b15      	cmp	r3, #21
 8007600:	d8f6      	bhi.n	80075f0 <_printf_i+0x28>
 8007602:	a101      	add	r1, pc, #4	; (adr r1, 8007608 <_printf_i+0x40>)
 8007604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007608:	08007661 	.word	0x08007661
 800760c:	08007675 	.word	0x08007675
 8007610:	080075f1 	.word	0x080075f1
 8007614:	080075f1 	.word	0x080075f1
 8007618:	080075f1 	.word	0x080075f1
 800761c:	080075f1 	.word	0x080075f1
 8007620:	08007675 	.word	0x08007675
 8007624:	080075f1 	.word	0x080075f1
 8007628:	080075f1 	.word	0x080075f1
 800762c:	080075f1 	.word	0x080075f1
 8007630:	080075f1 	.word	0x080075f1
 8007634:	08007781 	.word	0x08007781
 8007638:	080076a5 	.word	0x080076a5
 800763c:	08007763 	.word	0x08007763
 8007640:	080075f1 	.word	0x080075f1
 8007644:	080075f1 	.word	0x080075f1
 8007648:	080077a3 	.word	0x080077a3
 800764c:	080075f1 	.word	0x080075f1
 8007650:	080076a5 	.word	0x080076a5
 8007654:	080075f1 	.word	0x080075f1
 8007658:	080075f1 	.word	0x080075f1
 800765c:	0800776b 	.word	0x0800776b
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	1d1a      	adds	r2, r3, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	602a      	str	r2, [r5, #0]
 8007668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800766c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007670:	2301      	movs	r3, #1
 8007672:	e0a3      	b.n	80077bc <_printf_i+0x1f4>
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	6829      	ldr	r1, [r5, #0]
 8007678:	0606      	lsls	r6, r0, #24
 800767a:	f101 0304 	add.w	r3, r1, #4
 800767e:	d50a      	bpl.n	8007696 <_printf_i+0xce>
 8007680:	680e      	ldr	r6, [r1, #0]
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	2e00      	cmp	r6, #0
 8007686:	da03      	bge.n	8007690 <_printf_i+0xc8>
 8007688:	232d      	movs	r3, #45	; 0x2d
 800768a:	4276      	negs	r6, r6
 800768c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007690:	485e      	ldr	r0, [pc, #376]	; (800780c <_printf_i+0x244>)
 8007692:	230a      	movs	r3, #10
 8007694:	e019      	b.n	80076ca <_printf_i+0x102>
 8007696:	680e      	ldr	r6, [r1, #0]
 8007698:	f010 0f40 	tst.w	r0, #64	; 0x40
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	bf18      	it	ne
 80076a0:	b236      	sxthne	r6, r6
 80076a2:	e7ef      	b.n	8007684 <_printf_i+0xbc>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	6820      	ldr	r0, [r4, #0]
 80076a8:	1d19      	adds	r1, r3, #4
 80076aa:	6029      	str	r1, [r5, #0]
 80076ac:	0601      	lsls	r1, r0, #24
 80076ae:	d501      	bpl.n	80076b4 <_printf_i+0xec>
 80076b0:	681e      	ldr	r6, [r3, #0]
 80076b2:	e002      	b.n	80076ba <_printf_i+0xf2>
 80076b4:	0646      	lsls	r6, r0, #25
 80076b6:	d5fb      	bpl.n	80076b0 <_printf_i+0xe8>
 80076b8:	881e      	ldrh	r6, [r3, #0]
 80076ba:	2f6f      	cmp	r7, #111	; 0x6f
 80076bc:	4853      	ldr	r0, [pc, #332]	; (800780c <_printf_i+0x244>)
 80076be:	bf0c      	ite	eq
 80076c0:	2308      	moveq	r3, #8
 80076c2:	230a      	movne	r3, #10
 80076c4:	2100      	movs	r1, #0
 80076c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ca:	6865      	ldr	r5, [r4, #4]
 80076cc:	2d00      	cmp	r5, #0
 80076ce:	60a5      	str	r5, [r4, #8]
 80076d0:	bfa2      	ittt	ge
 80076d2:	6821      	ldrge	r1, [r4, #0]
 80076d4:	f021 0104 	bicge.w	r1, r1, #4
 80076d8:	6021      	strge	r1, [r4, #0]
 80076da:	b90e      	cbnz	r6, 80076e0 <_printf_i+0x118>
 80076dc:	2d00      	cmp	r5, #0
 80076de:	d04d      	beq.n	800777c <_printf_i+0x1b4>
 80076e0:	4615      	mov	r5, r2
 80076e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80076e6:	fb03 6711 	mls	r7, r3, r1, r6
 80076ea:	5dc7      	ldrb	r7, [r0, r7]
 80076ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076f0:	4637      	mov	r7, r6
 80076f2:	460e      	mov	r6, r1
 80076f4:	42bb      	cmp	r3, r7
 80076f6:	d9f4      	bls.n	80076e2 <_printf_i+0x11a>
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d10b      	bne.n	8007714 <_printf_i+0x14c>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	07de      	lsls	r6, r3, #31
 8007700:	d508      	bpl.n	8007714 <_printf_i+0x14c>
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	6861      	ldr	r1, [r4, #4]
 8007706:	4299      	cmp	r1, r3
 8007708:	bfde      	ittt	le
 800770a:	2330      	movle	r3, #48	; 0x30
 800770c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007710:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007714:	1b52      	subs	r2, r2, r5
 8007716:	6122      	str	r2, [r4, #16]
 8007718:	464b      	mov	r3, r9
 800771a:	aa03      	add	r2, sp, #12
 800771c:	4621      	mov	r1, r4
 800771e:	4640      	mov	r0, r8
 8007720:	f8cd a000 	str.w	sl, [sp]
 8007724:	f7ff fee0 	bl	80074e8 <_printf_common>
 8007728:	3001      	adds	r0, #1
 800772a:	d14c      	bne.n	80077c6 <_printf_i+0x1fe>
 800772c:	f04f 30ff 	mov.w	r0, #4294967295
 8007730:	b004      	add	sp, #16
 8007732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007736:	4835      	ldr	r0, [pc, #212]	; (800780c <_printf_i+0x244>)
 8007738:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800773c:	6829      	ldr	r1, [r5, #0]
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	f851 6b04 	ldr.w	r6, [r1], #4
 8007744:	6029      	str	r1, [r5, #0]
 8007746:	061d      	lsls	r5, r3, #24
 8007748:	d514      	bpl.n	8007774 <_printf_i+0x1ac>
 800774a:	07df      	lsls	r7, r3, #31
 800774c:	bf44      	itt	mi
 800774e:	f043 0320 	orrmi.w	r3, r3, #32
 8007752:	6023      	strmi	r3, [r4, #0]
 8007754:	b91e      	cbnz	r6, 800775e <_printf_i+0x196>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f023 0320 	bic.w	r3, r3, #32
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	2310      	movs	r3, #16
 8007760:	e7b0      	b.n	80076c4 <_printf_i+0xfc>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f043 0320 	orr.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	2378      	movs	r3, #120	; 0x78
 800776c:	4828      	ldr	r0, [pc, #160]	; (8007810 <_printf_i+0x248>)
 800776e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007772:	e7e3      	b.n	800773c <_printf_i+0x174>
 8007774:	0659      	lsls	r1, r3, #25
 8007776:	bf48      	it	mi
 8007778:	b2b6      	uxthmi	r6, r6
 800777a:	e7e6      	b.n	800774a <_printf_i+0x182>
 800777c:	4615      	mov	r5, r2
 800777e:	e7bb      	b.n	80076f8 <_printf_i+0x130>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	6826      	ldr	r6, [r4, #0]
 8007784:	1d18      	adds	r0, r3, #4
 8007786:	6961      	ldr	r1, [r4, #20]
 8007788:	6028      	str	r0, [r5, #0]
 800778a:	0635      	lsls	r5, r6, #24
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	d501      	bpl.n	8007794 <_printf_i+0x1cc>
 8007790:	6019      	str	r1, [r3, #0]
 8007792:	e002      	b.n	800779a <_printf_i+0x1d2>
 8007794:	0670      	lsls	r0, r6, #25
 8007796:	d5fb      	bpl.n	8007790 <_printf_i+0x1c8>
 8007798:	8019      	strh	r1, [r3, #0]
 800779a:	2300      	movs	r3, #0
 800779c:	4615      	mov	r5, r2
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	e7ba      	b.n	8007718 <_printf_i+0x150>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	2100      	movs	r1, #0
 80077a6:	1d1a      	adds	r2, r3, #4
 80077a8:	602a      	str	r2, [r5, #0]
 80077aa:	681d      	ldr	r5, [r3, #0]
 80077ac:	6862      	ldr	r2, [r4, #4]
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 f8da 	bl	8007968 <memchr>
 80077b4:	b108      	cbz	r0, 80077ba <_printf_i+0x1f2>
 80077b6:	1b40      	subs	r0, r0, r5
 80077b8:	6060      	str	r0, [r4, #4]
 80077ba:	6863      	ldr	r3, [r4, #4]
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	2300      	movs	r3, #0
 80077c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c4:	e7a8      	b.n	8007718 <_printf_i+0x150>
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4649      	mov	r1, r9
 80077cc:	4640      	mov	r0, r8
 80077ce:	47d0      	blx	sl
 80077d0:	3001      	adds	r0, #1
 80077d2:	d0ab      	beq.n	800772c <_printf_i+0x164>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	079b      	lsls	r3, r3, #30
 80077d8:	d413      	bmi.n	8007802 <_printf_i+0x23a>
 80077da:	68e0      	ldr	r0, [r4, #12]
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	4298      	cmp	r0, r3
 80077e0:	bfb8      	it	lt
 80077e2:	4618      	movlt	r0, r3
 80077e4:	e7a4      	b.n	8007730 <_printf_i+0x168>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4632      	mov	r2, r6
 80077ea:	4649      	mov	r1, r9
 80077ec:	4640      	mov	r0, r8
 80077ee:	47d0      	blx	sl
 80077f0:	3001      	adds	r0, #1
 80077f2:	d09b      	beq.n	800772c <_printf_i+0x164>
 80077f4:	3501      	adds	r5, #1
 80077f6:	68e3      	ldr	r3, [r4, #12]
 80077f8:	9903      	ldr	r1, [sp, #12]
 80077fa:	1a5b      	subs	r3, r3, r1
 80077fc:	42ab      	cmp	r3, r5
 80077fe:	dcf2      	bgt.n	80077e6 <_printf_i+0x21e>
 8007800:	e7eb      	b.n	80077da <_printf_i+0x212>
 8007802:	2500      	movs	r5, #0
 8007804:	f104 0619 	add.w	r6, r4, #25
 8007808:	e7f5      	b.n	80077f6 <_printf_i+0x22e>
 800780a:	bf00      	nop
 800780c:	08007ce9 	.word	0x08007ce9
 8007810:	08007cfa 	.word	0x08007cfa

08007814 <_sbrk_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	2300      	movs	r3, #0
 8007818:	4d05      	ldr	r5, [pc, #20]	; (8007830 <_sbrk_r+0x1c>)
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	602b      	str	r3, [r5, #0]
 8007820:	f7f9 fb94 	bl	8000f4c <_sbrk>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d102      	bne.n	800782e <_sbrk_r+0x1a>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	b103      	cbz	r3, 800782e <_sbrk_r+0x1a>
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	20001340 	.word	0x20001340

08007834 <__sread>:
 8007834:	b510      	push	{r4, lr}
 8007836:	460c      	mov	r4, r1
 8007838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783c:	f000 f8ae 	bl	800799c <_read_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	bfab      	itete	ge
 8007844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007846:	89a3      	ldrhlt	r3, [r4, #12]
 8007848:	181b      	addge	r3, r3, r0
 800784a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800784e:	bfac      	ite	ge
 8007850:	6563      	strge	r3, [r4, #84]	; 0x54
 8007852:	81a3      	strhlt	r3, [r4, #12]
 8007854:	bd10      	pop	{r4, pc}

08007856 <__swrite>:
 8007856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785a:	461f      	mov	r7, r3
 800785c:	898b      	ldrh	r3, [r1, #12]
 800785e:	4605      	mov	r5, r0
 8007860:	460c      	mov	r4, r1
 8007862:	05db      	lsls	r3, r3, #23
 8007864:	4616      	mov	r6, r2
 8007866:	d505      	bpl.n	8007874 <__swrite+0x1e>
 8007868:	2302      	movs	r3, #2
 800786a:	2200      	movs	r2, #0
 800786c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007870:	f000 f868 	bl	8007944 <_lseek_r>
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	4632      	mov	r2, r6
 8007878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787c:	4628      	mov	r0, r5
 800787e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	463b      	mov	r3, r7
 8007886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800788a:	f000 b817 	b.w	80078bc <_write_r>

0800788e <__sseek>:
 800788e:	b510      	push	{r4, lr}
 8007890:	460c      	mov	r4, r1
 8007892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007896:	f000 f855 	bl	8007944 <_lseek_r>
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	bf15      	itete	ne
 80078a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078aa:	81a3      	strheq	r3, [r4, #12]
 80078ac:	bf18      	it	ne
 80078ae:	81a3      	strhne	r3, [r4, #12]
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <__sclose>:
 80078b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b6:	f000 b813 	b.w	80078e0 <_close_r>
	...

080078bc <_write_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4604      	mov	r4, r0
 80078c0:	4d06      	ldr	r5, [pc, #24]	; (80078dc <_write_r+0x20>)
 80078c2:	4608      	mov	r0, r1
 80078c4:	4611      	mov	r1, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	602a      	str	r2, [r5, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f7f8 fe64 	bl	8000598 <_write>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_write_r+0x1e>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	b103      	cbz	r3, 80078da <_write_r+0x1e>
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	20001340 	.word	0x20001340

080078e0 <_close_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	2300      	movs	r3, #0
 80078e4:	4d05      	ldr	r5, [pc, #20]	; (80078fc <_close_r+0x1c>)
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7f9 fb20 	bl	8000f30 <_close>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_close_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_close_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20001340 	.word	0x20001340

08007900 <_fstat_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	2300      	movs	r3, #0
 8007904:	4d06      	ldr	r5, [pc, #24]	; (8007920 <_fstat_r+0x20>)
 8007906:	4604      	mov	r4, r0
 8007908:	4608      	mov	r0, r1
 800790a:	4611      	mov	r1, r2
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	f7f9 fb13 	bl	8000f38 <_fstat>
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	d102      	bne.n	800791c <_fstat_r+0x1c>
 8007916:	682b      	ldr	r3, [r5, #0]
 8007918:	b103      	cbz	r3, 800791c <_fstat_r+0x1c>
 800791a:	6023      	str	r3, [r4, #0]
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	20001340 	.word	0x20001340

08007924 <_isatty_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	2300      	movs	r3, #0
 8007928:	4d05      	ldr	r5, [pc, #20]	; (8007940 <_isatty_r+0x1c>)
 800792a:	4604      	mov	r4, r0
 800792c:	4608      	mov	r0, r1
 800792e:	602b      	str	r3, [r5, #0]
 8007930:	f7f9 fb08 	bl	8000f44 <_isatty>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_isatty_r+0x1a>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_isatty_r+0x1a>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	20001340 	.word	0x20001340

08007944 <_lseek_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4604      	mov	r4, r0
 8007948:	4d06      	ldr	r5, [pc, #24]	; (8007964 <_lseek_r+0x20>)
 800794a:	4608      	mov	r0, r1
 800794c:	4611      	mov	r1, r2
 800794e:	2200      	movs	r2, #0
 8007950:	602a      	str	r2, [r5, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	f7f9 faf8 	bl	8000f48 <_lseek>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_lseek_r+0x1e>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_lseek_r+0x1e>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	20001340 	.word	0x20001340

08007968 <memchr>:
 8007968:	b2c9      	uxtb	r1, r1
 800796a:	4402      	add	r2, r0
 800796c:	b510      	push	{r4, lr}
 800796e:	4290      	cmp	r0, r2
 8007970:	4603      	mov	r3, r0
 8007972:	d101      	bne.n	8007978 <memchr+0x10>
 8007974:	2300      	movs	r3, #0
 8007976:	e003      	b.n	8007980 <memchr+0x18>
 8007978:	781c      	ldrb	r4, [r3, #0]
 800797a:	3001      	adds	r0, #1
 800797c:	428c      	cmp	r4, r1
 800797e:	d1f6      	bne.n	800796e <memchr+0x6>
 8007980:	4618      	mov	r0, r3
 8007982:	bd10      	pop	{r4, pc}

08007984 <__malloc_lock>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__malloc_lock+0x8>)
 8007986:	f7ff bb0d 	b.w	8006fa4 <__retarget_lock_acquire_recursive>
 800798a:	bf00      	nop
 800798c:	20001334 	.word	0x20001334

08007990 <__malloc_unlock>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__malloc_unlock+0x8>)
 8007992:	f7ff bb08 	b.w	8006fa6 <__retarget_lock_release_recursive>
 8007996:	bf00      	nop
 8007998:	20001334 	.word	0x20001334

0800799c <_read_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4604      	mov	r4, r0
 80079a0:	4d06      	ldr	r5, [pc, #24]	; (80079bc <_read_r+0x20>)
 80079a2:	4608      	mov	r0, r1
 80079a4:	4611      	mov	r1, r2
 80079a6:	2200      	movs	r2, #0
 80079a8:	602a      	str	r2, [r5, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f7f9 fab2 	bl	8000f14 <_read>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_read_r+0x1e>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_read_r+0x1e>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	20001340 	.word	0x20001340

080079c0 <_init>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr

080079cc <_fini>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	bf00      	nop
 80079d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d2:	bc08      	pop	{r3}
 80079d4:	469e      	mov	lr, r3
 80079d6:	4770      	bx	lr
